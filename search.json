[{"path":"/articles/liana_cc2tensor.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Context Factorisation with tensor-cell2cell","text":"Tensor decomposition proposed tensor_cell2cell paper, enables us decipher context-driven intercellular communication simultaneously accounting unlimited number “contexts”. contexts represent samples coming longtidinal sampling points, multiple conditions, cellular niches. power tensor-cell2cell ability decompose latent patterns intercellular communication untargeted manner, theory able handle cell-cell communication results coming experimental design, regardless complexity. Simply put, tensor_cell2cell uses LIANA’s output sample build 4D tensor, represented 1) contexts, 2) interactions, 3) sender, 4) receiver cell types. tensor decomposed set factors, can interpreted low dimensionality latent variables (vectors) capture CCC patterns across contexts. , combine LIANA tensor_cell2cell decipher potential ligand-receptor interaction changes. simple example, look ~14000 PBMCs 8 donors, IFN-beta stimulation (GSE96583; obtained via ExperimentHub & muscData). Note focusing PBMCs, purpose tutorial, assume coordinated events occur among . tutorial heavily influenced tutorials tensor_cell2cell. usage liana x tensor_cell2cell logically cite articles, particular tensor_cell2cell (see reference bottom). Load required libraries","code":"library(tidyverse, quietly = TRUE) library(SingleCellExperiment, quietly = TRUE) library(reticulate, quietly = TRUE) library(magrittr, quietly = TRUE) library(liana, quietly = TRUE) library(ExperimentHub, quietly = TRUE)"},{"path":[]},{"path":"/articles/liana_cc2tensor.html","id":"request-data","dir":"Articles","previous_headings":"Introduction > Request Data and Preprocess","what":"Request Data","title":"Context Factorisation with tensor-cell2cell","text":"","code":"eh <- ExperimentHub() # Get Data (sce <- eh[[\"EH2259\"]]) ## class: SingleCellExperiment  ## dim: 35635 29065  ## metadata(0): ## assays(1): counts ## rownames(35635): MIR1302-10 FAM138A ... MT-ND6 MT-CYB ## rowData names(2): ENSEMBL SYMBOL ## colnames(29065): AAACATACAATGCC-1 AAACATACATTTCC-1 ... TTTGCATGGTTTGG-1 ##   TTTGCATGTCTTAC-1 ## colData names(5): ind stim cluster cell multiplets ## reducedDimNames(1): TSNE ## mainExpName: NULL ## altExpNames(0):"},{"path":"/articles/liana_cc2tensor.html","id":"preprocess","dir":"Articles","previous_headings":"Introduction > Request Data and Preprocess","what":"Preprocess","title":"Context Factorisation with tensor-cell2cell","text":"","code":"# basic feature filtering sce <- sce[rowSums(counts(sce) >= 1) >= 5, ]  # basic outlier filtering qc <- scater::perCellQCMetrics(sce)  # remove cells with few or many detected genes ol <- scater::isOutlier(metric = qc$detected, nmads = 2, log = TRUE) sce <- sce[, !ol]  # Remove doublets sce <- sce[, sce$multiplets==\"singlet\"]  # Set rownames to symbols rownames(sce) <- rowData(sce)$SYMBOL  # log-transform sce <- scuttle::logNormCounts(sce)  # Create a label unique for every sample sce$context <- paste(sce$stim, sce$ind, sep=\"|\")"},{"path":"/articles/liana_cc2tensor.html","id":"ensure-consitency-across-cell-identities","dir":"Articles","previous_headings":"Introduction > Request Data and Preprocess","what":"Ensure Consitency across Cell identities","title":"Context Factorisation with tensor-cell2cell","text":"obtain consistent CCC patterns across samples, need make sure cell identities stable. Namely,","code":"# Plot sce %>%   get_abundance_summary(sample_col = \"context\",                         idents_col = \"cell\",                          min_cells = 10, # min cells per sample                         min_samples = 3, # min samples                         min_prop = 0.2 # min prop of samples                         ) %>%   plot_abundance_summary() # filter non abundant celltypes sce <- liana::filter_nonabundant_celltypes(sce,                                            sample_col = \"context\",                                            idents_col = \"cell\")"},{"path":"/articles/liana_cc2tensor.html","id":"run-liana-for-on-each-individual-sample-","dir":"Articles","previous_headings":"Introduction","what":"Run liana for on each individual sample.","title":"Context Factorisation with tensor-cell2cell","text":"order construct tensor, first need obtain CCC predictions sample. case, use SingleCellSignalR scores, regularized, theory directly comparable dataset. One can use method non-negative scores LIANA /w cell2cell_tensor previously shown yield consistent results (Armingol & Baghdassarian, 2022). Note liana_bysample works SingleCellExperiment alone, wish use Seurat, please use .SingleCellExperiment function. Note case, don’t apply expr_prop threshold keep values interactions . Alternatively, one restrictive communication events thought occurring, increase expr_prop higher value, return_all interactions expr_prop assigned worst inferred value. value can also manually replaced e.g 0. expect see successful LIANA run sample/context.","code":"# Run LIANA by sample sce <- liana_bysample(sce = sce,                       sample_col = \"context\",                       idents_col = \"cell\",                       method = \"sca\", # we use SingleCellSignalR's score alone                       expr_prop = 0, # expression proportion threshold                       inplace=TRUE, # saves inplace to sce                       return_all = FALSE # whether to return non-expressed interactions                        ) summary(sce@metadata$liana_res) ##           Length Class  Mode ## ctrl|101  12     tbl_df list ## ctrl|1015 12     tbl_df list ## ctrl|1016 12     tbl_df list ## ctrl|1039 12     tbl_df list ## ctrl|107  12     tbl_df list ## ctrl|1244 12     tbl_df list ## ctrl|1256 12     tbl_df list ## ctrl|1488 12     tbl_df list ## stim|101  12     tbl_df list ## stim|1015 12     tbl_df list ## stim|1016 12     tbl_df list ## stim|1039 12     tbl_df list ## stim|107  12     tbl_df list ## stim|1244 12     tbl_df list ## stim|1256 12     tbl_df list ## stim|1488 12     tbl_df list"},{"path":"/articles/liana_cc2tensor.html","id":"cell-cell-communication-tensor-decomposition","dir":"Articles","previous_headings":"","what":"Cell-cell Communication Tensor Decomposition","title":"Context Factorisation with tensor-cell2cell","text":", call tensor_cell2cell. function first format ligand-receptor scores per sample 4 Dimensional tensor. estimate number factors tensor decomposed (set rank NULL, sake computational speed, pre-calculated rank explicitly set 7 ). Optimal rank estimation can computationally demanding, required ensure robust results, one consider increasing runs parameter. See elbow plot example, calculated rank set NULL. One can think higher-order non-negative matrix factorization factors can used reconstruct tensor. refer user publication tensor-cell2cell information. Note default LIANA set conda environment basilisk (conda_env NULL), user can alternatively specify name conda_env cell2cell called via reticulate. parameter plays essential treat missing cell types interactions. scenario, use outer, decompose CCC across cell identities interactions dataset. Alternatively, one change ‘inner’ CCC paterns decomposed patterns across cell identities & interactions shared samples/contexts. Similarly, one consider fill missing values across samples, namely missing interactions cell types via lr_fill cell_fill parameters, respecitvely. set NaN default thus imputed. example, setting 0 suggest missing values biologically-relevant. cell2cell_tensor also accepts additional parameters tune tensor decomposition, scope tutorial. Stay tuned set tutorials comprehensive application liana tensor!","code":"sce <- liana_tensor_c2c(sce = sce,                         score_col = 'LRscore',                         rank = 7,  # set to None to estimate for you data!                         how='outer',  #  defines how the tensor is built                         conda_env = NULL, # used to pass an existing conda env with cell2cell                         use_available = FALSE # detect & load cell2cell if available                         ) ## Setting up Conda Environment with Basilisk ## Building the tensor using LRscore... ## Decomposing the tensor..."},{"path":"/articles/liana_cc2tensor.html","id":"rank-estimation-example","dir":"Articles","previous_headings":"Cell-cell Communication Tensor Decomposition","what":"Rank Estimation Example","title":"Context Factorisation with tensor-cell2cell","text":"Upon Rank estimation, optimal rank estimated returned according elbow normalized reconstruction error. error measures different original tensor sum R rank-1 tensors used approximate . want pick rank provides good trade-minimizes number factors (ranks) error.","code":"# load pre-computed results  # these would be assigned to this element, if computed sce@metadata$tensor_res$elbow_metric_raw <-    read.csv(file.path(system.file(package = \"liana\"), \"example_elbow.csv\"))  # Estimate standard error error_average <- sce@metadata$tensor_res$elbow_metric_raw %>%     t() %>%     as.data.frame() %>%     mutate(rank=row_number()) %>%      pivot_longer(-rank, names_to = \"run_no\", values_to = \"error\") %>%     group_by(rank) %>%     summarize(average = mean(error),               N = n(),               SE.low = average - (sd(error)/sqrt(N)),               SE.high = average + (sd(error)/sqrt(N))            )  # plot error_average %>%     ggplot(aes(x=rank, y=average), group=1) +     geom_line(col='red') +      geom_ribbon(aes(ymin = SE.low, ymax = SE.high), alpha = 0.1) +     geom_vline(xintercept = 7, colour='darkblue') + # rank of interest     theme_bw() +     labs(y=\"Error\", x=\"Rank\")"},{"path":"/articles/liana_cc2tensor.html","id":"results-overview","dir":"Articles","previous_headings":"Cell-cell Communication Tensor Decomposition","what":"Results Overview","title":"Context Factorisation with tensor-cell2cell","text":"Upon seccusseful run cell2cell_tensor decompose tensor set factors, four vectors corresponding initial dimensions tensor. contexts - factor scores assigned sample/context interactions - interaction loadings per factor senders - loadings sender/source cell identities receivers - loadings receivers/target cell identities , examine behavior different dimensions across factors. look contexts (samples) loadings Factor.4 seems notably different groups. also see loadings “Sender” “Receiver” cells relatively uniform distribution, suggesting cell types involved CCC events distinguish conditions.","code":"# get the factors factors <- get_c2c_factors(sce, group_col = \"stim\", sample_col = \"context\")  # show them glimpse(factors) ## List of 5 ##  $ contexts        : tibble [16 × 9] (S3: tbl_df/tbl/data.frame) ##   ..$ context : Factor w/ 16 levels \"ctrl|101\",\"ctrl|1015\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ Factor.1: num [1:16] 0.246 0.281 0.237 0.221 0.232 ... ##   ..$ Factor.2: num [1:16] 0.232 0.241 0.236 0.26 0.245 ... ##   ..$ Factor.3: num [1:16] 0.255 0.294 0.29 0.178 0.202 ... ##   ..$ Factor.4: num [1:16] 0.01122 0.03064 0.06389 0.00963 0.0202 ... ##   ..$ Factor.5: num [1:16] 0.29 0.383 0.325 0.255 0.255 ... ##   ..$ Factor.6: num [1:16] 0.28 0.329 0.289 0.238 0.251 ... ##   ..$ Factor.7: num [1:16] 0.246 0.336 0.288 0.197 0.171 ... ##   ..$ stim    : Factor w/ 2 levels \"ctrl\",\"stim\": 1 1 1 1 1 1 1 1 2 2 ... ##   ..- attr(*, \"pandas.index\")=Index(['ctrl|101', 'ctrl|1015', 'ctrl|1016', 'ctrl|1039', 'ctrl|107', ##        'ctrl|1244', 'ctrl|1256', 'ctrl|1488', 'stim|101', 'stim|1015', ##        'stim|1016', 'stim|1039', 'stim|107', 'stim|1244', 'stim|1256', ##        'stim|1488'], ##       dtype='object') ##  $ interactions    : tibble [1,599 × 8] (S3: tbl_df/tbl/data.frame) ##   ..$ lr      : Factor w/ 1599 levels \"A2M^LRP1\",\"ACTR2^ADRB2\",..: 1 2 3 4 5 6 7 8 9 10 ... ##   ..$ Factor.1: num [1:1599] 5.68e-03 9.65e-03 2.61e-02 8.13e-31 3.19e-02 ... ##   ..$ Factor.2: num [1:1599] 1.66e-08 8.15e-03 2.86e-02 9.22e-02 3.69e-20 ... ##   ..$ Factor.3: num [1:1599] 7.80e-05 5.51e-02 7.81e-16 1.41e-02 1.11e-39 ... ##   ..$ Factor.4: num [1:1599] 3.39e-09 5.40e-02 2.34e-02 1.31e-03 2.14e-02 ... ##   ..$ Factor.5: num [1:1599] 1.87e-03 2.69e-02 1.38e-06 5.99e-13 1.98e-06 ... ##   ..$ Factor.6: num [1:1599] 1.34e-09 3.12e-02 2.82e-03 1.24e-02 6.31e-08 ... ##   ..$ Factor.7: num [1:1599] 1.98e-11 4.17e-02 5.93e-03 3.53e-03 4.57e-03 ... ##   ..- attr(*, \"pandas.index\")=Index(['A2M^LRP1', 'ACTR2^ADRB2', 'ACTR2^LDLR', 'ADAM10^AXL', 'ADAM10^CADM1', ##        'ADAM10^CD44', 'ADAM10^GPNMB', 'ADAM10^IL6R', 'ADAM10^MET', ##        'ADAM10^NOTCH1', ##        ... ##        'WNT7A^FZD9_LRP6', 'WNT7A^LDLR', 'WNT7A^RECK', 'YBX1^NOTCH1', ##        'ZG16B^CXCR4', 'ZG16B^TLR2', 'ZG16B^TLR4', 'ZG16B^TLR5', 'ZG16B^TLR6', ##        'ZP3^MERTK'], ##       dtype='object', length=1599) ##  $ senders         : tibble [8 × 8] (S3: tbl_df/tbl/data.frame) ##   ..$ celltype: Factor w/ 8 levels \"B cells\",\"CD14+ Monocytes\",..: 1 2 3 4 5 6 7 8 ##   ..$ Factor.1: num [1:8] 0.356 0.392 0.333 0.323 0.365 ... ##   ..$ Factor.2: num [1:8] 0.394 0.367 0.325 0.307 0.4 ... ##   ..$ Factor.3: num [1:8] 0.389 0.354 0.358 0.318 0.369 ... ##   ..$ Factor.4: num [1:8] 0.39 0.392 0.316 0.28 0.403 ... ##   ..$ Factor.5: num [1:8] 0.47 0.291 0.399 0.26 0.392 ... ##   ..$ Factor.6: num [1:8] 1.18e-02 7.72e-01 1.21e-02 2.32e-06 1.80e-01 ... ##   ..$ Factor.7: num [1:8] 0.10381 0.02506 0.4003 0.58482 0.00678 ... ##   ..- attr(*, \"pandas.index\")=Index(['B cells', 'CD14+ Monocytes', 'CD4 T cells', 'CD8 T cells', ##        'Dendritic cells', 'FCGR3A+ Monocytes', 'Megakaryocytes', 'NK cells'], ##       dtype='object') ##  $ receivers       : tibble [8 × 8] (S3: tbl_df/tbl/data.frame) ##   ..$ celltype: Factor w/ 8 levels \"B cells\",\"CD14+ Monocytes\",..: 1 2 3 4 5 6 7 8 ##   ..$ Factor.1: num [1:8] 2.22e-06 7.58e-01 7.14e-02 8.84e-05 1.46e-01 ... ##   ..$ Factor.2: num [1:8] 0.00846 0.1065 0.74094 0.49777 0.00018 ... ##   ..$ Factor.3: num [1:8] 0.00863 0.01187 0.01306 0.49121 0.00252 ... ##   ..$ Factor.4: num [1:8] 0.468 0.327 0.277 0.263 0.49 ... ##   ..$ Factor.5: num [1:8] 0.5992 0.3197 0.2067 0.0412 0.4111 ... ##   ..$ Factor.6: num [1:8] 0.339 0.389 0.393 0.351 0.314 ... ##   ..$ Factor.7: num [1:8] 0.363 0.388 0.435 0.364 0.272 ... ##   ..- attr(*, \"pandas.index\")=Index(['B cells', 'CD14+ Monocytes', 'CD4 T cells', 'CD8 T cells', ##        'Dendritic cells', 'FCGR3A+ Monocytes', 'Megakaryocytes', 'NK cells'], ##       dtype='object') ##  $ elbow_metric_raw:'data.frame':    3 obs. of  25 variables: ##   ..$ V1 : num [1:3] 0.649 0.649 0.649 ##   ..$ V2 : num [1:3] 0.591 0.591 0.591 ##   ..$ V3 : num [1:3] 0.575 0.577 0.577 ##   ..$ V4 : num [1:3] 0.554 0.556 0.553 ##   ..$ V5 : num [1:3] 0.538 0.538 0.542 ##   ..$ V6 : num [1:3] 0.523 0.527 0.524 ##   ..$ V7 : num [1:3] 0.515 0.518 0.515 ##   ..$ V8 : num [1:3] 0.511 0.514 0.514 ##   ..$ V9 : num [1:3] 0.515 0.506 0.505 ##   ..$ V10: num [1:3] 0.501 0.502 0.506 ##   ..$ V11: num [1:3] 0.498 0.494 0.496 ##   ..$ V12: num [1:3] 0.499 0.49 0.494 ##   ..$ V13: num [1:3] 0.489 0.488 0.493 ##   ..$ V14: num [1:3] 0.487 0.483 0.485 ##   ..$ V15: num [1:3] 0.483 0.481 0.484 ##   ..$ V16: num [1:3] 0.481 0.481 0.478 ##   ..$ V17: num [1:3] 0.481 0.473 0.473 ##   ..$ V18: num [1:3] 0.474 0.473 0.475 ##   ..$ V19: num [1:3] 0.475 0.471 0.473 ##   ..$ V20: num [1:3] 0.466 0.47 0.468 ##   ..$ V21: num [1:3] 0.465 0.463 0.462 ##   ..$ V22: num [1:3] 0.46 0.463 0.467 ##   ..$ V23: num [1:3] 0.49 0.461 0.459 ##   ..$ V24: num [1:3] 0.454 0.461 0.459 ##   ..$ V25: num [1:3] 0.457 0.46 0.454 # Plot overview plot_c2c_overview(sce, group_col=\"stim\", sample_col=\"context\")"},{"path":"/articles/liana_cc2tensor.html","id":"statistical-comparison-of-communication-patterns","dir":"Articles","previous_headings":"Cell-cell Communication Tensor Decomposition","what":"Statistical comparison of Communication Patterns","title":"Context Factorisation with tensor-cell2cell","text":", see communication patterns (context loadings) identified statistically significant patterns stimulation. factors thus represent differences ligand-receptor interactions well cell types participating cell-cell communication IFN-beta stimulation.","code":"# Get all boxplots all_facts_boxes <- plot_context_boxplot(sce,                                         sample_col = \"context\",                                         group_col = \"stim\",                                         test=\"t.test\", # applicable only to two groups                                         paired=TRUE #! Is this the case for your data?                                         )  # Combine all boxplots require(patchwork) wrap_plots(     all_facts_boxes,     ncol=4) +     plot_layout(guides = \"collect\") & theme(legend.position = 'bottom') +     theme(plot.tag = element_text(face = 'bold', size = 16)           )"},{"path":"/articles/liana_cc2tensor.html","id":"contexts-heatmap","dir":"Articles","previous_headings":"Cell-cell Communication Tensor Decomposition","what":"Contexts Heatmap","title":"Context Factorisation with tensor-cell2cell","text":", see clear seperation STIM CTRL, suggesting relevance changes inferred interactions.","code":"plot_context_heat(sce, group_col = \"stim\", sample_col=\"context\")"},{"path":"/articles/liana_cc2tensor.html","id":"cell-cell-pairs-with-high-potential-of-interaction","dir":"Articles","previous_headings":"","what":"Cell-cell pairs with high potential of interaction","title":"Context Factorisation with tensor-cell2cell","text":"use product source target loadings generate heatmap potential celltype-celltype pair relationships, contribute Factor.4.","code":"plot_c2c_cells(sce,                factor_of_int = \"Factor.4\",                name = \"Loadings \\nProduct\")"},{"path":"/articles/liana_cc2tensor.html","id":"gini-coefficients-of-factor-specific-communicating-sender-and-receiver-cell-types","dir":"Articles","previous_headings":"Cell-cell pairs with high potential of interaction","what":"Gini Coefficients of Factor-specific Communicating Sender and Receiver cell types","title":"Context Factorisation with tensor-cell2cell","text":"Gini coefficients range 0 1, measures dispersion, typically used measure inequality. , Gini coefficient used measure imbalance communication terms cell types. Gini coefficient 1 suggests single cell type contributing communication patterns within factor, value 0 suggest perfect equality cell type. focus Factor.4, see source/sender target/receiver cell types nearly uniform contributions.","code":"# Get loadings for source/sender Cell types calculate_gini(factors$senders) ## # A tibble: 7 × 2 ##   factor     gini ##   <chr>     <dbl> ## 1 Factor.1 0.0446 ## 2 Factor.2 0.0674 ## 3 Factor.3 0.0390 ## 4 Factor.4 0.0790 ## 5 Factor.5 0.145  ## 6 Factor.6 0.765  ## 7 Factor.7 0.625 # Get loadings for target/receiver Cell types calculate_gini(factors$receivers) ## # A tibble: 7 × 2 ##   factor     gini ##   <chr>     <dbl> ## 1 Factor.1 0.793  ## 2 Factor.2 0.699  ## 3 Factor.3 0.869  ## 4 Factor.4 0.164  ## 5 Factor.5 0.350  ## 6 Factor.6 0.0833 ## 7 Factor.7 0.109"},{"path":"/articles/liana_cc2tensor.html","id":"lr-loadings-heatmap","dir":"Articles","previous_headings":"","what":"LR loadings Heatmap","title":"Context Factorisation with tensor-cell2cell","text":"can see LRs involved across contexts. Though, perhaps since case Factors 4 5 associated stimulation, perhaps ’s best focus .","code":"plot_lr_heatmap(sce,  n = 5, cluster_columns=FALSE)"},{"path":[]},{"path":"/articles/liana_cc2tensor.html","id":"footprint-enrichment-analysis","dir":"Articles","previous_headings":"LR loadings Pathway Enrichment","what":"Footprint Enrichment Analysis","title":"Context Factorisation with tensor-cell2cell","text":", use pathways PROGENy, together decoupleR, enrichment analysis LR loadings. PROGENy represent data-driven signatures 14 pathways, decoupleR framework multiple enrichment methods. Since PROGENy originally intended used genes, need reformat match ligand-receptor predictions. Namely, generate_lr_geneset assign LR specific pathway, ligand receptor, well subunits, associated pathway. also case weighted gene sets (like progeny), entities weight sign.","code":"# obtain progeny gene sets progeny <- decoupleR::get_progeny(organism = 'human', top=5000) %>%     select(-p_value)  # convert to LR sets progeny_lr <- generate_lr_geneset(sce,                                   resource = progeny)  progeny_lr ## # A tibble: 941 × 3 ##    lr             set         mor ##    <chr>          <chr>     <dbl> ##  1 ACTR2^LDLR     EGFR      1.13  ##  2 ADAM10^CADM1   MAPK     -1.04  ##  3 ADAM10^GPNMB   EGFR     -1.99  ##  4 ADAM10^GPNMB   MAPK     -2.79  ##  5 ADAM10^NOTCH1  EGFR     -0.925 ##  6 ADAM10^NOTCH1  MAPK     -0.925 ##  7 ADAM10^NOTCH2  TGFb      1.25  ##  8 ADAM10^TSPAN15 MAPK     -0.925 ##  9 ADAM12^ITGB1   Androgen -0.677 ## 10 ADAM12^ITGB1   TGFb      2.15  ## # … with 931 more rows ## # ℹ Use `print(n = ...)` to see more rows"},{"path":"/articles/liana_cc2tensor.html","id":"enrichment-dotplot","dir":"Articles","previous_headings":"LR loadings Pathway Enrichment > Footprint Enrichment Analysis","what":"Enrichment Dotplot","title":"Context Factorisation with tensor-cell2cell","text":", see LRs associated JAK-STAT gene progeny enriched Factor.4.","code":"# interaction loadings to matrix mat <- factors$interactions %>%     column_to_rownames(\"lr\") %>%   as.matrix()  # run enrichment analysis with decoupler # (we fit a univariate linear model for each gene set) # We don't consider genesets with minsize < 10 res <- decoupleR::run_ulm(mat = mat,                           network = progeny_lr,                           .source = \"set\",                           .target = \"lr\",                           minsize=10) %>%   mutate(p_adj = p.adjust(p_value, method = \"fdr\"))  res %>% # sig/isnig flag   mutate(significant = if_else(p_adj <= 0.05, \"signif.\", \"not\")) %>%   ggplot(aes(x=source, y=condition, shape=significant,              colour=score, size=-log10(p_value+1e-36))) +   geom_point() +   scale_colour_gradient2(high = \"red\", low=\"blue\") +   scale_size_continuous(range = c(3, 12)) +   scale_shape_manual(values=c(21, 16)) +   theme_bw(base_size = 15) +   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +   labs(x=\"Pathway\",        y=\"Factor\",        colour=\"Activity\"        )"},{"path":"/articles/liana_cc2tensor.html","id":"lrs-driving-enrichment-of-jak-stat-in-factor-4","dir":"Articles","previous_headings":"LR loadings Pathway Enrichment > Footprint Enrichment Analysis","what":"LRs driving enrichment of JAK-STAT in Factor.4","title":"Context Factorisation with tensor-cell2cell","text":"","code":"# Plot LRs associated with Estrogen lrs <-  factors$interactions %>%   left_join(progeny_lr, by=\"lr\") %>%   filter(set==\"JAK-STAT\") %>%   select(lr, set, mor, loading = Factor.4) %>%   mutate(lr = gsub(as.character(str_glue(\"\\\\^\")), \" -> \", lr)) %>%   mutate(weight = if_else(mor >= 0, \"positive\", \"negative\")) lrs %>%   # only label those that are > x   mutate(lr = if_else(loading>=0.001 & abs(mor) > 2, lr, \"\")) %>%   ggplot(aes(x=mor, y=loading, colour=weight)) +   # label only top 20   stat_smooth(method = \"lm\", col = \"red\") +   geom_point(alpha = 0.5) +    ggrepel::geom_label_repel(aes(label = lr)) +   theme_bw(base_size = 15) +   scale_colour_manual(values = c(\"royalblue3\", \"red\")) +   labs(x=\"Pathway Weight\", y=\"LR Loading\")"},{"path":"/articles/liana_cc2tensor.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Context Factorisation with tensor-cell2cell","text":"Cite tensor_cell2cell: Armingol, E., Baghdassarian, H.M., Martino, C., Perez-Lopez, ., Aamodt, C., Knight, R. Lewis, N.E., 2022. Context-aware deconvolution cell–cell communication Tensor-cell2cell. Nature Communications, 13(1), pp.1-15. Cite LIANA:","code":"##  ## To cite liana in publications use: ##  ##   Dimitrov, D., Türei, D., Garrido-Rodriguez M., Burmedi P.L., Nagai, ##   J.S., Boys, C., Flores, R.O.R., Kim, H., Szalai, B., Costa, I.G., ##   Valdeolivas, A., Dugourd, A. and Saez-Rodriguez, J. Comparison of ##   methods and resources for cell-cell communication inference from ##   single-cell RNA-Seq data. Nat Commun 13, 3224 (2022). ##  ## A BibTeX entry for LaTeX users is ##  ##   @Article{, ##     author = {Daniel Dimitrov and Denes Turei and Martin Garrido-Rodriguez and Paul Burmedi L. and James Nagai S. and Charlotte Boys and Ricardo Ramirez Flores O. and Hyojin Kim and Bence Szalai and Ivan Costa G. and Alberto Valdeolivas and Aurélien Dugourd and Julio Saez-Rodriguez}, ##     title = {Comparison of methods and resources for cell-cell communication inference from single-cell RNA-Seq data}, ##     journal = {Nature Communications}, ##     year = {2022}, ##     doi = {10.1038/s41467-022-30755-0}, ##     encoding = {UTF-8}, ##   }"},{"path":"/articles/liana_cc2tensor.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Context Factorisation with tensor-cell2cell","text":"","code":"## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── ##  setting  value ##  version  R version 4.1.2 (2021-11-01) ##  os       Ubuntu 20.04.5 LTS ##  system   x86_64, linux-gnu ##  ui       X11 ##  language en ##  collate  en_US.UTF-8 ##  ctype    en_US.UTF-8 ##  tz       Europe/Berlin ##  date     2023-02-23 ##  pandoc   2.18 @ /home/dbdimitrov/anaconda3/envs/liana4.1/bin/ (via rmarkdown) ##  ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── ##  package                * version  date (UTC) lib source ##  AnnotationDbi            1.56.2   2021-11-09 [2] Bioconductor ##  AnnotationHub          * 3.2.2    2022-03-01 [2] Bioconductor ##  assertthat               0.2.1    2019-03-21 [2] CRAN (R 4.1.2) ##  backports                1.4.1    2021-12-13 [2] CRAN (R 4.1.2) ##  basilisk                 1.9.12   2022-10-31 [2] Github (LTLA/basilisk@e185224) ##  basilisk.utils           1.9.4    2022-10-31 [2] Github (LTLA/basilisk.utils@b3ab58d) ##  beachmat                 2.10.0   2021-10-26 [2] Bioconductor ##  beeswarm                 0.4.0    2021-06-01 [2] CRAN (R 4.1.2) ##  Biobase                * 2.54.0   2021-10-26 [2] Bioconductor ##  BiocFileCache          * 2.2.1    2022-01-23 [2] Bioconductor ##  BiocGenerics           * 0.40.0   2021-10-26 [2] Bioconductor ##  BiocManager              1.30.18  2022-05-18 [2] CRAN (R 4.1.2) ##  BiocNeighbors            1.12.0   2021-10-26 [2] Bioconductor ##  BiocParallel             1.28.3   2021-12-09 [2] Bioconductor ##  BiocSingular             1.10.0   2021-10-26 [2] Bioconductor ##  BiocStyle              * 2.22.0   2021-10-26 [2] Bioconductor ##  BiocVersion              3.14.0   2021-05-19 [2] Bioconductor ##  Biostrings               2.62.0   2021-10-26 [2] Bioconductor ##  bit                      4.0.4    2020-08-04 [2] CRAN (R 4.1.0) ##  bit64                    4.0.5    2020-08-30 [2] CRAN (R 4.1.0) ##  bitops                   1.0-7    2021-04-24 [2] CRAN (R 4.1.2) ##  blob                     1.2.3    2022-04-10 [2] CRAN (R 4.1.2) ##  bluster                  1.4.0    2021-10-26 [2] Bioconductor ##  bookdown                 0.27     2022-06-14 [2] CRAN (R 4.1.2) ##  broom                    1.0.0    2022-07-01 [2] CRAN (R 4.1.2) ##  bslib                    0.4.0    2022-07-16 [2] CRAN (R 4.1.2) ##  cachem                   1.0.6    2021-08-19 [2] CRAN (R 4.1.2) ##  cellranger               1.1.0    2016-07-27 [2] CRAN (R 4.1.2) ##  checkmate                2.1.0    2022-04-21 [2] CRAN (R 4.1.2) ##  circlize                 0.4.15   2022-05-10 [2] CRAN (R 4.1.2) ##  cli                      3.6.0    2023-01-09 [2] CRAN (R 4.1.2) ##  clue                     0.3-61   2022-05-30 [2] CRAN (R 4.1.2) ##  cluster                  2.1.3    2022-03-28 [2] CRAN (R 4.1.2) ##  codetools                0.2-18   2020-11-04 [2] CRAN (R 4.1.2) ##  colorspace               2.0-3    2022-02-21 [2] CRAN (R 4.1.2) ##  ComplexHeatmap           2.10.0   2021-10-26 [2] Bioconductor ##  crayon                   1.5.1    2022-03-26 [2] CRAN (R 4.1.2) ##  curl                     4.3.2    2021-06-23 [2] CRAN (R 4.1.0) ##  DBI                      1.1.3    2022-06-18 [2] CRAN (R 4.1.2) ##  dbplyr                 * 2.2.1    2022-06-27 [2] CRAN (R 4.1.2) ##  decoupleR                2.3.2    2022-08-15 [2] Github (saezlab/decoupleR@56dc1a3) ##  DelayedArray             0.20.0   2021-10-26 [2] Bioconductor ##  DelayedMatrixStats       1.16.0   2021-10-26 [2] Bioconductor ##  desc                     1.4.1    2022-03-06 [2] CRAN (R 4.1.2) ##  digest                   0.6.29   2021-12-01 [2] CRAN (R 4.1.1) ##  dir.expiry               1.2.0    2021-10-26 [2] Bioconductor ##  doParallel               1.0.17   2022-02-07 [2] CRAN (R 4.1.2) ##  dplyr                  * 1.0.9    2022-04-28 [2] CRAN (R 4.1.2) ##  dqrng                    0.3.0    2021-05-01 [2] CRAN (R 4.1.2) ##  edgeR                    3.36.0   2021-10-26 [2] Bioconductor ##  ellipsis                 0.3.2    2021-04-29 [2] CRAN (R 4.1.2) ##  evaluate                 0.15     2022-02-18 [2] CRAN (R 4.1.2) ##  ExperimentHub          * 2.2.1    2022-01-23 [2] Bioconductor ##  fansi                    1.0.3    2022-03-24 [2] CRAN (R 4.1.2) ##  farver                   2.1.1    2022-07-06 [2] CRAN (R 4.1.2) ##  fastmap                  1.1.0    2021-01-25 [2] CRAN (R 4.1.2) ##  filelock                 1.0.2    2018-10-05 [2] CRAN (R 4.1.2) ##  forcats                * 0.5.1    2021-01-27 [2] CRAN (R 4.1.2) ##  foreach                  1.5.2    2022-02-02 [2] CRAN (R 4.1.2) ##  fs                       1.5.2    2021-12-08 [2] CRAN (R 4.1.2) ##  future                   1.27.0   2022-07-22 [2] CRAN (R 4.1.2) ##  future.apply             1.9.0    2022-04-25 [2] CRAN (R 4.1.2) ##  gargle                   1.2.0    2021-07-02 [2] CRAN (R 4.1.2) ##  generics                 0.1.3    2022-07-05 [2] CRAN (R 4.1.2) ##  GenomeInfoDb           * 1.30.1   2022-01-30 [2] Bioconductor ##  GenomeInfoDbData         1.2.7    2022-01-26 [2] Bioconductor ##  GenomicRanges          * 1.46.1   2021-11-18 [2] Bioconductor ##  GetoptLong               1.0.5    2020-12-15 [2] CRAN (R 4.1.2) ##  ggbeeswarm               0.6.0    2017-08-07 [2] CRAN (R 4.1.2) ##  ggplot2                * 3.3.6    2022-05-03 [2] CRAN (R 4.1.2) ##  ggrepel                  0.9.1    2021-01-15 [2] CRAN (R 4.1.2) ##  GlobalOptions            0.1.2    2020-06-10 [2] CRAN (R 4.1.2) ##  globals                  0.15.1   2022-06-24 [2] CRAN (R 4.1.2) ##  glue                     1.6.2    2022-02-24 [2] CRAN (R 4.1.2) ##  googledrive              2.0.0    2021-07-08 [2] CRAN (R 4.1.2) ##  googlesheets4            1.0.0    2021-07-21 [2] CRAN (R 4.1.2) ##  gridExtra                2.3      2017-09-09 [2] CRAN (R 4.1.2) ##  gtable                   0.3.0    2019-03-25 [2] CRAN (R 4.1.2) ##  haven                    2.5.0    2022-04-15 [2] CRAN (R 4.1.2) ##  here                     1.0.1    2020-12-13 [2] CRAN (R 4.1.2) ##  highr                    0.9      2021-04-16 [2] CRAN (R 4.1.2) ##  hms                      1.1.1    2021-09-26 [2] CRAN (R 4.1.2) ##  htmltools                0.5.3    2022-07-18 [2] CRAN (R 4.1.2) ##  httpuv                   1.6.5    2022-01-05 [2] CRAN (R 4.1.2) ##  httr                     1.4.3    2022-05-04 [2] CRAN (R 4.1.2) ##  igraph                   1.3.0    2022-04-01 [2] CRAN (R 4.1.3) ##  interactiveDisplayBase   1.32.0   2021-10-26 [2] Bioconductor ##  IRanges                * 2.28.0   2021-10-26 [2] Bioconductor ##  irlba                    2.3.5    2021-12-06 [2] CRAN (R 4.1.2) ##  iterators                1.0.14   2022-02-05 [2] CRAN (R 4.1.2) ##  jquerylib                0.1.4    2021-04-26 [2] CRAN (R 4.1.2) ##  jsonlite                 1.8.0    2022-02-22 [2] CRAN (R 4.1.2) ##  KEGGREST                 1.34.0   2021-10-26 [2] Bioconductor ##  knitr                    1.39     2022-04-26 [2] CRAN (R 4.1.2) ##  labeling                 0.4.2    2020-10-20 [2] CRAN (R 4.1.2) ##  later                    1.3.0    2021-08-18 [2] CRAN (R 4.1.2) ##  lattice                  0.20-45  2021-09-22 [2] CRAN (R 4.1.1) ##  liana                  * 0.1.12   2023-02-23 [1] Bioconductor ##  lifecycle                1.0.3    2022-10-07 [2] CRAN (R 4.1.2) ##  limma                    3.50.3   2022-04-07 [2] Bioconductor ##  listenv                  0.8.0    2019-12-05 [2] CRAN (R 4.1.2) ##  locfit                   1.5-9.6  2022-07-11 [2] CRAN (R 4.1.2) ##  logger                   0.2.2    2021-10-19 [2] CRAN (R 4.1.2) ##  lubridate                1.8.0    2021-10-07 [2] CRAN (R 4.1.2) ##  magick                   2.7.3    2021-08-18 [2] CRAN (R 4.1.1) ##  magrittr               * 2.0.3    2022-03-30 [2] CRAN (R 4.1.3) ##  Matrix                   1.4-1    2022-03-23 [2] CRAN (R 4.1.2) ##  MatrixGenerics         * 1.6.0    2021-10-26 [2] Bioconductor ##  matrixStats            * 0.62.0   2022-04-19 [2] CRAN (R 4.1.2) ##  memoise                  2.0.1    2021-11-26 [2] CRAN (R 4.1.2) ##  metapod                  1.2.0    2021-10-26 [2] Bioconductor ##  mgcv                     1.8-40   2022-03-29 [2] CRAN (R 4.1.2) ##  mime                     0.12     2021-09-28 [2] CRAN (R 4.1.2) ##  modelr                   0.1.8    2020-05-19 [2] CRAN (R 4.1.2) ##  munsell                  0.5.0    2018-06-12 [2] CRAN (R 4.1.2) ##  muscData               * 1.8.0    2021-10-30 [2] Bioconductor ##  nlme                     3.1-158  2022-06-15 [2] CRAN (R 4.1.2) ##  OmnipathR                3.7.2    2023-02-19 [2] Github (saezlab/OmnipathR@c5f63b4) ##  parallelly               1.32.1   2022-07-21 [2] CRAN (R 4.1.2) ##  patchwork              * 1.1.1    2020-12-17 [2] CRAN (R 4.1.2) ##  pillar                   1.8.0    2022-07-18 [2] CRAN (R 4.1.2) ##  pkgconfig                2.0.3    2019-09-22 [2] CRAN (R 4.1.0) ##  pkgdown                  2.0.6    2022-07-16 [2] CRAN (R 4.1.2) ##  png                      0.1-7    2013-12-03 [2] CRAN (R 4.1.0) ##  prettyunits              1.1.1    2020-01-24 [2] CRAN (R 4.1.2) ##  progress                 1.2.2    2019-05-16 [2] CRAN (R 4.1.2) ##  progressr                0.10.1   2022-06-03 [2] CRAN (R 4.1.2) ##  promises                 1.2.0.1  2021-02-11 [2] CRAN (R 4.1.2) ##  purrr                  * 0.3.4    2020-04-17 [2] CRAN (R 4.1.0) ##  R6                       2.5.1    2021-08-19 [2] CRAN (R 4.1.2) ##  ragg                     1.2.2    2022-02-21 [2] CRAN (R 4.1.2) ##  rappdirs                 0.3.3    2021-01-31 [2] CRAN (R 4.1.2) ##  RColorBrewer             1.1-3    2022-04-03 [2] CRAN (R 4.1.2) ##  Rcpp                     1.0.8.3  2022-03-17 [2] CRAN (R 4.1.2) ##  RCurl                    1.98-1.7 2022-06-09 [2] CRAN (R 4.1.2) ##  readr                  * 2.1.2    2022-01-30 [2] CRAN (R 4.1.2) ##  readxl                   1.4.0    2022-03-28 [2] CRAN (R 4.1.2) ##  reprex                   2.0.1    2021-08-05 [2] CRAN (R 4.1.2) ##  reticulate             * 1.25     2022-05-11 [2] CRAN (R 4.1.2) ##  rgeos                    0.5-9    2021-12-15 [2] CRAN (R 4.1.2) ##  rjson                    0.2.21   2022-01-09 [2] CRAN (R 4.1.2) ##  rlang                    1.0.6    2022-09-24 [2] CRAN (R 4.1.2) ##  rmarkdown                2.14     2022-04-25 [2] CRAN (R 4.1.2) ##  rprojroot                2.0.3    2022-04-02 [2] CRAN (R 4.1.2) ##  RSQLite                  2.2.15   2022-07-17 [2] CRAN (R 4.1.2) ##  rstudioapi               0.13     2020-11-12 [2] CRAN (R 4.1.2) ##  rsvd                     1.0.5    2021-04-16 [2] CRAN (R 4.1.2) ##  rvest                    1.0.2    2021-10-16 [2] CRAN (R 4.1.2) ##  S4Vectors              * 0.32.4   2022-03-24 [2] Bioconductor ##  sass                     0.4.2    2022-07-16 [2] CRAN (R 4.1.2) ##  ScaledMatrix             1.2.0    2021-10-26 [2] Bioconductor ##  scales                   1.2.0    2022-04-13 [2] CRAN (R 4.1.2) ##  scater                   1.22.0   2021-10-26 [2] Bioconductor ##  scran                    1.22.1   2021-11-14 [2] Bioconductor ##  scuttle                  1.4.0    2021-10-26 [2] Bioconductor ##  sessioninfo              1.2.2    2021-12-06 [2] CRAN (R 4.1.2) ##  SeuratObject             4.1.0    2022-05-01 [2] CRAN (R 4.1.2) ##  shape                    1.4.6    2021-05-19 [2] CRAN (R 4.1.2) ##  shiny                    1.7.2    2022-07-19 [2] CRAN (R 4.1.2) ##  SingleCellExperiment   * 1.16.0   2021-10-26 [2] Bioconductor ##  sp                       1.5-0    2022-06-05 [2] CRAN (R 4.1.3) ##  sparseMatrixStats        1.6.0    2021-10-26 [2] Bioconductor ##  statmod                  1.4.36   2021-05-10 [2] CRAN (R 4.1.2) ##  stringi                  1.7.6    2021-11-29 [2] CRAN (R 4.1.1) ##  stringr                * 1.4.0    2019-02-10 [2] CRAN (R 4.1.0) ##  SummarizedExperiment   * 1.24.0   2021-10-26 [2] Bioconductor ##  systemfonts              1.0.4    2022-02-11 [2] CRAN (R 4.1.2) ##  textshaping              0.3.6    2021-10-13 [2] CRAN (R 4.1.2) ##  tibble                 * 3.1.8    2022-07-22 [2] CRAN (R 4.1.2) ##  tidyr                  * 1.2.0    2022-02-01 [2] CRAN (R 4.1.2) ##  tidyselect               1.2.0    2022-10-10 [2] CRAN (R 4.1.2) ##  tidyverse              * 1.3.2    2022-07-18 [2] CRAN (R 4.1.2) ##  tzdb                     0.3.0    2022-03-28 [2] CRAN (R 4.1.2) ##  utf8                     1.2.2    2021-07-24 [2] CRAN (R 4.1.2) ##  vctrs                    0.4.1    2022-04-13 [2] CRAN (R 4.1.2) ##  vipor                    0.4.5    2017-03-22 [2] CRAN (R 4.1.2) ##  viridis                  0.6.2    2021-10-13 [2] CRAN (R 4.1.2) ##  viridisLite              0.4.0    2021-04-13 [2] CRAN (R 4.1.2) ##  vroom                    1.5.7    2021-11-30 [2] CRAN (R 4.1.2) ##  withr                    2.5.0    2022-03-03 [2] CRAN (R 4.1.2) ##  xfun                     0.31     2022-05-10 [2] CRAN (R 4.1.2) ##  xml2                     1.3.3    2021-11-30 [2] CRAN (R 4.1.2) ##  xtable                   1.8-4    2019-04-21 [2] CRAN (R 4.1.2) ##  XVector                  0.34.0   2021-10-26 [2] Bioconductor ##  yaml                     2.3.5    2022-02-21 [2] CRAN (R 4.1.2) ##  zlibbioc                 1.40.0   2021-10-26 [2] Bioconductor ##  ##  [1] /tmp/RtmpoegRC1/temp_libpath6147141f79468 ##  [2] /home/dbdimitrov/anaconda3/envs/liana4.1/lib/R/library ##  ## ─ Python configuration ─────────────────────────────────────────────────────────────────────────────────────────────── ##  python:         /home/dbdimitrov/.cache/R/basilisk/1.9.12/liana/0.1.12/liana_cell2cell/bin/python ##  libpython:      /home/dbdimitrov/.cache/R/basilisk/1.9.12/liana/0.1.12/liana_cell2cell/lib/libpython3.8.so ##  pythonhome:     /home/dbdimitrov/.cache/R/basilisk/1.9.12/liana/0.1.12/liana_cell2cell:/home/dbdimitrov/.cache/R/basilisk/1.9.12/liana/0.1.12/liana_cell2cell ##  version:        3.8.8 | packaged by conda-forge | (default, Feb 20 2021, 16:22:27)  [GCC 9.3.0] ##  numpy:          /home/dbdimitrov/.cache/R/basilisk/1.9.12/liana/0.1.12/liana_cell2cell/lib/python3.8/site-packages/numpy ##  numpy_version:  1.23.5 ##   ##  NOTE: Python version was forced by use_python function ##  ## ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/liana_custom_op.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"LIANA Custom literature and database knowledge from OmniPath","text":"ligand-receptor interaction prediction methods LIANA require resource literature database knowledge intercellular signaling. LIANA, together OmniPath web service, provide number functionalities obtain prior knowledge. show customize quality filter prior knowledge OmniPath, use LIANA custom database resource.","code":""},{"path":"/articles/liana_custom_op.html","id":"intercellular-communication-data-in-omnipath","dir":"Articles","previous_headings":"Introduction","what":"Intercellular communication data in OmniPath","title":"LIANA Custom literature and database knowledge from OmniPath","text":"OmniPath combines data 20 resources depict roles proteins intercellular communication, uses around 50 network resources connect proteins signaling interactions. intercellular communication annotation (intercell) database, OmniPath aims cover broadest range information, contains numerous false positive records. Hence, using prediction methods, LIANA, quality filtering OmniPath highly recommended. quality filtering based 1) amount evidences (number resources references), 2) consensus resources annotation record, 3) localization proteins (e.g. secreted, plasma membrane). design OmniPath database described Turei et al. Mol Syst Biol (2021)17:e9923, can read quality filtering options , . provide list curated interactions, define come manually-curated resources context CCC, come corresponding Pubmed ID, available via OmnipathR::curated_ligand_receptor_interactions.","code":""},{"path":"/articles/liana_custom_op.html","id":"complexes","dir":"Articles","previous_headings":"Introduction > Intercellular communication data in OmniPath","what":"Complexes","title":"LIANA Custom literature and database knowledge from OmniPath","text":"resources OmniPath, CellChatDB, CellPhoneDB ICELLNET, provide information protein complexes intercellular communication. Besides , protein complex annotations OmniPath silico inferred, based members complex. Network interactions protein complexes sparse, resources provide kind data.","code":""},{"path":"/articles/liana_custom_op.html","id":"connecting-liana-and-omnipath","dir":"Articles","previous_headings":"Introduction > Intercellular communication data in OmniPath","what":"Connecting LIANA and OmniPath","title":"LIANA Custom literature and database knowledge from OmniPath","text":"OmniPath data distributed web service OmniPath web service, OmnipathR R/Bioconductor package offer direct access R. OmnipathR, import_intercell_network filter_intercell_network functions represent interface intercellular communication network. liana, generate_omni function wraps Omnipath functions ensures output suitable downstream methods LIANA. get_curated_omni function used generate curated consensus (default) resource LIANA uses. suggest using latest OmnipathR version resource-generation purposes.","code":"remotes::install_github('saezlab/OmnipathR')"},{"path":"/articles/liana_custom_op.html","id":"loading-prerequisites","dir":"Articles","previous_headings":"Introduction","what":"Loading prerequisites","title":"LIANA Custom literature and database knowledge from OmniPath","text":"","code":"library(tidyverse) library(OmnipathR) library(liana) library(purrr) library(magrittr)  liana_path <- system.file(package = \"liana\") testdata <-     readRDS(file.path(liana_path , \"testdata\", \"input\", \"testdata.rds\"))"},{"path":"/articles/liana_custom_op.html","id":"curated-omnipath-consensus","dir":"Articles","previous_headings":"Introduction","what":"Curated OmniPath Consensus","title":"LIANA Custom literature and database knowledge from OmniPath","text":"default, LIANA uses Consensus resource, composed solely consensus interactions set coming manually-curated (context CCC) “CellPhoneDB”, “CellChatDB”, “ICELLNET”, “connectomeDB2020”, “CellTalkDB” resources. interactions also filtered localisation curation. information generate resource please refer get_curated_omni function. One also obtain list manually-curated interactions corresponding PubMed IDs context CCC OmnipathR. use list double-check curation effort Consensus resource. see Consensus resource highly (>90%) curated. , nevertheless, worth keeping mind check obtains information resources, please consider percentages grain salt :). Yet approach provides us reasonable quality reference, applicable custom-made resource. Note plan continuously update resource, welcome feedback .","code":"consensus_omni <- select_resource(\"Consensus\")[[1]] %>%   glimpse ## Rows: 4,701 ## Columns: 10 ## $ source                    <chr> \"O00182\", \"O00182\", \"O00182\", \"O00182\", \"O00… ## $ target                    <chr> \"P08575\", \"P08581\", \"P16070\", \"Q07954\", \"Q08… ## $ source_genesymbol         <chr> \"LGALS9\", \"LGALS9\", \"LGALS9\", \"LGALS9\", \"LGA… ## $ target_genesymbol         <chr> \"PTPRC\", \"MET\", \"CD44\", \"LRP1\", \"CD47\", \"PTP… ## $ category_intercell_source <chr> \"cell_surface_ligand\", \"cell_surface_ligand\"… ## $ database_intercell_source <chr> \"CellPhoneDB\", \"CellPhoneDB\", \"CellPhoneDB\",… ## $ category_intercell_target <chr> \"receptor\", \"receptor\", \"receptor\", \"recepto… ## $ database_intercell_target <chr> \"connectomeDB2020;CellChatDB;CellTalkDB\", \"c… ## $ sources                   <chr> \"CellChatDB;Cellinker\", \"CellPhoneDB;InnateD… ## $ references                <chr> \"CellChatDB:30120235;Cellinker:30120235\", \"\"… # Obtain purely curated resources curated <- OmnipathR::curated_ligand_receptor_interactions(   cellphonedb = TRUE,   cellinker = TRUE,   talklr = TRUE,   signalink = TRUE) %>%   liana:::decomplexify() %>%   select(source_genesymbol, target_genesymbol) %>%   distinct() %>%   mutate(curated_flag = 1)  consensus_omni %>%   liana:::decomplexify() %>% # dissociates complexes   select(source_genesymbol, target_genesymbol) %>%   distinct() %>%   left_join(curated, by = c(\"source_genesymbol\", \"target_genesymbol\")) %>%   distinct() %>%   mutate(curated_flag = as.factor(replace_na(curated_flag, 0))) %>%   mutate(total = n()) %>%   group_by(curated_flag) %>%   mutate(num =  n()) %>%   ungroup() %>%   select(curated_flag, total, num) %>%   distinct() %>%   rowwise() %>%   mutate(perc = num/total * 100) ## # A tibble: 2 × 4 ## # Rowwise:  ##   curated_flag total   num  perc ##   <fct>        <int> <int> <dbl> ## 1 1             4825  4390 91.0  ## 2 0             4825   435  9.02"},{"path":"/articles/liana_custom_op.html","id":"surface-or-membrane-bound-interactions-only","dir":"Articles","previous_headings":"Introduction","what":"Surface or Membrane-bound Interactions only","title":"LIANA Custom literature and database knowledge from OmniPath","text":"also restrict query cell-surface (.e. membrane bound) interactions, also alter parameters: set stringent threshold consensus resources localization, include also protein complexes, simplify data frame keep relevant columns.","code":"pm_omni <- generate_omni(     loc_consensus_percentile = 51, # increase localisation consensus threshold     consensus_percentile = NULL,     # include only PM-bound proteins     transmitter_topology = c(         'plasma_membrane_transmembrane',         'plasma_membrane_peripheral'     ),     receiver_topology = c(         'plasma_membrane_transmembrane',         'plasma_membrane_peripheral'     ),     min_curation_effort = 1,     ligrecextra = FALSE,     remove_complexes = FALSE, # keep complexes     simplify = TRUE # do simplify )   # check categories of ligands (category_intercell_source) pm_omni$category_intercell_source %>%   unique() ## [1] \"activating_cofactor\" \"adhesion\"            \"cell_adhesion\"       ## [4] \"cell_surface_enzyme\" \"cell_surface_ligand\" \"ecm\"                 ## [7] \"inhibitory_cofactor\" \"ligand\" # and receptors (category_intercell_target) pm_omni$category_intercell_target %>%   unique() ## [1] \"adhesion\"          \"receptor\"          \"adherens_junction\" ## [4] \"cell_adhesion\"     \"ion_channel\" # remove some categories pm_omni %<>% filter(     !category_intercell_source %in% c(         'activating_cofactor',         'ligand_regulator',         'inhibitory_cofactor'     ) ) # an overview of the resulted data frame: pm_omni %>% glimpse() ## Rows: 2,169 ## Columns: 17 ## $ source                    <chr> \"A6NDA9\", \"A6NI73\", \"A8K4G0\", \"A8K4G0\", \"A8K… ## $ target                    <chr> \"Q96LC7\", \"Q8IYV9\", \"O15389\", \"O43699\", \"O43… ## $ source_genesymbol         <chr> \"LRIT2\", \"LILRA5\", \"CD300LB\", \"CD300LB\", \"CD… ## $ target_genesymbol         <chr> \"SIGLEC10\", \"IZUMO1\", \"SIGLEC5\", \"SIGLEC6\", … ## $ is_directed               <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ is_stimulation            <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,… ## $ is_inhibition             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ consensus_direction       <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ consensus_stimulation     <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ consensus_inhibition      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ sources                   <chr> \"Cellinker;Wojtowicz2020\", \"Cellinker;Wojtow… ## $ references                <chr> \"Cellinker:32822567\", \"Cellinker:32822567\", … ## $ curation_effort           <dbl> 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2,… ## $ n_references              <dbl> 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2,… ## $ n_resources               <int> 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 4, 3,… ## $ category_intercell_source <chr> \"adhesion\", \"adhesion\", \"adhesion\", \"adhesio… ## $ category_intercell_target <chr> \"adhesion\", \"adhesion\", \"adhesion\", \"adhesio…"},{"path":"/articles/liana_custom_op.html","id":"omnipath-resource-as-it-is-in-the-biorxiv","dir":"Articles","previous_headings":"Introduction","what":"OmniPath resource as it is in the Biorxiv","title":"LIANA Custom literature and database knowledge from OmniPath","text":"first example, filter OmniPath described LIANA biorxiv: * interactions literature curation * Interactions receiver protein plasma membrane transmembrane peripheral, according least 30% localisation annotations * interactions single proteins (interactions complexes included version OmniPath). Note resource subsequently improved manually excluding certain duplicated ambiguous interactions, later finally deprecated together. LIANA currently uses curated resource presented . Also, available via select_resource(\"OmniPath\")","code":"# generate_omni returns a tibble with CCC OmniPath cust_omni <- generate_omni(     loc_consensus_percentile = 30,     consensus_percentile = NULL,     transmitter_topology = c(         'secreted',         'plasma_membrane_transmembrane',         'plasma_membrane_peripheral'     ),     receiver_topology = c(         'plasma_membrane_transmembrane',         'plasma_membrane_peripheral'     ),     min_curation_effort = 1,     ligrecextra = FALSE,     remove_complexes = TRUE,     simplify = FALSE )"},{"path":[]},{"path":"/articles/liana_custom_op.html","id":"run-liana","dir":"Articles","previous_headings":"Introduction > Run LIANA with a custom CCC resource","what":"RUN liana","title":"LIANA Custom literature and database knowledge from OmniPath","text":"","code":"# Run liana with the custom resource # liana Wrap liana_test <-     liana_wrap(         testdata,         resource='custom',         external_resource = pm_omni     ) %>%     liana_aggregate() ## Warning in exec(output, ...): 3465 genes and/or 0 cells were removed as they had ## no counts! ## Warning: `invoke()` is deprecated as of rlang 0.4.0. ## Please use `exec()` or `inject()` instead. ## This warning is displayed once per session. liana_test %>% glimpse ## Rows: 799 ## Columns: 16 ## $ source                 <chr> \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B… ## $ target                 <chr> \"B\", \"NK\", \"B\", \"B\", \"B\", \"B\", \"CD8 T\", \"B\", \"N… ## $ ligand.complex         <chr> \"HLA-DRA\", \"HLA-DRA\", \"MS4A1\", \"HLA-DRB1\", \"HLA… ## $ receptor.complex       <chr> \"CD37\", \"CD63\", \"CD82\", \"CD37\", \"CD74\", \"CD74\",… ## $ aggregate_rank         <dbl> 3.814637e-08, 2.642569e-07, 3.058763e-06, 3.058… ## $ mean_rank              <dbl> 32.0, 27.0, 56.8, 40.0, 33.4, 39.2, 48.6, 54.4,… ## $ natmi.edge_specificity <dbl> 0.3655873, 0.4806804, 0.6939669, 0.3380952, 0.3… ## $ natmi.rank             <dbl> 54.0, 28.0, 11.0, 68.0, 46.0, 47.0, 4.0, 17.0, … ## $ connectome.weight_sc   <dbl> 0.9928272, 1.0496186, 0.9125238, 0.9158637, 1.0… ## $ connectome.rank        <dbl> 5.0, 1.0, 13.0, 11.0, 2.0, 7.0, 4.0, 18.0, 27.0… ## $ logfc.logfc_comb       <dbl> 2.753216, 2.996651, 2.219261, 2.166812, 2.40654… ## $ logfc.rank             <dbl> 3.0, 1.0, 13.0, 15.0, 6.0, 14.0, 4.0, 7.0, 23.0… ## $ sca.LRscore            <dbl> 0.9442782, 0.9348366, 0.8616937, 0.9344024, 0.9… ## $ sca.rank               <dbl> 1.0, 8.0, 150.0, 9.0, 16.0, 31.0, 134.0, 133.0,… ## $ cellphonedb.pvalue     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ cellphonedb.rank       <dbl> 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,…"},{"path":"/articles/liana_custom_op.html","id":"under-the-hood","dir":"Articles","previous_headings":"Introduction","what":"Under the hood","title":"LIANA Custom literature and database knowledge from OmniPath","text":"reality, generate_omni just wrapper function calls appropriate OmnipathR functions, provide convenient interface ensures liana-appropriate format. give insight process.","code":"# reproduce cust_op as from above with OmniPathR alone  # import the OmniPathR intercell network component ligrec <- OmnipathR::import_intercell_network()  # filter out the complexes ligrec %<>% filter(     entity_type_intercell_source != 'complex' &     entity_type_intercell_target != 'complex' )   # apply filtering according to curation and localisation ligrec %<>%     OmnipathR::filter_intercell_network(         loc_consensus_percentile = 30,         consensus_percentile = NULL,         transmitter_topology = c(             'secreted',             'plasma_membrane_transmembrane',             'plasma_membrane_peripheral'         ),         receiver_topology = c(             'plasma_membrane_transmembrane',             'plasma_membrane_peripheral'         ),         min_curation_effort = 1,         ligrecextra = FALSE     )  # remove duplicate LRs ligrec %<>%     distinct_at(         .vars = c(             'source_genesymbol',             'target_genesymbol'         ),         .keep_all = TRUE     )  all_equal(ligrec, cust_omni) ## [1] TRUE"},{"path":"/articles/liana_custom_op.html","id":"further-info","dir":"Articles","previous_headings":"Introduction","what":"Further Info","title":"LIANA Custom literature and database knowledge from OmniPath","text":"make use full potential OmnipathR kindly refer user documentation. tutorial presents intercellular component OmniPath, future add details intracellular signaling gene regulation.","code":""},{"path":"/articles/liana_custom_op.html","id":"session-information","dir":"Articles","previous_headings":"Introduction","what":"Session information","title":"LIANA Custom literature and database knowledge from OmniPath","text":"","code":"options(width = 120) sessioninfo::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── ##  setting  value ##  version  R version 4.1.2 (2021-11-01) ##  os       Ubuntu 20.04.5 LTS ##  system   x86_64, linux-gnu ##  ui       X11 ##  language en ##  collate  en_US.UTF-8 ##  ctype    en_US.UTF-8 ##  tz       Europe/Berlin ##  date     2023-02-23 ##  pandoc   2.18 @ /home/dbdimitrov/anaconda3/envs/liana4.1/bin/ (via rmarkdown) ##  ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── ##  package              * version  date (UTC) lib source ##  abind                  1.4-5    2016-07-21 [2] CRAN (R 4.1.2) ##  assertthat             0.2.1    2019-03-21 [2] CRAN (R 4.1.2) ##  backports              1.4.1    2021-12-13 [2] CRAN (R 4.1.2) ##  basilisk               1.9.12   2022-10-31 [2] Github (LTLA/basilisk@e185224) ##  basilisk.utils         1.9.4    2022-10-31 [2] Github (LTLA/basilisk.utils@b3ab58d) ##  beachmat               2.10.0   2021-10-26 [2] Bioconductor ##  beeswarm               0.4.0    2021-06-01 [2] CRAN (R 4.1.2) ##  Biobase                2.54.0   2021-10-26 [2] Bioconductor ##  BiocGenerics           0.40.0   2021-10-26 [2] Bioconductor ##  BiocManager            1.30.18  2022-05-18 [2] CRAN (R 4.1.2) ##  BiocNeighbors          1.12.0   2021-10-26 [2] Bioconductor ##  BiocParallel           1.28.3   2021-12-09 [2] Bioconductor ##  BiocSingular           1.10.0   2021-10-26 [2] Bioconductor ##  BiocStyle            * 2.22.0   2021-10-26 [2] Bioconductor ##  bit                    4.0.4    2020-08-04 [2] CRAN (R 4.1.0) ##  bit64                  4.0.5    2020-08-30 [2] CRAN (R 4.1.0) ##  bitops                 1.0-7    2021-04-24 [2] CRAN (R 4.1.2) ##  bluster                1.4.0    2021-10-26 [2] Bioconductor ##  bookdown               0.27     2022-06-14 [2] CRAN (R 4.1.2) ##  broom                  1.0.0    2022-07-01 [2] CRAN (R 4.1.2) ##  bslib                  0.4.0    2022-07-16 [2] CRAN (R 4.1.2) ##  cachem                 1.0.6    2021-08-19 [2] CRAN (R 4.1.2) ##  cellranger             1.1.0    2016-07-27 [2] CRAN (R 4.1.2) ##  checkmate              2.1.0    2022-04-21 [2] CRAN (R 4.1.2) ##  circlize               0.4.15   2022-05-10 [2] CRAN (R 4.1.2) ##  cli                    3.6.0    2023-01-09 [2] CRAN (R 4.1.2) ##  clue                   0.3-61   2022-05-30 [2] CRAN (R 4.1.2) ##  cluster                2.1.3    2022-03-28 [2] CRAN (R 4.1.2) ##  codetools              0.2-18   2020-11-04 [2] CRAN (R 4.1.2) ##  colorspace             2.0-3    2022-02-21 [2] CRAN (R 4.1.2) ##  ComplexHeatmap         2.10.0   2021-10-26 [2] Bioconductor ##  cowplot                1.1.1    2020-12-30 [2] CRAN (R 4.1.2) ##  crayon                 1.5.1    2022-03-26 [2] CRAN (R 4.1.2) ##  curl                   4.3.2    2021-06-23 [2] CRAN (R 4.1.0) ##  data.table             1.14.2   2021-09-27 [2] CRAN (R 4.1.2) ##  DBI                    1.1.3    2022-06-18 [2] CRAN (R 4.1.2) ##  dbplyr                 2.2.1    2022-06-27 [2] CRAN (R 4.1.2) ##  DelayedArray           0.20.0   2021-10-26 [2] Bioconductor ##  DelayedMatrixStats     1.16.0   2021-10-26 [2] Bioconductor ##  deldir                 1.0-6    2021-10-23 [2] CRAN (R 4.1.2) ##  desc                   1.4.1    2022-03-06 [2] CRAN (R 4.1.2) ##  digest                 0.6.29   2021-12-01 [2] CRAN (R 4.1.1) ##  dir.expiry             1.2.0    2021-10-26 [2] Bioconductor ##  doParallel             1.0.17   2022-02-07 [2] CRAN (R 4.1.2) ##  dplyr                * 1.0.9    2022-04-28 [2] CRAN (R 4.1.2) ##  dqrng                  0.3.0    2021-05-01 [2] CRAN (R 4.1.2) ##  edgeR                  3.36.0   2021-10-26 [2] Bioconductor ##  ellipsis               0.3.2    2021-04-29 [2] CRAN (R 4.1.2) ##  evaluate               0.15     2022-02-18 [2] CRAN (R 4.1.2) ##  fansi                  1.0.3    2022-03-24 [2] CRAN (R 4.1.2) ##  fastmap                1.1.0    2021-01-25 [2] CRAN (R 4.1.2) ##  filelock               1.0.2    2018-10-05 [2] CRAN (R 4.1.2) ##  fitdistrplus           1.1-8    2022-03-10 [2] CRAN (R 4.1.2) ##  forcats              * 0.5.1    2021-01-27 [2] CRAN (R 4.1.2) ##  foreach                1.5.2    2022-02-02 [2] CRAN (R 4.1.2) ##  fs                     1.5.2    2021-12-08 [2] CRAN (R 4.1.2) ##  future                 1.27.0   2022-07-22 [2] CRAN (R 4.1.2) ##  future.apply           1.9.0    2022-04-25 [2] CRAN (R 4.1.2) ##  gargle                 1.2.0    2021-07-02 [2] CRAN (R 4.1.2) ##  generics               0.1.3    2022-07-05 [2] CRAN (R 4.1.2) ##  GenomeInfoDb           1.30.1   2022-01-30 [2] Bioconductor ##  GenomeInfoDbData       1.2.7    2022-01-26 [2] Bioconductor ##  GenomicRanges          1.46.1   2021-11-18 [2] Bioconductor ##  GetoptLong             1.0.5    2020-12-15 [2] CRAN (R 4.1.2) ##  ggbeeswarm             0.6.0    2017-08-07 [2] CRAN (R 4.1.2) ##  ggplot2              * 3.3.6    2022-05-03 [2] CRAN (R 4.1.2) ##  ggrepel                0.9.1    2021-01-15 [2] CRAN (R 4.1.2) ##  ggridges               0.5.3    2021-01-08 [2] CRAN (R 4.1.2) ##  GlobalOptions          0.1.2    2020-06-10 [2] CRAN (R 4.1.2) ##  globals                0.15.1   2022-06-24 [2] CRAN (R 4.1.2) ##  glue                   1.6.2    2022-02-24 [2] CRAN (R 4.1.2) ##  goftest                1.2-3    2021-10-07 [2] CRAN (R 4.1.2) ##  googledrive            2.0.0    2021-07-08 [2] CRAN (R 4.1.2) ##  googlesheets4          1.0.0    2021-07-21 [2] CRAN (R 4.1.2) ##  gridExtra              2.3      2017-09-09 [2] CRAN (R 4.1.2) ##  gtable                 0.3.0    2019-03-25 [2] CRAN (R 4.1.2) ##  haven                  2.5.0    2022-04-15 [2] CRAN (R 4.1.2) ##  hms                    1.1.1    2021-09-26 [2] CRAN (R 4.1.2) ##  htmltools              0.5.3    2022-07-18 [2] CRAN (R 4.1.2) ##  htmlwidgets            1.5.4    2021-09-08 [2] CRAN (R 4.1.2) ##  httpuv                 1.6.5    2022-01-05 [2] CRAN (R 4.1.2) ##  httr                   1.4.3    2022-05-04 [2] CRAN (R 4.1.2) ##  ica                    1.0-3    2022-07-08 [2] CRAN (R 4.1.2) ##  igraph                 1.3.0    2022-04-01 [2] CRAN (R 4.1.3) ##  IRanges                2.28.0   2021-10-26 [2] Bioconductor ##  irlba                  2.3.5    2021-12-06 [2] CRAN (R 4.1.2) ##  iterators              1.0.14   2022-02-05 [2] CRAN (R 4.1.2) ##  jquerylib              0.1.4    2021-04-26 [2] CRAN (R 4.1.2) ##  jsonlite               1.8.0    2022-02-22 [2] CRAN (R 4.1.2) ##  KernSmooth             2.23-20  2021-05-03 [2] CRAN (R 4.1.2) ##  knitr                  1.39     2022-04-26 [2] CRAN (R 4.1.2) ##  later                  1.3.0    2021-08-18 [2] CRAN (R 4.1.2) ##  lattice                0.20-45  2021-09-22 [2] CRAN (R 4.1.1) ##  lazyeval               0.2.2    2019-03-15 [2] CRAN (R 4.1.2) ##  leiden                 0.4.2    2022-05-09 [2] CRAN (R 4.1.2) ##  liana                * 0.1.12   2023-02-23 [1] Bioconductor ##  lifecycle              1.0.3    2022-10-07 [2] CRAN (R 4.1.2) ##  limma                  3.50.3   2022-04-07 [2] Bioconductor ##  listenv                0.8.0    2019-12-05 [2] CRAN (R 4.1.2) ##  lmtest                 0.9-40   2022-03-21 [2] CRAN (R 4.1.2) ##  locfit                 1.5-9.6  2022-07-11 [2] CRAN (R 4.1.2) ##  logger                 0.2.2    2021-10-19 [2] CRAN (R 4.1.2) ##  lubridate              1.8.0    2021-10-07 [2] CRAN (R 4.1.2) ##  magrittr             * 2.0.3    2022-03-30 [2] CRAN (R 4.1.3) ##  MASS                   7.3-58   2022-07-14 [2] CRAN (R 4.1.2) ##  Matrix                 1.4-1    2022-03-23 [2] CRAN (R 4.1.2) ##  MatrixGenerics         1.6.0    2021-10-26 [2] Bioconductor ##  matrixStats            0.62.0   2022-04-19 [2] CRAN (R 4.1.2) ##  memoise                2.0.1    2021-11-26 [2] CRAN (R 4.1.2) ##  metapod                1.2.0    2021-10-26 [2] Bioconductor ##  mgcv                   1.8-40   2022-03-29 [2] CRAN (R 4.1.2) ##  mime                   0.12     2021-09-28 [2] CRAN (R 4.1.2) ##  miniUI                 0.1.1.1  2018-05-18 [2] CRAN (R 4.1.2) ##  modelr                 0.1.8    2020-05-19 [2] CRAN (R 4.1.2) ##  munsell                0.5.0    2018-06-12 [2] CRAN (R 4.1.2) ##  nlme                   3.1-158  2022-06-15 [2] CRAN (R 4.1.2) ##  OmnipathR            * 3.7.2    2023-02-19 [2] Github (saezlab/OmnipathR@c5f63b4) ##  parallelly             1.32.1   2022-07-21 [2] CRAN (R 4.1.2) ##  patchwork              1.1.1    2020-12-17 [2] CRAN (R 4.1.2) ##  pbapply                1.5-0    2021-09-16 [2] CRAN (R 4.1.2) ##  pillar                 1.8.0    2022-07-18 [2] CRAN (R 4.1.2) ##  pkgconfig              2.0.3    2019-09-22 [2] CRAN (R 4.1.0) ##  pkgdown                2.0.6    2022-07-16 [2] CRAN (R 4.1.2) ##  plotly                 4.10.0   2021-10-09 [2] CRAN (R 4.1.2) ##  plyr                   1.8.7    2022-03-24 [2] CRAN (R 4.1.2) ##  png                    0.1-7    2013-12-03 [2] CRAN (R 4.1.0) ##  polyclip               1.10-0   2019-03-14 [2] CRAN (R 4.1.2) ##  prettyunits            1.1.1    2020-01-24 [2] CRAN (R 4.1.2) ##  progress               1.2.2    2019-05-16 [2] CRAN (R 4.1.2) ##  progressr              0.10.1   2022-06-03 [2] CRAN (R 4.1.2) ##  promises               1.2.0.1  2021-02-11 [2] CRAN (R 4.1.2) ##  purrr                * 0.3.4    2020-04-17 [2] CRAN (R 4.1.0) ##  R6                     2.5.1    2021-08-19 [2] CRAN (R 4.1.2) ##  ragg                   1.2.2    2022-02-21 [2] CRAN (R 4.1.2) ##  RANN                   2.6.1    2019-01-08 [2] CRAN (R 4.1.2) ##  rappdirs               0.3.3    2021-01-31 [2] CRAN (R 4.1.2) ##  RColorBrewer           1.1-3    2022-04-03 [2] CRAN (R 4.1.2) ##  Rcpp                   1.0.8.3  2022-03-17 [2] CRAN (R 4.1.2) ##  RcppAnnoy              0.0.19   2021-07-30 [2] CRAN (R 4.1.2) ##  RCurl                  1.98-1.7 2022-06-09 [2] CRAN (R 4.1.2) ##  readr                * 2.1.2    2022-01-30 [2] CRAN (R 4.1.2) ##  readxl                 1.4.0    2022-03-28 [2] CRAN (R 4.1.2) ##  reprex                 2.0.1    2021-08-05 [2] CRAN (R 4.1.2) ##  reshape2               1.4.4    2020-04-09 [2] CRAN (R 4.1.2) ##  reticulate             1.25     2022-05-11 [2] CRAN (R 4.1.2) ##  rgeos                  0.5-9    2021-12-15 [2] CRAN (R 4.1.2) ##  rjson                  0.2.21   2022-01-09 [2] CRAN (R 4.1.2) ##  rlang                  1.0.6    2022-09-24 [2] CRAN (R 4.1.2) ##  rmarkdown              2.14     2022-04-25 [2] CRAN (R 4.1.2) ##  ROCR                   1.0-11   2020-05-02 [2] CRAN (R 4.1.2) ##  rpart                  4.1.16   2022-01-24 [2] CRAN (R 4.1.2) ##  rprojroot              2.0.3    2022-04-02 [2] CRAN (R 4.1.2) ##  rstudioapi             0.13     2020-11-12 [2] CRAN (R 4.1.2) ##  rsvd                   1.0.5    2021-04-16 [2] CRAN (R 4.1.2) ##  Rtsne                  0.16     2022-04-17 [2] CRAN (R 4.1.2) ##  rvest                  1.0.2    2021-10-16 [2] CRAN (R 4.1.2) ##  S4Vectors              0.32.4   2022-03-24 [2] Bioconductor ##  sass                   0.4.2    2022-07-16 [2] CRAN (R 4.1.2) ##  ScaledMatrix           1.2.0    2021-10-26 [2] Bioconductor ##  scales                 1.2.0    2022-04-13 [2] CRAN (R 4.1.2) ##  scater                 1.22.0   2021-10-26 [2] Bioconductor ##  scattermore            0.8      2022-02-14 [2] CRAN (R 4.1.2) ##  scran                  1.22.1   2021-11-14 [2] Bioconductor ##  sctransform            0.3.3    2022-01-13 [2] CRAN (R 4.1.2) ##  scuttle                1.4.0    2021-10-26 [2] Bioconductor ##  sessioninfo            1.2.2    2021-12-06 [2] CRAN (R 4.1.2) ##  Seurat                 4.1.1    2022-05-02 [2] CRAN (R 4.1.2) ##  SeuratObject           4.1.0    2022-05-01 [2] CRAN (R 4.1.2) ##  shape                  1.4.6    2021-05-19 [2] CRAN (R 4.1.2) ##  shiny                  1.7.2    2022-07-19 [2] CRAN (R 4.1.2) ##  SingleCellExperiment   1.16.0   2021-10-26 [2] Bioconductor ##  sp                     1.5-0    2022-06-05 [2] CRAN (R 4.1.3) ##  sparseMatrixStats      1.6.0    2021-10-26 [2] Bioconductor ##  spatstat.core          2.4-4    2022-05-18 [2] CRAN (R 4.1.2) ##  spatstat.data          3.0-0    2022-10-21 [2] CRAN (R 4.1.2) ##  spatstat.geom          3.0-3    2022-10-25 [2] CRAN (R 4.1.2) ##  spatstat.random        3.0-1    2022-11-03 [2] CRAN (R 4.1.2) ##  spatstat.sparse        3.0-0    2022-10-21 [2] CRAN (R 4.1.2) ##  spatstat.utils         3.0-1    2022-10-19 [2] CRAN (R 4.1.2) ##  statmod                1.4.36   2021-05-10 [2] CRAN (R 4.1.2) ##  stringi                1.7.6    2021-11-29 [2] CRAN (R 4.1.1) ##  stringr              * 1.4.0    2019-02-10 [2] CRAN (R 4.1.0) ##  SummarizedExperiment   1.24.0   2021-10-26 [2] Bioconductor ##  survival               3.3-1    2022-03-03 [2] CRAN (R 4.1.2) ##  systemfonts            1.0.4    2022-02-11 [2] CRAN (R 4.1.2) ##  tensor                 1.5      2012-05-05 [2] CRAN (R 4.1.2) ##  textshaping            0.3.6    2021-10-13 [2] CRAN (R 4.1.2) ##  tibble               * 3.1.8    2022-07-22 [2] CRAN (R 4.1.2) ##  tidyr                * 1.2.0    2022-02-01 [2] CRAN (R 4.1.2) ##  tidyselect             1.2.0    2022-10-10 [2] CRAN (R 4.1.2) ##  tidyverse            * 1.3.2    2022-07-18 [2] CRAN (R 4.1.2) ##  tzdb                   0.3.0    2022-03-28 [2] CRAN (R 4.1.2) ##  utf8                   1.2.2    2021-07-24 [2] CRAN (R 4.1.2) ##  uwot                   0.1.11   2021-12-02 [2] CRAN (R 4.1.2) ##  vctrs                  0.4.1    2022-04-13 [2] CRAN (R 4.1.2) ##  vipor                  0.4.5    2017-03-22 [2] CRAN (R 4.1.2) ##  viridis                0.6.2    2021-10-13 [2] CRAN (R 4.1.2) ##  viridisLite            0.4.0    2021-04-13 [2] CRAN (R 4.1.2) ##  vroom                  1.5.7    2021-11-30 [2] CRAN (R 4.1.2) ##  withr                  2.5.0    2022-03-03 [2] CRAN (R 4.1.2) ##  xfun                   0.31     2022-05-10 [2] CRAN (R 4.1.2) ##  xml2                   1.3.3    2021-11-30 [2] CRAN (R 4.1.2) ##  xtable                 1.8-4    2019-04-21 [2] CRAN (R 4.1.2) ##  XVector                0.34.0   2021-10-26 [2] Bioconductor ##  yaml                   2.3.5    2022-02-21 [2] CRAN (R 4.1.2) ##  zlibbioc               1.40.0   2021-10-26 [2] Bioconductor ##  zoo                    1.8-10   2022-04-15 [2] CRAN (R 4.1.2) ##  ##  [1] /tmp/RtmpoegRC1/temp_libpath6147141f79468 ##  [2] /home/dbdimitrov/anaconda3/envs/liana4.1/lib/R/library ##  ## ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/liana_devel.html","id":"liana","dir":"Articles","previous_headings":"","what":"LIANA ++","title":"LIANA++ for Benchmarks and Developers","text":"facilitate method development benchmarks current future methods, vignette provide instructions relevant method developers.","code":""},{"path":"/articles/liana_devel.html","id":"load-prerequisites","dir":"Articles","previous_headings":"LIANA ++","what":"Load prerequisites","title":"LIANA++ for Benchmarks and Developers","text":"","code":"library(tidyverse) library(magrittr) library(liana)  liana_path <- system.file(package = \"liana\") testdata <-     readRDS(file.path(liana_path , \"testdata\", \"input\", \"testdata.rds\"))"},{"path":"/articles/liana_devel.html","id":"liana_pipe-and-contributions","dir":"Articles","previous_headings":"LIANA ++","what":"liana_pipe and Contributions","title":"LIANA++ for Benchmarks and Developers","text":"facilitate method development, provide guide make use architecture already implemented LIANA. First, start converting object SCE (Seurat) basic checks via liana_rep. generate LR_res table many relevant columns, stats ligands receptors per cell type. Note liana_pipe also takes complexes account dissociating subunits (see ?liana:::decomplexify). later re-assembled back complexes using recomplexify function. `` LR result summary passed get_* functions provide ways summarize information score (LRscore case) can used prioritize interactions. also need pass function wish use account heteromeric complexes get_* functions refer liana_call liana_score functions behind scenes, please refer info.","code":"sce <- liana_prep(testdata)  # Obtain LR summary res with CellPhoneDB and dissociate complexes lr_res <- liana_pipe(sce,                      op_resource = select_resource(\"CellPhoneDB\")[[1]] %>%                        liana:::decomplexify(),                      base = exp(1) # here we assume log-transformation                      # of the library-normalized counts                      ) %>%     glimpse() ## Rows: 1,818 ## Columns: 25 ## $ ligand           <chr> \"DLL1\", \"CCL5\", \"CCL4\", \"TNFSF14\", \"CD40LG\", \"LTA\", \"… ## $ receptor         <chr> \"NOTCH1\", \"CCR5\", \"CCR5\", \"LTBR\", \"CD40\", \"TNFRSF1A\",… ## $ ligand.pval      <dbl> 1.0000000000, 0.0000114871, 0.0279585592, 1.000000000… ## $ ligand.FDR       <dbl> 1.0000000000, 0.0003948689, 0.2078001025, 1.000000000… ## $ ligand.stat      <dbl> 0.5000000, 0.1888889, 0.3922222, 0.4994444, 0.4994444… ## $ receptor.pval    <dbl> 1.0000000000, 0.5440267057, 0.5440267057, 0.333710695… ## $ receptor.FDR     <dbl> 1.000000000, 0.960392173, 0.960392173, 0.679306779, 0… ## $ receptor.stat    <dbl> 0.4994444, 0.4822222, 0.4822222, 0.4833333, 0.7272222… ## $ source           <chr> \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\"… ## $ target           <chr> \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\"… ## $ ligand.expr      <dbl> 0.00000000, 0.49167104, 0.08073624, 0.03217220, 0.039… ## $ receptor.expr    <dbl> 0.04998350, 0.04227786, 0.04227786, 0.00000000, 0.685… ## $ ligand.scaled    <dbl> -0.149312933, -0.945434584, -0.548615303, 0.017698966… ## $ receptor.prop    <dbl> 0.03333333, 0.03333333, 0.03333333, 0.00000000, 0.500… ## $ ligand.prop      <dbl> 0.00000000, 0.30000000, 0.06666667, 0.03333333, 0.033… ## $ receptor.scaled  <dbl> -0.08950937, -0.02089337, -0.02089337, -0.14931046, 0… ## $ ligand.sum       <dbl> 0.08632215, 6.59848126, 2.18621009, 0.08603449, 0.214… ## $ receptor.sum     <dbl> 0.23999457, 0.14310802, 0.14310802, 0.09812520, 0.780… ## $ receptor.pem     <dbl> 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.490… ## $ ligand.pem       <dbl> 0.000000000, 0.000000000, 0.000000000, 0.006821435, 0… ## $ ligand.log2FC    <dbl> -0.12768047, -4.01952187, -2.98806898, -0.02103795, -… ## $ receptor.log2FC  <dbl> -0.071214715, -0.042705600, -0.042705600, -0.17490143… ## $ global_mean      <dbl> 0.1990563, 0.1990563, 0.1990563, 0.1990563, 0.1990563… ## $ ligand.complex   <chr> \"DLL1\", \"CCL5\", \"CCL4\", \"TNFSF14\", \"CD40LG\", \"LTA\", \"… ## $ receptor.complex <chr> \"NOTCH1\", \"CCR5\", \"CCR5\", \"LTBR\", \"CD40\", \"TNFRSF1A\",… get_sca(lr_res, complex_policy=\"mean\",         expr_prop=liana_defaults()[[\"expr_prop\"]],         return_all=FALSE) %>% glimpse ## Rows: 172 ## Columns: 12 ## $ source           <chr> \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\"… ## $ target           <chr> \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\"… ## $ ligand.complex   <chr> \"ALOX5\", \"MIF\", \"ANXA1\", \"CD72\", \"GRN\", \"SELL\", \"TNFS… ## $ ligand           <chr> \"ALOX5\", \"MIF\", \"ANXA1\", \"CD72\", \"GRN\", \"SELL\", \"TNFS… ## $ receptor.complex <chr> \"ALOX5AP\", \"CD74\", \"FPR1\", \"SEMA4D\", \"TNFRSF1B\", \"SEL… ## $ receptor         <chr> \"ALOX5AP\", \"CD74\", \"FPR1\", \"SEMA4D\", \"TNFRSF1B\", \"SEL… ## $ receptor.prop    <dbl> 0.3666667, 1.0000000, 0.1000000, 0.1666667, 0.1666667… ## $ ligand.prop      <dbl> 0.3000000, 0.6000000, 0.2666667, 0.2333333, 0.2666667… ## $ ligand.expr      <dbl> 0.3937931, 0.9104887, 0.3938854, 0.3774934, 0.3739728… ## $ receptor.expr    <dbl> 0.5182538, 4.5311493, 0.1062514, 0.2230945, 0.2157197… ## $ global_mean      <dbl> 0.1990563, 0.1990563, 0.1990563, 0.1990563, 0.1990563… ## $ LRscore          <dbl> 0.6941424, 0.9107452, 0.5068361, 0.5931461, 0.5879491…"},{"path":"/articles/liana_devel.html","id":"install-liana","dir":"Articles","previous_headings":"LIANA ++","what":"Install LIANA++","title":"LIANA++ for Benchmarks and Developers","text":"Install LIANA++ environment original software way minimize bias benchmark studies. LIANA++ uses CCC methods R Python, dependencies need installed. install LIANA++ framework run following code R: Squidpy NATMI written Python, python environment prerequisites methods needs set . also wish run CellPhoneDB re-implementation Squidpy, please set conda environment running following lines terminal: Please use .yml file set conda environment: Note! NATMI Squidpy set default look conda environment (“liana_env”).","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  if (!requireNamespace(\"devtools\", quietly = TRUE))     install.packages(\"devtools\")  library(devtools)  Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS = TRUE) # ignore warning from iTALK BiocManager::install(\"ComplexHeatmap\") # required for Connectome devtools::install_github('saezlab/OmnipathR@ff3ad88e3915747e1b557bf44ac5396f9525dd7e') # install 4.0 version of OmnipathR  # install tools devtools::install_github(\"sqjin/CellChat\") devtools::install_github('msraredon/Connectome', ref = 'master') devtools::install_github(\"Coolgenome/iTALK\", build_vignettes = FALSE) # A modified version of SingleCellSignalR (SCA) that enables external resources devtools::install_github(repo = \"saezlab/SingleCellSignalR_v1\",                          subdir = \"SingleCellSignalR\")  # Finally, install LIANA devtools::install_github('saezlab/liana') conda create -n liana_env conda activate liana_env conda install -c anaconda python=3.8.5 pip install squidpy conda env create -f liana_env.yml"},{"path":"/articles/liana_devel.html","id":"to-use-natmi-with-liana-clone-the-modified-natmi-repo-into-liana-path-by-running-the-following-in-the-terminal","dir":"Articles","previous_headings":"LIANA ++ > Install LIANA++","what":"To use NATMI with LIANA, clone the modified NATMI repo into liana path by running the following in the terminal:","title":"LIANA++ for Benchmarks and Developers","text":"","code":"cd *insert fullpath*/liana git clone https://github.com/saezlab/NATMI"},{"path":[]},{"path":"/articles/liana_devel.html","id":"if-needed-use-the-following-to-locate-the-liana-package","dir":"Articles","previous_headings":"LIANA ++ > Install LIANA++","what":"If needed, use the following to locate the liana package","title":"LIANA++ for Benchmarks and Developers","text":"might easier just also clone liana repo.","code":"system.file(package = \"liana\") # \"/home/user/R/x86_64.../4.0/liana\""},{"path":"/articles/liana_devel.html","id":"call_-functions","dir":"Articles","previous_headings":"LIANA ++ > Install LIANA++","what":"call_* functions","title":"LIANA++ for Benchmarks and Developers","text":"Use call_ functions run pipelines original methods, rather re-implementations. functions work Seurat objects instead converted SCE. largely getting deprecated moved seperate repository future. Similarly one call call_* functions via liana_wrap","code":"# RUN cellchat alone with OmniPath's Consensus sca_res <- call_sca(   testdata,   op_resource = select_resource('Consensus')[[1]]   )  # Show CellChat Results sca_res liana_calls <- liana_wrap(testdata,                           method = c('call_connectome',                                      'call_sca',                                      'call_italk',                                      'call_natmi'                                      ),                           resource = c(\"Default\")) # Run with Default Resources liana_calls %>% liana_aggregate() # Connectome finds no significant hits here # Note that for italk we use mean(ligand.logFC, receptor.logFC) as a way to compare # to the other methods"},{"path":"/articles/liana_devel.html","id":"session-information","dir":"Articles","previous_headings":"LIANA ++","what":"Session information","title":"LIANA++ for Benchmarks and Developers","text":"","code":"options(width = 120) sessioninfo::session_info()"},{"path":"/articles/liana_nichenet.html","id":"before-you-start","dir":"Articles","previous_headings":"","what":"Before you start","title":"LIANA - NicheNet","text":"vignette example combine LIANA’s hypotheses produced NicheNet. biological results obtained highly dependent hypothesis mind, described NicheNet’s original article. start, strongly recommend look NicheNet’s repository, data analyses run extracted vignettes. acknowledge NicheNet’s authors extensive reproducible documentation provide repository.","code":""},{"path":"/articles/liana_nichenet.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"LIANA - NicheNet","text":"LIANA (LIgand-receptor ANalysis frAmework) framework able prioritize ligand-receptor interactions single-cell transcriptomics using different resources methods. allows users systematically generate hypotheses ligands given cell type binding receptors another. contrast LIANA, NicheNet aims deepen intra-cellular mechanisms connect ligand set transcriptional targets, making extensive usage prior knowledge multiple sources. LIANA NicheNet mutually exclusive, certain scenarios rather complementary, given aim explore different aspects inter- intra-cellular communication.  , vignette, show use LIANA combination NicheNet using data biological scenario described NicheNet’s vignette. Briefly, biological question : ligands expressed cancer-associated fibroblasts (CAFs) can induce specific gene program neighboring malignant cells? (Using data Puram et al. 2017).","code":""},{"path":"/articles/liana_nichenet.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"Load packages and data","title":"LIANA - NicheNet","text":"first install NicheNet load required libraries , load prepare single-cell data, NicheNet’s model weights, gene set interest. latest composed genes known participate partial epithelial-mesenchymal transition (p-EMT) program, defined NicheNet’s vignette. Furthermore, restrict single-cell data two cell types interest example, cancer associated fibroblasts (CAFs) tumor cells.","code":"if(!require('ggpubr')) install.packages('ggpubr', quiet = TRUE, repos = \"http://cran.us.r-project.org\") if(!require('ggrepel')) install.packages('ggrepel', quiet = TRUE, repos = \"http://cran.us.r-project.org\") if(!require('cowplot')) install.packages('cowplot', quiet = TRUE, repos = \"http://cran.us.r-project.org\") if(!require('remotes')) install.packages('remotes', quiet = TRUE, repos = \"http://cran.us.r-project.org\") if(!require('nichenetr')) remotes::install_github(\"saeyslab/nichenetr\", quiet = TRUE) library(tidyverse) library(liana) library(nichenetr) library(Seurat) library(ggrepel) library(cowplot) options(timeout=600) # required to download expression data /w slow connection # single-cell expression matrix described in Puram et al. 2017 hnscc_expression <- readRDS(url(\"https://zenodo.org/record/3260758/files/hnscc_expression.rds\")) # model weights ligand_target_matrix <- readRDS(url(\"https://zenodo.org/record/3260758/files/ligand_target_matrix.rds\")) expression <- hnscc_expression$expression sample_info <- hnscc_expression$sample_info colnames(sample_info) <- make.names(colnames(sample_info))  # filter samples based on vignette's information and add cell type tumors_remove <-  c(\"HN10\", \"HN\", \"HN12\", \"HN13\", \"HN24\", \"HN7\", \"HN8\", \"HN23\") sample_info <- sample_info %>%   subset( !(tumor %in% tumors_remove) & Lymph.node == 0) %>%   # fix some cell type identity names   mutate(cell_type = ifelse(classified..as.cancer.cell == 1, \"Tumor\", non.cancer.cell.type)) %>%   subset(cell_type %in% c(\"Tumor\", \"CAF\"))  # cell ID as rownames rownames(sample_info) <- sample_info$cell  # subset expression to selected cells expression <- expression[sample_info$cell, ]  # gene set of interest geneset_oi <- read_tsv(url(\"https://zenodo.org/record/3260758/files/pemt_signature.txt\"), col_types = cols(), col_names = \"gene\") %>%   pull(gene) %>%   .[. %in% rownames(ligand_target_matrix)]"},{"path":"/articles/liana_nichenet.html","id":"run-liana","dir":"Articles","previous_headings":"","what":"Run LIANA","title":"LIANA - NicheNet","text":"first step, run LIANA systematically score ligand-receptor interactions cell types included dataset. , first need create Seurat object data: can execute LIANA using default parameters. LIANA execution, employ function liana_aggregate() summarize output different methods obtain single score interaction. default, LIANA score ligand-receptor interactions possible directions within two cell types interest. includes: Autocrine signaling (e.g. CAFs -> CAFs), CAFs -> Tumor cells Tumor cells -> CAFs. interested CAFs -> Tumor cell direction, filter results visualize top 50 interactions according consensus/aggregate rank across methods. aggregate rank can interpreted significance preferential enrichment interactions.","code":"# create seurat object seurat_object <- Seurat::CreateAssayObject(counts = expm1(t(expression))) %>%   Seurat::CreateSeuratObject(., meta.data = sample_info) %>%   Seurat::NormalizeData()  # set cell identity to cell type Idents(seurat_object) <- seurat_object@meta.data$cell_type liana_results <- liana_wrap(seurat_object) %>%   liana_aggregate() # filter results to cell types of interest caf_tumor_results <- liana_results %>%   subset(source == \"CAF\" & target == \"Tumor\") %>%   dplyr::rename(ligand=ligand.complex, receptor=receptor.complex)  # filter results to top N interactions n <- 50 top_n_caf_tumor <- caf_tumor_results %>%   arrange(aggregate_rank) %>%   slice_head(n = n) %>%   mutate(id = fct_inorder(paste0(ligand, \" -> \", receptor)))  # visualize median rank top_n_caf_tumor %>%   ggplot(aes(y = aggregate_rank, x = id)) +   geom_bar(stat = \"identity\") +   xlab(\"Interaction\") + ylab(\"LIANA's aggregate rank\") +   theme_cowplot() +   theme(axis.text.x = element_text(size = 8, angle = 60, hjust = 1, vjust = 1))"},{"path":"/articles/liana_nichenet.html","id":"run-nichenet-using-lianas-ligands","dir":"Articles","previous_headings":"","what":"Run NicheNet using LIANA’s ligands","title":"LIANA - NicheNet","text":"key aspect combining LIANA NicheNet can use ligands prioritized LIANA set potential ligands NicheNet. Instead evaluating expressed ligands receptor also expressed receiver cell type, explore prioritized methods included LIANA. Hence, select ligands form interactions previously shown. running NicheNet, also need define list background genes. , employ threshold defined NicheNet’s vignette. execute NicheNet predict ligand activities using pEMT gene set previously mentioned result, obtain NicheNet’s activity predictions ligands previously prioritized using LIANA. final step, visualize ligand-receptor scores LIANA ligand activity score NicheNet single figure.","code":"# get ligands and filter to those included in NicheNet's ligand-target matrix ligands <- unique(top_n_caf_tumor$ligand) ligands <- ligands[ligands %in% colnames(ligand_target_matrix)] ligands ##  [1] \"COL1A1\" \"FN1\"    \"THBS2\"  \"CXCL12\" \"COL4A1\" \"THBS1\"  \"THBS4\"  \"LAMB1\"  ##  [9] \"IGF1\"   \"LAMA2\"  \"COMP\"   \"LAMB2\" background_genes <- expression[sample_info$cell[sample_info$cell_type == \"Tumor\"], ] %>%   apply(2,function(x){10*(2**x - 1)}) %>%   apply(2,function(x){log2(mean(x) + 1)}) %>%   .[. >= 4] %>%   names() nichenet_activities <- predict_ligand_activities(   geneset = geneset_oi,   background_expressed_genes = background_genes,   ligand_target_matrix = ligand_target_matrix, potential_ligands = ligands ) # prepare data for visualization vis_liana_nichenet <- top_n_caf_tumor %>%   inner_join(nichenet_activities, by = c(\"ligand\" = \"test_ligand\")) %>%   arrange(pearson) %>%   mutate(ligand = fct_inorder(ligand))  # prepare NicheNet figure nichenet_scores_plot <- vis_liana_nichenet %>%   group_by(ligand) %>%   summarize(pearson = mean(pearson)) %>%   ggplot(aes(y = ligand, x = pearson)) +   geom_bar(stat = \"identity\") +   ggtitle(\"NicheNet\") +   xlab(\"Pearson's score\") +   theme_cowplot() +   theme(axis.text.y = element_blank(),         axis.ticks.y = element_blank(),         axis.title.y = element_blank(),         axis.line.y = element_line(color = \"white\"),         plot.title = element_text(hjust = 0.5),         axis.text.x = element_text(angle = 60, hjust = 1, vjust = 1))  # prepare LIANA figure liana_receptor_heatmap <- vis_liana_nichenet %>%   ggplot(aes(y = ligand, x = receptor, fill = aggregate_rank)) +   geom_tile() +   theme_cowplot() +   ggtitle(\"LIANA\") +   ylab(\"Ligand\") + xlab(\"Receptor\") +   theme(axis.text.x = element_text(angle = 60, hjust = 1, vjust = 1),         plot.title = element_text(hjust = 0.5),         panel.grid.major = element_line(colour = \"gray\", linetype = 2),         legend.position = \"left\")  # combine plots plot_grid(liana_receptor_heatmap, nichenet_scores_plot,           align = \"h\", nrow = 1, rel_widths = c(0.8,0.3))"},{"path":"/articles/liana_nichenet.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"LIANA - NicheNet","text":"vignette, exemplify use LIANA’s predictions NicheNet’s input. Although methods complementary, one point forgotten: LIANA predicts ligand-receptor interaction pairs. However, NicheNet score given ligand comes likely reach set given targets . ligand can great Pearson correlation score regulate given set targets, actually know mediated receptor predicted using LIANA. Given , combination methods predict cell-cell communication (like LIANA) tools able model intracellular signaling using prior knowledge (e.g. NicheNet) constitute promising approach deepen signaling mechanisms implicated biological process study.","code":""},{"path":"/articles/liana_nichenet.html","id":"r-session-information","dir":"Articles","previous_headings":"","what":"R Session information","title":"LIANA - NicheNet","text":"","code":"sessionInfo() ## R version 4.1.2 (2021-11-01) ## Platform: x86_64-conda-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.5 LTS ##  ## Matrix products: default ## BLAS/LAPACK: /home/dbdimitrov/anaconda3/envs/liana4.1/lib/libopenblasp-r0.3.18.so ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=de_DE.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=de_DE.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=de_DE.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=de_DE.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] sp_1.5-0           SeuratObject_4.1.0 Seurat_4.1.1       liana_0.1.12       ##  [5] forcats_0.5.1      stringr_1.4.0      dplyr_1.0.9        purrr_0.3.4        ##  [9] readr_2.1.2        tidyr_1.2.0        tibble_3.1.8       tidyverse_1.3.2    ## [13] nichenetr_1.1.1    remotes_2.4.2      cowplot_1.1.1      ggrepel_0.9.1      ## [17] ggpubr_0.4.0       ggplot2_3.3.6      BiocStyle_2.22.0   ##  ## loaded via a namespace (and not attached): ##   [1] rsvd_1.0.5                  Hmisc_4.7-0                 ##   [3] ica_1.0-3                   class_7.3-20                ##   [5] foreach_1.5.2               lmtest_0.9-40               ##   [7] rprojroot_2.0.3             crayon_1.5.1                ##   [9] spatstat.core_2.4-4         MASS_7.3-58                 ##  [11] nlme_3.1-158                backports_1.4.1             ##  [13] reprex_2.0.1                basilisk_1.9.12             ##  [15] rlang_1.0.6                 XVector_0.34.0              ##  [17] caret_6.0-92                ROCR_1.0-11                 ##  [19] readxl_1.4.0                irlba_2.3.5                 ##  [21] limma_3.50.3                scater_1.22.0               ##  [23] filelock_1.0.2              BiocParallel_1.28.3         ##  [25] rjson_0.2.21                bit64_4.0.5                 ##  [27] glue_1.6.2                  sctransform_0.3.3           ##  [29] vipor_0.4.5                 parallel_4.1.2              ##  [31] spatstat.sparse_3.0-0       BiocGenerics_0.40.0         ##  [33] spatstat.geom_3.0-3         haven_2.5.0                 ##  [35] tidyselect_1.2.0            SummarizedExperiment_1.24.0 ##  [37] fitdistrplus_1.1-8          zoo_1.8-10                  ##  [39] xtable_1.8-4                magrittr_2.0.3              ##  [41] evaluate_0.15               scuttle_1.4.0               ##  [43] cli_3.6.0                   zlibbioc_1.40.0             ##  [45] rstudioapi_0.13             miniUI_0.1.1.1              ##  [47] bslib_0.4.0                 logger_0.2.2                ##  [49] rpart_4.1.16                shiny_1.7.2                 ##  [51] BiocSingular_1.10.0         xfun_0.31                   ##  [53] clue_0.3-61                 cluster_2.1.3               ##  [55] caTools_1.18.2              listenv_0.8.0               ##  [57] png_0.1-7                   future_1.27.0               ##  [59] ipred_0.9-13                withr_2.5.0                 ##  [61] bitops_1.0-7                plyr_1.8.7                  ##  [63] cellranger_1.1.0            hardhat_1.2.0               ##  [65] e1071_1.7-11                dqrng_0.3.0                 ##  [67] pROC_1.18.0                 pillar_1.8.0                ##  [69] GlobalOptions_0.1.2         cachem_1.0.6                ##  [71] fs_1.5.2                    GetoptLong_1.0.5            ##  [73] DelayedMatrixStats_1.16.0   vctrs_0.4.1                 ##  [75] ellipsis_0.3.2              generics_0.1.3              ##  [77] lava_1.6.10                 tools_4.1.2                 ##  [79] foreign_0.8-82              beeswarm_0.4.0              ##  [81] munsell_0.5.0               proxy_0.4-27                ##  [83] DelayedArray_0.20.0         fastmap_1.1.0               ##  [85] compiler_4.1.2              abind_1.4-5                 ##  [87] httpuv_1.6.5                plotly_4.10.0               ##  [89] rgeos_0.5-9                 GenomeInfoDbData_1.2.7      ##  [91] prodlim_2019.11.13          gridExtra_2.3               ##  [93] edgeR_3.36.0                lattice_0.20-45             ##  [95] dir.expiry_1.2.0            deldir_1.0-6                ##  [97] visNetwork_2.1.0            utf8_1.2.2                  ##  [99] later_1.3.0                 recipes_1.0.1               ## [101] jsonlite_1.8.0              scales_1.2.0                ## [103] ScaledMatrix_1.2.0          pbapply_1.5-0               ## [105] carData_3.0-5               sparseMatrixStats_1.6.0     ## [107] lazyeval_0.2.2              promises_1.2.0.1            ## [109] car_3.1-0                   doParallel_1.0.17           ## [111] latticeExtra_0.6-30         goftest_1.2-3               ## [113] spatstat.utils_3.0-1        reticulate_1.25             ## [115] checkmate_2.1.0             rmarkdown_2.14              ## [117] pkgdown_2.0.6               textshaping_0.3.6           ## [119] statmod_1.4.36              Rtsne_0.16                  ## [121] Biobase_2.54.0              uwot_0.1.11                 ## [123] igraph_1.3.0                survival_3.3-1              ## [125] yaml_2.3.5                  systemfonts_1.0.4           ## [127] htmltools_0.5.3             memoise_2.0.1               ## [129] locfit_1.5-9.6              IRanges_2.28.0              ## [131] viridisLite_0.4.0           digest_0.6.29               ## [133] assertthat_0.2.1            mime_0.12                   ## [135] rappdirs_0.3.3              future.apply_1.9.0          ## [137] data.table_1.14.2           S4Vectors_0.32.4            ## [139] ragg_1.2.2                  DiagrammeR_1.0.9            ## [141] labeling_0.4.2              splines_4.1.2               ## [143] Formula_1.2-4               googledrive_2.0.0           ## [145] RCurl_1.98-1.7              broom_1.0.0                 ## [147] hms_1.1.1                   modelr_0.1.8                ## [149] colorspace_2.0-3            base64enc_0.1-3             ## [151] BiocManager_1.30.18         ggbeeswarm_0.6.0            ## [153] GenomicRanges_1.46.1        shape_1.4.6                 ## [155] nnet_7.3-17                 sass_0.4.2                  ## [157] Rcpp_1.0.8.3                bookdown_0.27               ## [159] RANN_2.6.1                  circlize_0.4.15             ## [161] fansi_1.0.3                 tzdb_0.3.0                  ## [163] parallelly_1.32.1           ModelMetrics_1.2.2.2        ## [165] R6_2.5.1                    grid_4.1.2                  ## [167] ggridges_0.5.3              lifecycle_1.0.3             ## [169] bluster_1.4.0               curl_4.3.2                  ## [171] ggsignif_0.6.3              googlesheets4_1.0.0         ## [173] leiden_0.4.2                jquerylib_0.1.4             ## [175] Matrix_1.4-1                desc_1.4.1                  ## [177] RcppAnnoy_0.0.19            RColorBrewer_1.1-3          ## [179] iterators_1.0.14            gower_1.0.0                 ## [181] htmlwidgets_1.5.4           beachmat_2.10.0             ## [183] polyclip_1.10-0             rvest_1.0.2                 ## [185] ComplexHeatmap_2.10.0       mgcv_1.8-40                 ## [187] globals_0.15.1              htmlTable_2.4.1             ## [189] patchwork_1.1.1             spatstat.random_3.0-1       ## [191] progressr_0.10.1            codetools_0.2-18            ## [193] matrixStats_0.62.0          lubridate_1.8.0             ## [195] metapod_1.2.0               randomForest_4.7-1.1        ## [197] prettyunits_1.1.1           SingleCellExperiment_1.16.0 ## [199] dbplyr_2.2.1                basilisk.utils_1.9.4        ## [201] GenomeInfoDb_1.30.1         gtable_0.3.0                ## [203] DBI_1.1.3                   stats4_4.1.2                ## [205] highr_0.9                   tensor_1.5                  ## [207] httr_1.4.3                  KernSmooth_2.23-20          ## [209] stringi_1.7.6               vroom_1.5.7                 ## [211] progress_1.2.2              farver_2.1.1                ## [213] reshape2_1.4.4              viridis_0.6.2               ## [215] fdrtool_1.2.17              timeDate_4021.104           ## [217] xml2_1.3.3                  BiocNeighbors_1.12.0        ## [219] OmnipathR_3.7.2             interp_1.1-3                ## [221] scattermore_0.8             bit_4.0.4                   ## [223] scran_1.22.1                jpeg_0.1-9                  ## [225] MatrixGenerics_1.6.0        spatstat.data_3.0-0         ## [227] pkgconfig_2.0.3             gargle_1.2.0                ## [229] rstatix_0.7.0               knitr_1.39"},{"path":"/articles/liana_ortho.html","id":"loading-prerequisites","dir":"Articles","previous_headings":"","what":"Loading prerequisites","title":" LIANA Orthology Conversion","text":"also recommended ensure latest OmnipathR version installed:","code":"library(tidyverse) library(OmnipathR) library(liana) library(magrittr)  liana_path <- system.file(package = \"liana\") testdata <-     readRDS(file.path(liana_path, \"testdata\", \"input\", \"testdata.rds\"))  # Convert testdata to putative mouse symbols # Note that we explicitly provide this tutorial to avoid any such conversions when working with real data # We simply do this here to provide an example rownames(testdata@assays$RNA@counts) <- stringr::str_to_title(rownames(testdata@assays$RNA@counts)) rownames(testdata@assays$RNA@data) <- stringr::str_to_title(rownames(testdata@assays$RNA@data)) remotes::install_github(\"saezlab/OmnipathR\")"},{"path":"/articles/liana_ortho.html","id":"internally-available-organisms","dir":"Articles","previous_headings":"","what":"Internally available organisms","title":" LIANA Orthology Conversion","text":"LIANA’s generate_homologs function uses OmnipathR’s homologene_download function obtain human x species dictionary. , check organisms currently available. One must simply choose ncbi_taxid pass target_organism parameter generate_homologs function .","code":"show_homologene() ## # A tibble: 12 × 3 ##    ncbi_taxid name                                latin                   ##         <int> <chr>                               <chr>                   ##  1       6239 Caenorhabditis elegans (PRJNA13758) Caenorhabditis elegans  ##  2       9031 Chicken                             Gallus gallus           ##  3       9598 Chimpanzee                          Pan troglodytes         ##  4       9913 Cow                                 Bos taurus              ##  5       7227 D. melanogaster                     Drosophila melanogaster ##  6       9615 Dog                                 Canis lupus familiaris  ##  7       9606 Human                               Homo sapiens            ##  8       9544 Macaque                             Macaca mulatta          ##  9      10090 Mouse                               Mus musculus            ## 10      10116 Rat                                 Rattus norvegicus       ## 11       8364 Tropical clawed frog                Xenopus tropicalis      ## 12       7955 Zebrafish                           Danio rerio"},{"path":"/articles/liana_ortho.html","id":"convert-to-orthologues-and-example-liana-run","dir":"Articles","previous_headings":"","what":"Convert to Orthologues and Example LIANA run","title":" LIANA Orthology Conversion","text":"Conversion trickier anticipated. sense , genes without matching homologs, others multiple matching homologs. issues complicated working complexes, case interactions LIANA. ligand–receptor interactions can also species-specific. Thus, suggest possible check literature support predicted edges using orthology conversion. Notably, generate_homologs function designed flexible, default relatively conservative. , please refer documentation information.","code":"# Here, we will convert LIANA's Consensus resource to murine symbols op_resource <- select_resource(\"Consensus\")[[1]]  # Generate orthologous resource ortholog_resource <- generate_homologs(op_resource = op_resource,                                        target_organism = 10090) # mouse  # Run LIANA with the orthologous resource liana_res <- liana_wrap(testdata,                         resource = 'custom', # resource has to be set to 'custom' to work with external resources                         external_resource = ortholog_resource, # provide orthologous resource                         method=c('sca', 'natmi') # run only with sca and natmi for comp. time                         )  # aggregate liana_res <- liana_res %>%     liana_aggregate()  # Plot example liana_res %>%     filter(source==\"B\") %>%     filter(target %in% c(\"NK\", \"CD8 T\")) %>%     liana_dotplot(source_groups = \"B\",                   target_groups = c(\"NK\", \"CD8 T\"),                   ntop = 15)"},{"path":"/articles/liana_ortho.html","id":"generating-an-external-dictionary","dir":"Articles","previous_headings":"","what":"Generating an External Dictionary","title":" LIANA Orthology Conversion","text":"order convert human resource organism, need dictionary maps human gene symbols orthologs another species, might available via OmniPath. alternative widely used database purpose BioMart.","code":""},{"path":"/articles/liana_ortho.html","id":"an-example-dictionary-generated-w-homologene-for-murine-symbols-is-included-in-liana","dir":"Articles","previous_headings":"","what":"An example dictionary (generated /w homologene) for murine symbols is included in liana","title":" LIANA Orthology Conversion","text":"One can simply pass symbols_dict symbols_dict param generate_homologs, instead specifying tax id target_organism. Automatic conversion comes limitation, thus also refer user external curated databases (e.g. murine CellChatDB), can also used LIANA.","code":"symbols_dict <- readRDS(file.path(liana_path, \"human_mouse_orthologues.RDS\")) head(symbols_dict) ##      ACVR1        AGT        FAS         AR   SERPING1       CD3G  ##    \"Acvr1\"      \"Agt\"      \"Fas\"       \"Ar\" \"Serping1\"     \"Cd3g\""},{"path":"/articles/liana_tutorial.html","id":"liana-intro","dir":"Articles","previous_headings":"","what":"liana: Intro","title":"LIANA Tutorial","text":"continuous developments single-cell RNA-Seq (scRNA-Seq) sparked immense interest understanding intercellular crosstalk. Multiple tools resources aid investigation cell-cell communication (CCC) published recently. However, methods resources usually fixed combination tool corresponding resource, principle resource combined method. end, built liana - framework decouple tools corresponding resources.","code":""},{"path":"/articles/liana_tutorial.html","id":"load-required-packages","dir":"Articles","previous_headings":"liana: Intro","what":"Load required packages","title":"LIANA Tutorial","text":"","code":"library(tidyverse) library(magrittr) library(liana)"},{"path":"/articles/liana_tutorial.html","id":"ccc-resources","dir":"Articles","previous_headings":"liana: Intro","what":"CCC Resources","title":"LIANA Tutorial","text":"liana provides CCC resources obtained formatted via OmnipathR converted appropriate format method.","code":"# Resource currently included in OmniPathR (and hence `liana`) include: show_resources() #>  [1] \"Default\"          \"Consensus\"        \"Baccin2019\"       \"CellCall\"         #>  [5] \"CellChatDB\"       \"Cellinker\"        \"CellPhoneDB\"      \"CellTalkDB\"       #>  [9] \"connectomeDB2020\" \"EMBRACE\"          \"Guide2Pharma\"     \"HPMR\"             #> [13] \"ICELLNET\"         \"iTALK\"            \"Kirouac2010\"      \"LRdb\"             #> [17] \"Ramilowski2015\"   \"OmniPath\"         \"MouseConsensus\"  # A list of resources can be obtained using the `select_resource()` function: # See `?select_resource()` documentation for further information. # select_resource(c('OmniPath')) %>% dplyr::glimpse()"},{"path":"/articles/liana_tutorial.html","id":"ccc-methods","dir":"Articles","previous_headings":"liana: Intro","what":"CCC Methods","title":"LIANA Tutorial","text":"resources can run following methods: Note different algorithms (scoring measures) used sca, natmi, connectome, cellphonedb, cytotalk’s crosstalk scores, logfc re-implemented LIANA. Yet, original method pipelines can called via call_* functions.","code":"# Resource currently included in OmniPathR (and hence `liana`) include: show_methods() #>  [1] \"connectome\"      \"logfc\"           \"natmi\"           \"sca\"             #>  [5] \"cellphonedb\"     \"cytotalk\"        \"call_squidpy\"    \"call_cellchat\"   #>  [9] \"call_connectome\" \"call_sca\"        \"call_italk\"      \"call_natmi\""},{"path":"/articles/liana_tutorial.html","id":"liana-wrapper-function","dir":"Articles","previous_headings":"liana: Intro","what":"liana wrapper function","title":"LIANA Tutorial","text":"run liana, use -sampled toy HUMAN PBMCs scRNA-Seq data set, obtained SeuratData. liana takes Seurat SingleCellExperiment objects input, containing processed counts clustered cells. liana_wrap calls number methods method run provided resource(s). now call methods currently available liana. use Consensus (Default) CCC resource, aforementioned ones (available via show_resources()) can added resource parameter LIANA currently provides mixture re-implemented methods pipelines externally call specific LR methods. default, LIANA call internal scoring function, .e. re-implemented LIANA. One can use LIANA also run original methods. original methods see LIANA++.","code":"liana_path <- system.file(package = \"liana\") testdata <-   readRDS(file.path(liana_path , \"testdata\", \"input\", \"testdata.rds\"))  testdata %>% dplyr::glimpse() #> Formal class 'Seurat' [package \"SeuratObject\"] with 13 slots #>   ..@ assays      :List of 1 #>   .. ..$ RNA:Formal class 'Assay' [package \"Seurat\"] with 8 slots #>   ..@ meta.data   :'data.frame': 90 obs. of  4 variables: #>   .. ..$ orig.ident        : Factor w/ 1 level \"pbmc3k\": 1 1 1 1 1 1 1 1 1 1 ... #>   .. ..$ nCount_RNA        : num [1:90] 4903 3914 4973 3281 2641 ... #>   .. ..$ nFeature_RNA      : int [1:90] 1352 1112 1445 1015 928 937 899 1713 960 888 ... #>   .. ..$ seurat_annotations: Factor w/ 3 levels \"B\",\"CD8 T\",\"NK\": 1 1 1 1 3 3 1 1 1 1 ... #>   ..@ active.assay: chr \"RNA\" #>   ..@ active.ident: Factor w/ 3 levels \"B\",\"CD8 T\",\"NK\": 1 1 1 1 3 3 1 1 1 1 ... #>   .. ..- attr(*, \"names\")= chr [1:90] \"AAACATTGAGCTAC\" \"AAACTTGAAAAACG\" \"AAAGGCCTGTCTAG\" \"AAAGTTTGGGGTGA\" ... #>   ..@ graphs      : list() #>   ..@ neighbors   : list() #>   ..@ reductions  : list() #>   ..@ images      : list() #>   ..@ project.name: chr \"SeuratProject\" #>   ..@ misc        : list() #>   ..@ version     :Classes 'package_version', 'numeric_version'  hidden list of 1 #>   .. ..$ : int [1:3] 3 2 3 #>   ..@ commands    :List of 2 #>   .. ..$ FindVariableFeatures.RNA:Formal class 'SeuratCommand' [package \"Seurat\"] with 5 slots #>   .. ..$ NormalizeData.RNA       :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots #>   ..@ tools       : list() # Run liana liana_test <- liana_wrap(testdata) #> Warning in exec(output, ...): 3465 genes and/or 0 cells were removed as they had #> no counts! #> Warning: `invoke()` is deprecated as of rlang 0.4.0. #> Please use `exec()` or `inject()` instead. #> This warning is displayed once per session.  # Liana returns a list of results, each element of which corresponds to a method liana_test %>% dplyr::glimpse()"},{"path":"/articles/liana_tutorial.html","id":"aggregate-and-obiain-consensus-ranks","dir":"Articles","previous_headings":"liana: Intro","what":"Aggregate and Obiain Consensus Ranks","title":"LIANA Tutorial","text":"liana also provides consensus ranks results obtained using different methods. default, liana provide mean, median, aggregate* consensus ranks Voila! ’s . brief intro LIANA obtain scoring functions† method implemented , well aggregate_rank* serves consensus across methods. (†) Note focus scores recommended used prioritize interaction single sample system. , exception SingleCellSignalR’s LRscore, take specificity cluster pair account. (*) aggregate consensus rank (aggregate_rank) obtained using re-implementation RRA method RobustRankAggreg package. RRA scores can interpreted p-values interactions ranked consistently higher random assigned low scores/p-values.","code":"# We can aggregate these results into a tibble with consensus ranks liana_test <- liana_test %>%   liana_aggregate() #> Now aggregating natmi #> Now aggregating connectome #> Now aggregating logfc #> Now aggregating sca #> Now aggregating cellphonedb #> Aggregating Ranks  dplyr::glimpse(liana_test) #> Rows: 735 #> Columns: 16 #> $ source                 <chr> \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"NK\", \"NK\", \"B\", … #> $ target                 <chr> \"CD8 T\", \"CD8 T\", \"CD8 T\", \"CD8 T\", \"CD8 T\", \"C… #> $ ligand.complex         <chr> \"HLA-DQA1\", \"HLA-DRA\", \"HLA-DQA2\", \"HLA-DRB1\", … #> $ receptor.complex       <chr> \"LAG3\", \"LAG3\", \"LAG3\", \"LAG3\", \"LAG3\", \"LAG3\",… #> $ aggregate_rank         <dbl> 1.003283e-06, 8.816325e-06, 1.093275e-05, 1.627… #> $ mean_rank              <dbl> 38.3, 27.5, 56.9, 36.5, 46.9, 33.7, 49.5, 28.9,… #> $ natmi.edge_specificity <dbl> 0.8945477, 0.7374111, 0.9665280, 0.6819579, 0.8… #> $ natmi.rank             <dbl> 2, 7, 1, 10, 5, 12, 66, 20, 11, 8, 4, 28, 100, … #> $ connectome.weight_sc   <dbl> 1.0054344, 1.0097786, 0.9046471, 0.9328151, 0.9… #> $ connectome.rank        <dbl> 2, 1, 6, 3, 7, 5, 19, 8, 4, 9, 22, 21, 13, 39, … #> $ logfc.logfc_comb       <dbl> 2.4495727, 2.7106868, 2.0545938, 2.1860017, 2.2… #> $ logfc.rank             <dbl> 2, 1, 8, 7, 4, 6, 52, 3, 5, 9, 31, 61, 23, 14, … #> $ sca.LRscore            <dbl> 0.8693937, 0.8985606, 0.8343680, 0.8815981, 0.8… #> $ sca.rank               <dbl> 109, 52, 193, 86, 142, 69, 34, 37, 80, 132, 422… #> $ cellphonedb.pvalue     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ cellphonedb.rank       <dbl> 76.5, 76.5, 76.5, 76.5, 76.5, 76.5, 76.5, 76.5,…"},{"path":"/articles/liana_tutorial.html","id":"simple-dotplot","dir":"Articles","previous_headings":"liana: Intro","what":"Simple DotPlot","title":"LIANA Tutorial","text":"now plot results. default, use LRscore SingleCellSignalR represent magnitude expression ligand receptor, NATMI’s specificity weights show specific given interaction source(L) target(R) cell types. Note top 20 interactions (ntop), defined unique ligand-receptors ordered consequentially, regardless cell types. Done subsequent filtering source_groups target_groups interest. case, plot interactions B cells source (express ~ligands) 3 cell types target cell types (express ~receptors). default, liana_aggregate order LIANA’s output according rank_aggregate ascending order. Note using liana_dotplot /w ntop assumes liana’s results ranked accordingly! Refer rank_method, wish easily rank interactions single method (see example ).  Note missing dots interactions expressed least 10% cells (default) cell clusters. case, consider specificity interactions defined NATMI’s edge specificity weights. NATMI’s specificity edges range 0 1, 1 means ligand receptor uniquely expressed given pair cells. Expression magnitude, represented SingleCellExperiment’s LRScore, hand, meant represent non-negative regularized score, comparable datasets.","code":"liana_test %>%   liana_dotplot(source_groups = c(\"B\"),                 target_groups = c(\"NK\", \"CD8 T\", \"B\"),                 ntop = 20)"},{"path":"/articles/liana_tutorial.html","id":"frequency-heatmap","dir":"Articles","previous_headings":"liana: Intro","what":"Frequency Heatmap","title":"LIANA Tutorial","text":"now plot frequencies interactions pair potentially communicating cell types. heatmap inspired CellChat’s CellPhoneDB’s heatmap designs. First, filter interactions aggregate_rank, can treated p-value robustly, highly ranked interactions. Nevertheless, one can also filter according CPDB’s p-value (<=0.05) SingleCellExperiments LRScore, etc.  , see NK-CD8 T share relatively large number inferred interactions, many send NK - note large sum interactions (gray barplot) NK Sender. NB! , assumption implied number interactions inferred cell types informative communication events occurring system. rather strong assumption one consider prior making conclusions. suggestion conclusions complimented information, biological prior knowledge, spatial information, etc.","code":"liana_trunc <- liana_test %>%    # only keep interactions concordant between methods   filter(aggregate_rank <= 0.01) # note that these pvals are already corrected  heat_freq(liana_trunc)"},{"path":"/articles/liana_tutorial.html","id":"frequency-chord-diagram","dir":"Articles","previous_headings":"liana: Intro","what":"Frequency Chord diagram","title":"LIANA Tutorial","text":", generate chord diagram equivalent frequencies heatmap. First, make sure circlize package installed. case, one choose source target cell type groups wish plot.  advanced visualization options, kindly refer user SCPubr.","code":"if(!require(\"circlize\")){   install.packages(\"circlize\", quiet = TRUE,                    repos = \"http://cran.us.r-project.org\") } #> Loading required package: circlize #> ======================================== #> circlize version 0.4.15 #> CRAN page: https://cran.r-project.org/package=circlize #> Github page: https://github.com/jokergoo/circlize #> Documentation: https://jokergoo.github.io/circlize_book/book/ #>  #> If you use it in published research, please cite: #> Gu, Z. circlize implements and enhances circular visualization #>   in R. Bioinformatics 2014. #>  #> This message can be suppressed by: #>   suppressPackageStartupMessages(library(circlize)) #> ======================================== p <- chord_freq(liana_trunc,                 source_groups = c(\"CD8 T\", \"NK\", \"B\"),                 target_groups = c(\"CD8 T\", \"NK\", \"B\"))"},{"path":"/articles/liana_tutorial.html","id":"run-any-method-of-choice-","dir":"Articles","previous_headings":"liana: Intro","what":"Run any method of choice.","title":"LIANA Tutorial","text":"now run CellPhoneDB’s permutation-based algorithm. also lower number permutations wish perform sake computational time. Note one can also parallelize CPDB algorithm implemented LIANA (case don’t, make sense working large datasets). Also, use SingleCellExperiment object input. reality, LIANA converts Seurat objects SingleCellExperiment large extend based BioConductor single-cell infrastructure.","code":"# Load Sce testdata sce <- readRDS(file.path(liana_path , \"testdata\", \"input\", \"testsce.rds\"))  # RUN CPDB alone cpdb_test <- liana_wrap(sce,                         method = 'cellphonedb',                         resource = c('CellPhoneDB'),                         permutation.params = list(nperms=100,                                                   parallelize=FALSE,                                                   workers=4),                         expr_prop=0.05)  # identify interactions of interest cpdb_int <- cpdb_test %>%   # only keep interactions with p-val <= 0.05   filter(pvalue <= 0.05) %>% # this reflects interactions `specificity`   # then rank according to `magnitude` (lr_mean in this case)   rank_method(method_name = \"cellphonedb\",               mode = \"magnitude\") %>%   # keep top 20 interactions (regardless of cell type)   distinct_at(c(\"ligand.complex\", \"receptor.complex\")) %>%   head(20)    # Plot toy results cpdb_test %>%   # keep only the interactions of interest   inner_join(cpdb_int,               by = c(\"ligand.complex\", \"receptor.complex\")) %>%   # invert size (low p-value/high specificity = larger dot size)   # + add a small value to avoid Infinity for 0s   mutate(pvalue = -log10(pvalue + 1e-10)) %>%    liana_dotplot(source_groups = c(\"c\"),                 target_groups = c(\"c\", \"a\", \"b\"),                 specificity = \"pvalue\",                 magnitude = \"lr.mean\",                 show_complex = TRUE,                 size.label = \"-log10(p-value)\")"},{"path":"/articles/liana_tutorial.html","id":"singlecellsignalr-cytotalk-natmi-and-connectome-scores-w-complexes","dir":"Articles","previous_headings":"liana: Intro","what":"SingleCellSignalR, CytoTalk, NATMI, and Connectome scores /w Complexes","title":"LIANA Tutorial","text":"re-implementation aforementioned methods LIANA enables us make use multimeric complex information provided e.g. CellPhoneDB, CellChatDB, ICELLNET resources","code":"# Run liana re-implementations with the CellPhoneDB resource complex_test <- liana_wrap(testdata,                            method = c('natmi', 'sca', 'logfc'),                            resource = c('CellPhoneDB')) #> Warning in exec(output, ...): 3465 genes and/or 0 cells were removed as they had #> no counts!  complex_test %>% liana_aggregate() #> # A tibble: 172 × 12 #>    source target ligan…¹ recep…² aggre…³ mean_…⁴ natmi…⁵ natmi…⁶ sca.L…⁷ sca.r…⁸ #>    <chr>  <chr>  <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 NK     B      MIF     CD74    3.03e-4    24     0.202      70   0.925       1 #>  2 CD8 T  CD8 T  LCK     CD8A_C… 2.41e-3    10     0.409      10   0.859      16 #>  3 CD8 T  B      MIF     CD74    2.71e-3    34.7   0.157      99   0.915       2 #>  4 NK     NK     HLA-C   KIR2DL3 5.46e-3    19.3   0.367      18   0.841      19 #>  5 B      B      MIF     CD74    7.46e-3    39     0.140     109   0.911       3 #>  6 NK     NK     HLA-E   KLRC1_… 1.07e-2    19.3   0.275      46   0.894       6 #>  7 NK     CD8 T  CD58    CD2     1.45e-2    30     0.449       6   0.734      77 #>  8 NK     B      PTPRC   CD22    2.53e-2    29     0.321      27   0.812      35 #>  9 CD8 T  B      PTPRC   CD22    2.75e-2    30.3   0.319      28   0.811      36 #> 10 CD8 T  NK     HLA-E   KLRC1_… 2.92e-2    22     0.262      49   0.892       7 #> # … with 162 more rows, 2 more variables: logfc.logfc_comb <dbl>, #> #   logfc.rank <dbl>, and abbreviated variable names ¹​ligand.complex, #> #   ²​receptor.complex, ³​aggregate_rank, ⁴​mean_rank, ⁵​natmi.edge_specificity, #> #   ⁶​natmi.rank, ⁷​sca.LRscore, ⁸​sca.rank #> # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names"},{"path":"/articles/liana_tutorial.html","id":"call-liana-with-overwritten-default-settings","dir":"Articles","previous_headings":"liana: Intro","what":"Call liana with overwritten default settings","title":"LIANA Tutorial","text":"default liana run default method can obtained via liana_default() Alternatively, one can also overwrite default settings simply passing liana wrapper function Note liana_call.params one can change way account complexes. default set mean subunits complex (done expression CellPhoneDB/Squidpy), return subunit closest mean. change geometric_mean, alternative function can passed perfectly viable approaches also include e.g. Trimean CellChat. Please refer ?liana_wrap documentation information parameters can tuned liana. Also, one can obtain list default parameters calling liana_defaults() function.","code":"# define geometric mean geometric_mean <- function(vec){exp(mean(log(vec)))}  # Overwrite default parameters by providing a list of parameters liana_test <- liana_wrap(testdata,                          method = c('cellphonedb', 'sca'),                          resource = 'Consensus',                          permutation.params =                             list(                              nperms = 10 # here we run cpdb it only with 10 permutations                              ),                          complex_policy=\"geometric_mean\"                          ) #> Warning in exec(output, ...): 3465 genes and/or 0 cells were removed as they had #> no counts!  # This returns a list of results for each method liana_test %>% dplyr::glimpse() #> List of 2 #>  $ cellphonedb: tibble [735 × 12] (S3: tbl_df/tbl/data.frame) #>   ..$ source          : chr [1:735] \"B\" \"B\" \"B\" \"B\" ... #>   ..$ target          : chr [1:735] \"B\" \"B\" \"B\" \"B\" ... #>   ..$ ligand.complex  : chr [1:735] \"LGALS9\" \"LGALS9\" \"LGALS9\" \"ADAM10\" ... #>   ..$ ligand          : chr [1:735] \"LGALS9\" \"LGALS9\" \"LGALS9\" \"ADAM10\" ... #>   ..$ receptor.complex: chr [1:735] \"PTPRC\" \"CD44\" \"CD47\" \"CD44\" ... #>   ..$ receptor        : chr [1:735] \"PTPRC\" \"CD44\" \"CD47\" \"CD44\" ... #>   ..$ receptor.prop   : num [1:735] 0.567 0.433 0.5 0.433 0.267 ... #>   ..$ ligand.prop     : num [1:735] 0.233 0.233 0.233 0.1 1 ... #>   ..$ ligand.expr     : num [1:735] 0.374 0.374 0.374 0.12 2.914 ... #>   ..$ receptor.expr   : num [1:735] 0.762 0.655 0.661 0.655 0.499 ... #>   ..$ lr.mean         : num [1:735] 0.568 0.515 0.518 0.388 1.706 ... #>   ..$ pvalue          : num [1:735] 0.9 0.3 0 0.5 1 1 1 1 1 1 ... #>  $ sca        : tibble [735 × 12] (S3: tbl_df/tbl/data.frame) #>   ..$ source          : chr [1:735] \"B\" \"B\" \"B\" \"B\" ... #>   ..$ target          : chr [1:735] \"B\" \"B\" \"B\" \"B\" ... #>   ..$ ligand.complex  : chr [1:735] \"LGALS9\" \"LGALS9\" \"LGALS9\" \"ADAM10\" ... #>   ..$ ligand          : chr [1:735] \"LGALS9\" \"LGALS9\" \"LGALS9\" \"ADAM10\" ... #>   ..$ receptor.complex: chr [1:735] \"PTPRC\" \"CD44\" \"CD47\" \"CD44\" ... #>   ..$ receptor        : chr [1:735] \"PTPRC\" \"CD44\" \"CD47\" \"CD44\" ... #>   ..$ receptor.prop   : num [1:735] 0.567 0.433 0.5 0.433 0.267 ... #>   ..$ ligand.prop     : num [1:735] 0.233 0.233 0.233 0.1 1 ... #>   ..$ ligand.expr     : num [1:735] 0.374 0.374 0.374 0.12 2.914 ... #>   ..$ receptor.expr   : num [1:735] 0.762 0.655 0.661 0.655 0.499 ... #>   ..$ global_mean     : num [1:735] 0.199 0.199 0.199 0.199 0.199 ... #>   ..$ LRscore         : num [1:735] 0.728 0.713 0.714 0.585 0.858 ..."},{"path":"/articles/liana_tutorial.html","id":"citation","dir":"Articles","previous_headings":"liana: Intro","what":"Citation","title":"LIANA Tutorial","text":"","code":"#>  #> To cite liana in publications use: #>  #>   Dimitrov, D., Türei, D., Garrido-Rodriguez M., Burmedi P.L., Nagai, #>   J.S., Boys, C., Flores, R.O.R., Kim, H., Szalai, B., Costa, I.G., #>   Valdeolivas, A., Dugourd, A. and Saez-Rodriguez, J. Comparison of #>   methods and resources for cell-cell communication inference from #>   single-cell RNA-Seq data. Nat Commun 13, 3224 (2022). #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     author = {Daniel Dimitrov and Denes Turei and Martin Garrido-Rodriguez and Paul Burmedi L. and James Nagai S. and Charlotte Boys and Ricardo Ramirez Flores O. and Hyojin Kim and Bence Szalai and Ivan Costa G. and Alberto Valdeolivas and Aurélien Dugourd and Julio Saez-Rodriguez}, #>     title = {Comparison of methods and resources for cell-cell communication inference from single-cell RNA-Seq data}, #>     journal = {Nature Communications}, #>     year = {2022}, #>     doi = {10.1038/s41467-022-30755-0}, #>     encoding = {UTF-8}, #>   }"},{"path":"/articles/liana_tutorial.html","id":"session-information","dir":"Articles","previous_headings":"liana: Intro","what":"Session information","title":"LIANA Tutorial","text":"","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.1.2 (2021-11-01) #>  os       Ubuntu 20.04.5 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       Europe/Berlin #>  date     2023-02-23 #>  pandoc   2.18 @ /home/dbdimitrov/anaconda3/envs/liana4.1/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package              * version  date (UTC) lib source #>  abind                  1.4-5    2016-07-21 [2] CRAN (R 4.1.2) #>  assertthat             0.2.1    2019-03-21 [2] CRAN (R 4.1.2) #>  backports              1.4.1    2021-12-13 [2] CRAN (R 4.1.2) #>  basilisk               1.9.12   2022-10-31 [2] Github (LTLA/basilisk@e185224) #>  basilisk.utils         1.9.4    2022-10-31 [2] Github (LTLA/basilisk.utils@b3ab58d) #>  beachmat               2.10.0   2021-10-26 [2] Bioconductor #>  beeswarm               0.4.0    2021-06-01 [2] CRAN (R 4.1.2) #>  Biobase                2.54.0   2021-10-26 [2] Bioconductor #>  BiocGenerics           0.40.0   2021-10-26 [2] Bioconductor #>  BiocManager            1.30.18  2022-05-18 [2] CRAN (R 4.1.2) #>  BiocNeighbors          1.12.0   2021-10-26 [2] Bioconductor #>  BiocParallel           1.28.3   2021-12-09 [2] Bioconductor #>  BiocSingular           1.10.0   2021-10-26 [2] Bioconductor #>  BiocStyle            * 2.22.0   2021-10-26 [2] Bioconductor #>  bitops                 1.0-7    2021-04-24 [2] CRAN (R 4.1.2) #>  bluster                1.4.0    2021-10-26 [2] Bioconductor #>  bookdown               0.27     2022-06-14 [2] CRAN (R 4.1.2) #>  broom                  1.0.0    2022-07-01 [2] CRAN (R 4.1.2) #>  bslib                  0.4.0    2022-07-16 [2] CRAN (R 4.1.2) #>  cachem                 1.0.6    2021-08-19 [2] CRAN (R 4.1.2) #>  cellranger             1.1.0    2016-07-27 [2] CRAN (R 4.1.2) #>  checkmate              2.1.0    2022-04-21 [2] CRAN (R 4.1.2) #>  circlize             * 0.4.15   2022-05-10 [2] CRAN (R 4.1.2) #>  cli                    3.6.0    2023-01-09 [2] CRAN (R 4.1.2) #>  clue                   0.3-61   2022-05-30 [2] CRAN (R 4.1.2) #>  cluster                2.1.3    2022-03-28 [2] CRAN (R 4.1.2) #>  codetools              0.2-18   2020-11-04 [2] CRAN (R 4.1.2) #>  colorspace             2.0-3    2022-02-21 [2] CRAN (R 4.1.2) #>  ComplexHeatmap         2.10.0   2021-10-26 [2] Bioconductor #>  cowplot                1.1.1    2020-12-30 [2] CRAN (R 4.1.2) #>  crayon                 1.5.1    2022-03-26 [2] CRAN (R 4.1.2) #>  curl                   4.3.2    2021-06-23 [2] CRAN (R 4.1.0) #>  data.table             1.14.2   2021-09-27 [2] CRAN (R 4.1.2) #>  DBI                    1.1.3    2022-06-18 [2] CRAN (R 4.1.2) #>  dbplyr                 2.2.1    2022-06-27 [2] CRAN (R 4.1.2) #>  DelayedArray           0.20.0   2021-10-26 [2] Bioconductor #>  DelayedMatrixStats     1.16.0   2021-10-26 [2] Bioconductor #>  deldir                 1.0-6    2021-10-23 [2] CRAN (R 4.1.2) #>  desc                   1.4.1    2022-03-06 [2] CRAN (R 4.1.2) #>  digest                 0.6.29   2021-12-01 [2] CRAN (R 4.1.1) #>  dir.expiry             1.2.0    2021-10-26 [2] Bioconductor #>  doParallel             1.0.17   2022-02-07 [2] CRAN (R 4.1.2) #>  dplyr                * 1.0.9    2022-04-28 [2] CRAN (R 4.1.2) #>  dqrng                  0.3.0    2021-05-01 [2] CRAN (R 4.1.2) #>  edgeR                  3.36.0   2021-10-26 [2] Bioconductor #>  ellipsis               0.3.2    2021-04-29 [2] CRAN (R 4.1.2) #>  evaluate               0.15     2022-02-18 [2] CRAN (R 4.1.2) #>  fansi                  1.0.3    2022-03-24 [2] CRAN (R 4.1.2) #>  farver                 2.1.1    2022-07-06 [2] CRAN (R 4.1.2) #>  fastmap                1.1.0    2021-01-25 [2] CRAN (R 4.1.2) #>  filelock               1.0.2    2018-10-05 [2] CRAN (R 4.1.2) #>  fitdistrplus           1.1-8    2022-03-10 [2] CRAN (R 4.1.2) #>  forcats              * 0.5.1    2021-01-27 [2] CRAN (R 4.1.2) #>  foreach                1.5.2    2022-02-02 [2] CRAN (R 4.1.2) #>  fs                     1.5.2    2021-12-08 [2] CRAN (R 4.1.2) #>  future                 1.27.0   2022-07-22 [2] CRAN (R 4.1.2) #>  future.apply           1.9.0    2022-04-25 [2] CRAN (R 4.1.2) #>  gargle                 1.2.0    2021-07-02 [2] CRAN (R 4.1.2) #>  generics               0.1.3    2022-07-05 [2] CRAN (R 4.1.2) #>  GenomeInfoDb           1.30.1   2022-01-30 [2] Bioconductor #>  GenomeInfoDbData       1.2.7    2022-01-26 [2] Bioconductor #>  GenomicRanges          1.46.1   2021-11-18 [2] Bioconductor #>  GetoptLong             1.0.5    2020-12-15 [2] CRAN (R 4.1.2) #>  ggbeeswarm             0.6.0    2017-08-07 [2] CRAN (R 4.1.2) #>  ggplot2              * 3.3.6    2022-05-03 [2] CRAN (R 4.1.2) #>  ggrepel                0.9.1    2021-01-15 [2] CRAN (R 4.1.2) #>  ggridges               0.5.3    2021-01-08 [2] CRAN (R 4.1.2) #>  GlobalOptions          0.1.2    2020-06-10 [2] CRAN (R 4.1.2) #>  globals                0.15.1   2022-06-24 [2] CRAN (R 4.1.2) #>  glue                   1.6.2    2022-02-24 [2] CRAN (R 4.1.2) #>  goftest                1.2-3    2021-10-07 [2] CRAN (R 4.1.2) #>  googledrive            2.0.0    2021-07-08 [2] CRAN (R 4.1.2) #>  googlesheets4          1.0.0    2021-07-21 [2] CRAN (R 4.1.2) #>  gridExtra              2.3      2017-09-09 [2] CRAN (R 4.1.2) #>  gtable                 0.3.0    2019-03-25 [2] CRAN (R 4.1.2) #>  haven                  2.5.0    2022-04-15 [2] CRAN (R 4.1.2) #>  highr                  0.9      2021-04-16 [2] CRAN (R 4.1.2) #>  hms                    1.1.1    2021-09-26 [2] CRAN (R 4.1.2) #>  htmltools              0.5.3    2022-07-18 [2] CRAN (R 4.1.2) #>  htmlwidgets            1.5.4    2021-09-08 [2] CRAN (R 4.1.2) #>  httpuv                 1.6.5    2022-01-05 [2] CRAN (R 4.1.2) #>  httr                   1.4.3    2022-05-04 [2] CRAN (R 4.1.2) #>  ica                    1.0-3    2022-07-08 [2] CRAN (R 4.1.2) #>  igraph                 1.3.0    2022-04-01 [2] CRAN (R 4.1.3) #>  IRanges                2.28.0   2021-10-26 [2] Bioconductor #>  irlba                  2.3.5    2021-12-06 [2] CRAN (R 4.1.2) #>  iterators              1.0.14   2022-02-05 [2] CRAN (R 4.1.2) #>  jquerylib              0.1.4    2021-04-26 [2] CRAN (R 4.1.2) #>  jsonlite               1.8.0    2022-02-22 [2] CRAN (R 4.1.2) #>  KernSmooth             2.23-20  2021-05-03 [2] CRAN (R 4.1.2) #>  knitr                  1.39     2022-04-26 [2] CRAN (R 4.1.2) #>  labeling               0.4.2    2020-10-20 [2] CRAN (R 4.1.2) #>  later                  1.3.0    2021-08-18 [2] CRAN (R 4.1.2) #>  lattice                0.20-45  2021-09-22 [2] CRAN (R 4.1.1) #>  lazyeval               0.2.2    2019-03-15 [2] CRAN (R 4.1.2) #>  leiden                 0.4.2    2022-05-09 [2] CRAN (R 4.1.2) #>  liana                * 0.1.12   2023-02-23 [1] Bioconductor #>  lifecycle              1.0.3    2022-10-07 [2] CRAN (R 4.1.2) #>  limma                  3.50.3   2022-04-07 [2] Bioconductor #>  listenv                0.8.0    2019-12-05 [2] CRAN (R 4.1.2) #>  lmtest                 0.9-40   2022-03-21 [2] CRAN (R 4.1.2) #>  locfit                 1.5-9.6  2022-07-11 [2] CRAN (R 4.1.2) #>  logger                 0.2.2    2021-10-19 [2] CRAN (R 4.1.2) #>  lubridate              1.8.0    2021-10-07 [2] CRAN (R 4.1.2) #>  magick                 2.7.3    2021-08-18 [2] CRAN (R 4.1.1) #>  magrittr             * 2.0.3    2022-03-30 [2] CRAN (R 4.1.3) #>  MASS                   7.3-58   2022-07-14 [2] CRAN (R 4.1.2) #>  Matrix                 1.4-1    2022-03-23 [2] CRAN (R 4.1.2) #>  MatrixGenerics         1.6.0    2021-10-26 [2] Bioconductor #>  matrixStats            0.62.0   2022-04-19 [2] CRAN (R 4.1.2) #>  memoise                2.0.1    2021-11-26 [2] CRAN (R 4.1.2) #>  metapod                1.2.0    2021-10-26 [2] Bioconductor #>  mgcv                   1.8-40   2022-03-29 [2] CRAN (R 4.1.2) #>  mime                   0.12     2021-09-28 [2] CRAN (R 4.1.2) #>  miniUI                 0.1.1.1  2018-05-18 [2] CRAN (R 4.1.2) #>  modelr                 0.1.8    2020-05-19 [2] CRAN (R 4.1.2) #>  munsell                0.5.0    2018-06-12 [2] CRAN (R 4.1.2) #>  nlme                   3.1-158  2022-06-15 [2] CRAN (R 4.1.2) #>  OmnipathR              3.7.2    2023-02-19 [2] Github (saezlab/OmnipathR@c5f63b4) #>  parallelly             1.32.1   2022-07-21 [2] CRAN (R 4.1.2) #>  patchwork              1.1.1    2020-12-17 [2] CRAN (R 4.1.2) #>  pbapply                1.5-0    2021-09-16 [2] CRAN (R 4.1.2) #>  pillar                 1.8.0    2022-07-18 [2] CRAN (R 4.1.2) #>  pkgconfig              2.0.3    2019-09-22 [2] CRAN (R 4.1.0) #>  pkgdown                2.0.6    2022-07-16 [2] CRAN (R 4.1.2) #>  plotly                 4.10.0   2021-10-09 [2] CRAN (R 4.1.2) #>  plyr                   1.8.7    2022-03-24 [2] CRAN (R 4.1.2) #>  png                    0.1-7    2013-12-03 [2] CRAN (R 4.1.0) #>  polyclip               1.10-0   2019-03-14 [2] CRAN (R 4.1.2) #>  prettyunits            1.1.1    2020-01-24 [2] CRAN (R 4.1.2) #>  progress               1.2.2    2019-05-16 [2] CRAN (R 4.1.2) #>  progressr              0.10.1   2022-06-03 [2] CRAN (R 4.1.2) #>  promises               1.2.0.1  2021-02-11 [2] CRAN (R 4.1.2) #>  purrr                * 0.3.4    2020-04-17 [2] CRAN (R 4.1.0) #>  R6                     2.5.1    2021-08-19 [2] CRAN (R 4.1.2) #>  ragg                   1.2.2    2022-02-21 [2] CRAN (R 4.1.2) #>  RANN                   2.6.1    2019-01-08 [2] CRAN (R 4.1.2) #>  rappdirs               0.3.3    2021-01-31 [2] CRAN (R 4.1.2) #>  RColorBrewer           1.1-3    2022-04-03 [2] CRAN (R 4.1.2) #>  Rcpp                   1.0.8.3  2022-03-17 [2] CRAN (R 4.1.2) #>  RcppAnnoy              0.0.19   2021-07-30 [2] CRAN (R 4.1.2) #>  RCurl                  1.98-1.7 2022-06-09 [2] CRAN (R 4.1.2) #>  readr                * 2.1.2    2022-01-30 [2] CRAN (R 4.1.2) #>  readxl                 1.4.0    2022-03-28 [2] CRAN (R 4.1.2) #>  reprex                 2.0.1    2021-08-05 [2] CRAN (R 4.1.2) #>  reshape2               1.4.4    2020-04-09 [2] CRAN (R 4.1.2) #>  reticulate             1.25     2022-05-11 [2] CRAN (R 4.1.2) #>  rgeos                  0.5-9    2021-12-15 [2] CRAN (R 4.1.2) #>  rjson                  0.2.21   2022-01-09 [2] CRAN (R 4.1.2) #>  rlang                  1.0.6    2022-09-24 [2] CRAN (R 4.1.2) #>  rmarkdown              2.14     2022-04-25 [2] CRAN (R 4.1.2) #>  ROCR                   1.0-11   2020-05-02 [2] CRAN (R 4.1.2) #>  rpart                  4.1.16   2022-01-24 [2] CRAN (R 4.1.2) #>  rprojroot              2.0.3    2022-04-02 [2] CRAN (R 4.1.2) #>  rstudioapi             0.13     2020-11-12 [2] CRAN (R 4.1.2) #>  rsvd                   1.0.5    2021-04-16 [2] CRAN (R 4.1.2) #>  Rtsne                  0.16     2022-04-17 [2] CRAN (R 4.1.2) #>  rvest                  1.0.2    2021-10-16 [2] CRAN (R 4.1.2) #>  S4Vectors              0.32.4   2022-03-24 [2] Bioconductor #>  sass                   0.4.2    2022-07-16 [2] CRAN (R 4.1.2) #>  ScaledMatrix           1.2.0    2021-10-26 [2] Bioconductor #>  scales                 1.2.0    2022-04-13 [2] CRAN (R 4.1.2) #>  scater                 1.22.0   2021-10-26 [2] Bioconductor #>  scattermore            0.8      2022-02-14 [2] CRAN (R 4.1.2) #>  scran                  1.22.1   2021-11-14 [2] Bioconductor #>  sctransform            0.3.3    2022-01-13 [2] CRAN (R 4.1.2) #>  scuttle                1.4.0    2021-10-26 [2] Bioconductor #>  sessioninfo            1.2.2    2021-12-06 [2] CRAN (R 4.1.2) #>  Seurat                 4.1.1    2022-05-02 [2] CRAN (R 4.1.2) #>  SeuratObject           4.1.0    2022-05-01 [2] CRAN (R 4.1.2) #>  shape                  1.4.6    2021-05-19 [2] CRAN (R 4.1.2) #>  shiny                  1.7.2    2022-07-19 [2] CRAN (R 4.1.2) #>  SingleCellExperiment   1.16.0   2021-10-26 [2] Bioconductor #>  sp                     1.5-0    2022-06-05 [2] CRAN (R 4.1.3) #>  sparseMatrixStats      1.6.0    2021-10-26 [2] Bioconductor #>  spatstat.core          2.4-4    2022-05-18 [2] CRAN (R 4.1.2) #>  spatstat.data          3.0-0    2022-10-21 [2] CRAN (R 4.1.2) #>  spatstat.geom          3.0-3    2022-10-25 [2] CRAN (R 4.1.2) #>  spatstat.random        3.0-1    2022-11-03 [2] CRAN (R 4.1.2) #>  spatstat.sparse        3.0-0    2022-10-21 [2] CRAN (R 4.1.2) #>  spatstat.utils         3.0-1    2022-10-19 [2] CRAN (R 4.1.2) #>  statmod                1.4.36   2021-05-10 [2] CRAN (R 4.1.2) #>  stringi                1.7.6    2021-11-29 [2] CRAN (R 4.1.1) #>  stringr              * 1.4.0    2019-02-10 [2] CRAN (R 4.1.0) #>  SummarizedExperiment   1.24.0   2021-10-26 [2] Bioconductor #>  survival               3.3-1    2022-03-03 [2] CRAN (R 4.1.2) #>  systemfonts            1.0.4    2022-02-11 [2] CRAN (R 4.1.2) #>  tensor                 1.5      2012-05-05 [2] CRAN (R 4.1.2) #>  textshaping            0.3.6    2021-10-13 [2] CRAN (R 4.1.2) #>  tibble               * 3.1.8    2022-07-22 [2] CRAN (R 4.1.2) #>  tidyr                * 1.2.0    2022-02-01 [2] CRAN (R 4.1.2) #>  tidyselect             1.2.0    2022-10-10 [2] CRAN (R 4.1.2) #>  tidyverse            * 1.3.2    2022-07-18 [2] CRAN (R 4.1.2) #>  tzdb                   0.3.0    2022-03-28 [2] CRAN (R 4.1.2) #>  utf8                   1.2.2    2021-07-24 [2] CRAN (R 4.1.2) #>  uwot                   0.1.11   2021-12-02 [2] CRAN (R 4.1.2) #>  vctrs                  0.4.1    2022-04-13 [2] CRAN (R 4.1.2) #>  vipor                  0.4.5    2017-03-22 [2] CRAN (R 4.1.2) #>  viridis                0.6.2    2021-10-13 [2] CRAN (R 4.1.2) #>  viridisLite            0.4.0    2021-04-13 [2] CRAN (R 4.1.2) #>  withr                  2.5.0    2022-03-03 [2] CRAN (R 4.1.2) #>  xfun                   0.31     2022-05-10 [2] CRAN (R 4.1.2) #>  xml2                   1.3.3    2021-11-30 [2] CRAN (R 4.1.2) #>  xtable                 1.8-4    2019-04-21 [2] CRAN (R 4.1.2) #>  XVector                0.34.0   2021-10-26 [2] Bioconductor #>  yaml                   2.3.5    2022-02-21 [2] CRAN (R 4.1.2) #>  zlibbioc               1.40.0   2021-10-26 [2] Bioconductor #>  zoo                    1.8-10   2022-04-15 [2] CRAN (R 4.1.2) #>  #>  [1] /tmp/RtmpoegRC1/temp_libpath6147141f79468 #>  [2] /home/dbdimitrov/anaconda3/envs/liana4.1/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Dimitrov. Maintainer, author. Charlotte Boys. Author. Martin Garrido Rodríguez. Author. Denes Turei. Author. James Nagai. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dimitrov, D., Türei, D., Garrido-Rodriguez M., Burmedi P.L., Nagai, J.S., Boys, C., Flores, R.O.R., Kim, H., Szalai, B., Costa, .G.,     Valdeolivas, ., Dugourd, . Saez-Rodriguez, J. Comparison methods resources cell-cell communication inference single-cell RNA-Seq     data. Nat Commun 13, 3224 (2022).","code":"@Article{,   author = {Daniel Dimitrov and Denes Turei and Martin Garrido-Rodriguez and Paul Burmedi L. and James Nagai S. and Charlotte Boys and Ricardo Ramirez Flores O. and Hyojin Kim and Bence Szalai and Ivan Costa G. and Alberto Valdeolivas and Aurélien Dugourd and Julio Saez-Rodriguez},   title = {Comparison of methods and resources for cell-cell communication inference from single-cell RNA-Seq data},   journal = {Nature Communications},   year = {2022},   doi = {10.1038/s41467-022-30755-0},   encoding = {UTF-8}, }"},{"path":"/index.html","id":"liana-a-ligand-receptor-analysis-framework-","dir":"","previous_headings":"","what":"LIANA: a LIgand-receptor ANalysis frAmework","title":"LIANA: a LIgand-receptor ANalysis frAmework","text":"LIANA enables use combination ligand-receptor methods resources, consensus. faster memory efficient Python implementation available .","code":""},{"path":"/index.html","id":"install-liana","dir":"","previous_headings":"","what":"Install LIANA","title":"LIANA: a LIgand-receptor ANalysis frAmework","text":"","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  if (!requireNamespace(\"remotes\", quietly = TRUE))     install.packages(\"remotes\")  remotes::install_github('saezlab/liana')"},{"path":"/index.html","id":"tutorial","dir":"","previous_headings":"","what":"Tutorial","title":"LIANA: a LIgand-receptor ANalysis frAmework","text":"See tutorial use LIANA run combination 7 methods, plus consensus, 16 different resources! tutorial test data takes minutes complete! Additional tutorials: LIANA across Conditions cell2cell-Tensor combine LIANA NicheNet make use OmniPathR’s intracellular component convert resources LIANA orthologs species LIANA developers benchmarks","code":""},{"path":"/index.html","id":"liana-framework","dir":"","previous_headings":"","what":"LIANA Framework","title":"LIANA: a LIgand-receptor ANalysis frAmework","text":"continuous developments single-cell RNA-Seq (scRNA-Seq) sparked immense interest understanding intercellular crosstalk. Multiple tools resources aid investigation cell-cell communication (CCC) published recently. However, methods resources usually fixed combination tool corresponding resource, principle resource combined method. end, built framework decouple methods corresponding resources. LIANA also goes step provides: robust extendable architecture aims accelerate method development benchmarks rank aggregate results different methods customizable plethora resources landingpage","code":""},{"path":"/index.html","id":"tools","dir":"","previous_headings":"","what":"Tools","title":"LIANA: a LIgand-receptor ANalysis frAmework","text":"tools implemented repository : CellPhoneDBv2 (*, $) CellChat NATMI (*, $) Connectome (edge_weights) (*, $) SingleCellSignalR (LRscores) (SCA) (*, $) iTALK-inspired 1-vs-rest LogFC score (logfc_comb) (*, $) CytoTalk-inspired cross-talk scores (*) consensus_rank predictions also provided using RobustRankAggregate method *scoring systems methods re-implemented LIANA order account multi-meric complexes, simplify calls individual pipelines, reduce possible inconsistencies redundancies downstream integration. wish run LIANA original tools please see LIANA++. $ Default methods LIANA.","code":""},{"path":[]},{"path":"/index.html","id":"cell-cell-communication-resources","dir":"","previous_headings":"Resources","what":"Cell-cell Communication resources","title":"LIANA: a LIgand-receptor ANalysis frAmework","text":"following CCC resources accessible via pipeline: Consensus CellCall CellChatDB CellPhoneDB Ramilowski2015 Baccin2019 LRdb Kiroauc2010 ICELLNET iTALK EMBRACE HPMR Guide2Pharma ConnectomeDB2020 CellTalkDB OmniPath [Deprecated]","code":""},{"path":"/index.html","id":"consensus-resource","dir":"","previous_headings":"Resources","what":"Consensus Resource","title":"LIANA: a LIgand-receptor ANalysis frAmework","text":"LIANA’s default resource generated Consensus several expert-curated resources, filtered additional quality control steps including literature support, complex re-union/consensus, localisation.","code":""},{"path":"/index.html","id":"omnipath","dir":"","previous_headings":"Resources","what":"OmniPath","title":"LIANA: a LIgand-receptor ANalysis frAmework","text":"resources retrieved OmniPath, specifically OmnipathR. However, individual resources retrieved OmniPath web service affected , resource expected identical original form, apart minor processing steps. OmniPath serves composite CCC resource combining ones listed + . OmniPath also collects information roles localisation proteins intercellular communication. made use information generate Consensus resource. obtain information filtered default Consensus resource, well explore custom filter options see customizing OmniPath resources.","code":""},{"path":"/index.html","id":"liana","dir":"","previous_headings":"","what":"LIANA++","title":"LIANA: a LIgand-receptor ANalysis frAmework","text":"interested making use LIANA architecture method, vignette provides instructions obtain comprehensive table LR statistics, can used custom scoring functions. vignette also instructions install run original methods via convenient R wrapper, e.g. benchmark.","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"LIANA: a LIgand-receptor ANalysis frAmework","text":"appreciate feedback, please hesitate open issue liana github page!","code":""},{"path":"/index.html","id":"news","dir":"","previous_headings":"","what":"NEWS","title":"LIANA: a LIgand-receptor ANalysis frAmework","text":"commited development LIANA refer users NEWS page!","code":""},{"path":"/index.html","id":"citing-liana","dir":"","previous_headings":"NEWS","what":"Citing LIANA:","title":"LIANA: a LIgand-receptor ANalysis frAmework","text":"Dimitrov, D., Türei, D., Garrido-Rodriguez M., Burmedi P.L., Nagai, J.S., Boys, C., Flores, R.O.R., Kim, H., Szalai, B., Costa, .G., Valdeolivas, ., Dugourd, . Saez-Rodriguez, J. Comparison methods resources cell-cell communication inference single-cell RNA-Seq data. Nat Commun 13, 3224 (2022). https://doi.org/10.1038/s41467-022-30755-0","code":""},{"path":"/index.html","id":"also-if-you-use-the-omnipath-ccc-resource-for-your-analysis-please-cite","dir":"","previous_headings":"NEWS > Citing LIANA:","what":"Also, if you use the OmniPath CCC Resource for your analysis, please cite:","title":"LIANA: a LIgand-receptor ANalysis frAmework","text":"Türei, D., Valdeolivas, ., Gul, L., Palacio‐Escat, N., Klein, M., Ivanova, O., Ölbei, M., Gábor, ., Theis, F., Módos, D. Korcsmáros, T., 2021. Integrated intra‐intercellular signaling knowledge multicellular omics analysis. Molecular systems biology, 17(3), p.e9923. https://doi.org/10.15252/msb.20209923","code":""},{"path":[]},{"path":"/reference/FormatConnectome.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to filter and format connectome — FormatConnectome","title":"Helper function to filter and format connectome — FormatConnectome","text":"Helper function filter format connectome","code":""},{"path":"/reference/FormatConnectome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to filter and format connectome — FormatConnectome","text":"","code":"FormatConnectome(conn)"},{"path":"/reference/FormatConnectome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to filter and format connectome — FormatConnectome","text":"conn connectome object","code":""},{"path":"/reference/FormatNatmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Load NATMI results from folder and format appropriately — FormatNatmi","title":"Load NATMI results from folder and format appropriately — FormatNatmi","text":"Load NATMI results folder format appropriately","code":""},{"path":"/reference/FormatNatmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load NATMI results from folder and format appropriately — FormatNatmi","text":"","code":"FormatNatmi(output_path, resource_names, .format = TRUE)"},{"path":"/reference/FormatNatmi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load NATMI results from folder and format appropriately — FormatNatmi","text":"output_path NATMI output path resource_names results resources load .format bool whether format output","code":""},{"path":"/reference/FormatNatmi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load NATMI results from folder and format appropriately — FormatNatmi","text":"list NATMI results per resource loaded output     directory.","code":""},{"path":"/reference/FormatSCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to format SingleCellSignalR results — FormatSCA","title":"Helper function to format SingleCellSignalR results — FormatSCA","text":"Helper function format SingleCellSignalR results","code":""},{"path":"/reference/FormatSCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to format SingleCellSignalR results — FormatSCA","text":"","code":"FormatSCA(sca_res, remove.na = TRUE)"},{"path":"/reference/FormatSCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to format SingleCellSignalR results — FormatSCA","text":"sca_res Unformatted SCA results remove.na bool whether filter SCA output","code":""},{"path":"/reference/FormatiTALK.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to Filter and format iTalk results — FormatiTALK","title":"Helper Function to Filter and format iTalk results — FormatiTALK","text":"Helper Function Filter format iTalk results","code":""},{"path":"/reference/FormatiTALK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Filter and format iTalk results — FormatiTALK","text":"","code":"FormatiTALK(italk_res, remove.na = TRUE)"},{"path":"/reference/FormatiTALK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Filter and format iTalk results — FormatiTALK","text":"italk_res iTalk results object remove.na bool whether filter NA","code":""},{"path":"/reference/ScoreSpecifics-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 Class used to generate aggregate/consesus scores for the methods. — ScoreSpecifics-class","title":"S4 Class used to generate aggregate/consesus scores for the methods. — ScoreSpecifics-class","text":"S4 Class used generate aggregate/consesus scores methods.","code":""},{"path":"/reference/ScoreSpecifics-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"S4 Class used to generate aggregate/consesus scores for the methods. — ScoreSpecifics-class","text":"method_name name method (e.g. cellchat) method_score interaction score provided method (typically score reflects specificity interaction) descending_order whether score interpreted descending order (.e. highest score interaction likely) score_fun name function call generate results columns columns required generate score","code":""},{"path":"/reference/assign_ligrecs.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to obtain distinct transmitter and receiver lists\nused in the resource comparison — assign_ligrecs","title":"Helper function to obtain distinct transmitter and receiver lists\nused in the resource comparison — assign_ligrecs","text":"Helper function obtain distinct transmitter receiver lists used resource comparison","code":""},{"path":"/reference/assign_ligrecs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to obtain distinct transmitter and receiver lists\nused in the resource comparison — assign_ligrecs","text":"","code":"assign_ligrecs(ligrec_list)"},{"path":"/reference/assign_ligrecs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to obtain distinct transmitter and receiver lists\nused in the resource comparison — assign_ligrecs","text":"ligrec_list e.g. ligrec$OmniPath","code":""},{"path":"/reference/assign_lr_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to assign weights — assign_lr_weights","title":"Helper function to assign weights — assign_lr_weights","text":"Helper function assign weights","code":""},{"path":"/reference/assign_lr_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to assign weights — assign_lr_weights","text":"","code":"assign_lr_weights(lrs, resource, entity = \"ligand\")"},{"path":"/reference/assign_lr_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to assign weights — assign_lr_weights","text":"lrs ligand_receptor tibble resource resource entity name entity","code":""},{"path":"/reference/calculate_gini.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate gini coefficients for source and target loadings — calculate_gini","title":"Function to calculate gini coefficients for source and target loadings — calculate_gini","text":"Function calculate gini coefficients source target loadings","code":""},{"path":"/reference/calculate_gini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate gini coefficients for source and target loadings — calculate_gini","text":"","code":"calculate_gini(loadings)"},{"path":"/reference/calculate_gini.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate gini coefficients for source and target loadings — calculate_gini","text":"loadings loadings dimension interest ('senders' 'receivers') formatted `format_c2c_factors`","code":""},{"path":"/reference/call_cellchat.html","id":null,"dir":"Reference","previous_headings":"","what":"Run CellChat with OmniPath function [[DEPRECATED]] — call_cellchat","title":"Run CellChat with OmniPath function [[DEPRECATED]] — call_cellchat","text":"Run CellChat OmniPath function [[DEPRECATED]]","code":""},{"path":"/reference/call_cellchat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run CellChat with OmniPath function [[DEPRECATED]] — call_cellchat","text":"","code":"call_cellchat(   sce,   op_resource,   .format = TRUE,   exclude_anns = c(),   nboot = 100,   assay = \"RNA\",   .seed = 1004,   .normalize = FALSE,   .do_parallel = FALSE,   .raw_use = TRUE,   expr_prop = 0,   organism = \"human\",   thresh = 1,   de_thresh = 0.05,   ... )"},{"path":"/reference/call_cellchat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run CellChat with OmniPath function [[DEPRECATED]] — call_cellchat","text":"sce Seurat object input op_resource OmniPath Intercell Resource DN .format bool whether format output exclude_anns Annotation criteria excluded nboot number bootstraps calculate p-value assay assay name (RNA default) .seed random seed .normalize # bool whether normalize non-normalized data .do_parallel whether parallelize .raw_use whether use raw data gene expression data projectected ppi (kept TRUE) expr_prop minimum proportion gene expression per cell type (0 default), yet perhaps one consider setting appropriate value 0 1, assumptions method communication coordinated cluster level. organism Obtain CellChatDB organism ('mouse' 'human') thresh p-value threshold (1 default) de_thresh diff expression genes p-value ... Arguments passed CellChat::subsetCommunication object CellChat object net Alternative input data frame least three columns defining cell-cell communication network (\"source\",\"target\",\"interaction_name\") slot.name slot name object: slot.name = \"net\" extracting inferred communications level ligands/receptors; slot.name = \"netP\" extracting inferred communications level signaling pathways sources.use vector giving index name source cell groups targets.use vector giving index name target cell groups. signaling character vector giving name signaling pathways interest pairLR.use data frame consisting one column named either \"interaction_name\" \"pathway_name\", defining interactions interest datasets select inferred cell-cell communications particular `datasets` inputing data frame `net` ligand.pvalues,ligand.logFC,ligand.pct.1,ligand.pct.2 set threshold ligand genes ligand.pvalues: threshold pvalues differential expression gene analysis (DEG) ligand.logFC: threshold logFoldChange DEG analysis; ligand.logFC > 0, keep upgulated genes; otherwise, kepp downregulated genes ligand.pct.1: threshold percent expressed genes defined 'positive' cell group. keep genes percent greater ligand.pct.1 ligand.pct.2: threshold percent expressed genes cells except defined 'positive' cell group receptor.pvalues,receptor.logFC,receptor.pct.1,receptor.pct.2 set threshold receptor genes","code":""},{"path":"/reference/call_cellchat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run CellChat with OmniPath function [[DEPRECATED]] — call_cellchat","text":"DF intercellular communication network","code":""},{"path":"/reference/call_cellchat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run CellChat with OmniPath function [[DEPRECATED]] — call_cellchat","text":"CellChat's objects lazily documented/exported thus   whole package imported.","code":""},{"path":"/reference/call_connectome.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to call connectome with databases from OmniPath [[DEPRECATED]] — call_connectome","title":"Function to call connectome with databases from OmniPath [[DEPRECATED]] — call_connectome","text":"Function call connectome databases OmniPath [[DEPRECATED]]","code":""},{"path":"/reference/call_connectome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to call connectome with databases from OmniPath [[DEPRECATED]] — call_connectome","text":"","code":"call_connectome(sce, op_resource = NULL, .format = TRUE, assay, ...)"},{"path":"/reference/call_connectome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to call connectome with databases from OmniPath [[DEPRECATED]] — call_connectome","text":"sce Seurat object input op_resource OmniPath Intercell Resource DN .format bool whether format output assay assay name ... dot params passed connectome","code":""},{"path":"/reference/call_connectome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to call connectome with databases from OmniPath [[DEPRECATED]] — call_connectome","text":"unfiltered connectome results df","code":""},{"path":"/reference/call_connectome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to call connectome with databases from OmniPath [[DEPRECATED]] — call_connectome","text":"Stats: 1) ‘weight_norm’ edge attribute derived normalized expression  ligand receptor single-cell data. 2) ‘weight_scale’ edge attribute derived z-scores ligand  receptor edge, higher value ligand receptor   specific given pair cell types 3) DEG p-values L R","code":""},{"path":"/reference/call_italk.html","id":null,"dir":"Reference","previous_headings":"","what":"Run iTALK with OmniPath data [[DEPRECATED]] — call_italk","title":"Run iTALK with OmniPath data [[DEPRECATED]] — call_italk","text":"Run iTALK OmniPath data [[DEPRECATED]]","code":""},{"path":"/reference/call_italk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run iTALK with OmniPath data [[DEPRECATED]] — call_italk","text":"","code":"call_italk(sce, op_resource, assay = \"RNA\", .format = TRUE, ...)"},{"path":"/reference/call_italk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run iTALK with OmniPath data [[DEPRECATED]] — call_italk","text":"sce Seurat object SingleCellExperiment input op_resource OmniPath Intercell Resource DN assay assay use Seurat object .format bool: whether format output ... Parameters passed Seurat FindMarkers (ref requires import)","code":""},{"path":"/reference/call_italk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run iTALK with OmniPath data [[DEPRECATED]] — call_italk","text":"unfiltered iTALK df sorted relevance case, use product logFC rather thresholding, original implementation.","code":""},{"path":"/reference/call_italk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run iTALK with OmniPath data [[DEPRECATED]] — call_italk","text":"order comparable remainder methods, calculate mean ligand receptor logFC. original implementation uses DE genes certain logFC threshold.","code":""},{"path":"/reference/call_natmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Call NATMI Pipeline from R with Resources Querried from OmniPath [[DEPRECATED]] — call_natmi","title":"Call NATMI Pipeline from R with Resources Querried from OmniPath [[DEPRECATED]] — call_natmi","text":"Call NATMI Pipeline R Resources Querried OmniPath [[DEPRECATED]]","code":""},{"path":"/reference/call_natmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call NATMI Pipeline from R with Resources Querried from OmniPath [[DEPRECATED]] — call_natmi","text":"","code":"call_natmi(   sce,   op_resource,   expr_file = \"em.csv\",   meta_file = \"metadata.csv\",   output_dir = \"NATMI_test\",   reso_name = \"placeholder\",   assay = \"RNA\",   num_cor = 4,   conda_env = NULL,   assay.type = \"logcounts\",   .format = TRUE,   .overwrite_data = TRUE,   .seed = 1004,   .natmi_path = NULL,   .delete_input_output = FALSE )"},{"path":"/reference/call_natmi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call NATMI Pipeline from R with Resources Querried from OmniPath [[DEPRECATED]] — call_natmi","text":"sce Seurat SingleCellExperiment object op_resource List OmniPath resources expr_file expression matrix file name meta_file annotations (.e. clusters) file name output_dir NATMI output directory reso_name name resource usually format list(name = op_resource) assay Seurat assay used num_cor number cores used conda_env name conda environment via NATMI called assay.type logcounts default, converted back counts suggested authors .format bool whether format output .overwrite_data bool whether Extract overwrite csv data Seurat Object .seed random seed .natmi_path path NATMI code dbs (default set liana path) .delete_input_output logical whether delete input output run.","code":""},{"path":"/reference/call_natmi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call NATMI Pipeline from R with Resources Querried from OmniPath [[DEPRECATED]] — call_natmi","text":"DF NATMI results","code":""},{"path":"/reference/call_natmi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Call NATMI Pipeline from R with Resources Querried from OmniPath [[DEPRECATED]] — call_natmi","text":"function save NATMI dbs folder, call     NATMI Python NATMI dir save output specified     directory NATMI's path.     load csvs format output list lists. default, NATMI's path set LIANA, alternative     path can passed ============================================================================== NATMI Arguments:   --interDB INTERDB                         lrc2p (default) literature supported ligand-receptor pairs | lrc2a putative literature supported ligand-receptor pairs | user-supplied interaction database can also used calling name database file without extension   --interSpecies INTERSPECIES                         human (default) | mouse | expandp | expanda   --emFile EMFILE       path normalised expression matrix file row names (gene identifiers) column names (cell-type/single-cell identifiers)   --annFile ANNFILE     path metafile column one single-cell identifiers column two corresponding cluster IDs (see file 'toy.sc.ann.txt' example)   --species SPECIES     human (default) | mouse | rat | zebrafish | fruitfly | chimpanzee | dog | monkey | cattle | chicken | frog | mosquito | nematode | thalecress | rice | riceblastfungus | bakeryeast | neurosporacrassa | fissionyeast | eremotheciumgossypii | kluyveromyceslactis, 21 species supported   --idType IDTYPE       symbol (default) | entrez(https://www.ncbi.nlm.nih.gov/gene) | ensembl(https://www.ensembl.org/) | uniprot(https://www.uniprot.org/) | hgnc(https://www.genenames.org/) | mgi(http://www.informatics.jax.org/mgihome/nomen/index.shtml) | custom(gene identifier used expression matrix)   --coreNum CORENUM     number CPU cores used, default one   --            path save analysis results (Taken NATMI's GitHub Page) Stats: 1) mean-expression edge weights 2) specificity-based edge weights * weight 1 means ligand receptor expressed  one cell type Note `call_natmi` write expression matrix CSV time called, unless .overwrite_data set FALSE! can extremely time consuming step working large datasets Also, NATMI sometimes create duplicate files, please consider  saving run new folder. easy fix simply delete  output, reluctant automatically delete files via R script.","code":""},{"path":"/reference/call_sca.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to call SingleCellSignalR with databases from OmniPath [[DEPRECATED]] — call_sca","title":"Function to call SingleCellSignalR with databases from OmniPath [[DEPRECATED]] — call_sca","text":"Function call SingleCellSignalR databases OmniPath [[DEPRECATED]]","code":""},{"path":"/reference/call_sca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to call SingleCellSignalR with databases from OmniPath [[DEPRECATED]] — call_sca","text":"","code":"call_sca(   sce,   op_resource,   .format = TRUE,   assay = \"RNA\",   assay.type = \"logcounts\",   ... )"},{"path":"/reference/call_sca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to call SingleCellSignalR with databases from OmniPath [[DEPRECATED]] — call_sca","text":"sce SingleCellExperiment SeuratObject input op_resource OmniPath Intercell Resource DN .format bool whether format output assay Seurat assay data use assay.type count slot (logcounts default) ... arguments passed `SCAomni::cell_signaling`","code":""},{"path":"/reference/call_sca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to call SingleCellSignalR with databases from OmniPath [[DEPRECATED]] — call_sca","text":"unfiltered SCA tibble","code":""},{"path":"/reference/call_sca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to call SingleCellSignalR with databases from OmniPath [[DEPRECATED]] — call_sca","text":"Stats: LRScore = sqrt(LR product)/mean(raw counts) * sqrt(LR product) expression l > 0 r > 0 LRScore = 1 highest (~ likely hit), 0 lowest.","code":""},{"path":"/reference/call_squidpy.html","id":null,"dir":"Reference","previous_headings":"","what":"Call Squidpy Pipeline via reticulate with OmniPath and format results [[DEPRECATED]] — call_squidpy","title":"Call Squidpy Pipeline via reticulate with OmniPath and format results [[DEPRECATED]] — call_squidpy","text":"Call Squidpy Pipeline via reticulate OmniPath format results [[DEPRECATED]]","code":""},{"path":"/reference/call_squidpy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call Squidpy Pipeline via reticulate with OmniPath and format results [[DEPRECATED]] — call_squidpy","text":"","code":"call_squidpy(   sce,   op_resource,   seed = 1004,   conda_env = NULL,   assay = \"RNA\",   assay.type = \"logcounts\",   ... )"},{"path":"/reference/call_squidpy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call Squidpy Pipeline via reticulate with OmniPath and format results [[DEPRECATED]] — call_squidpy","text":"sce SingleCellExperiment Seurat Object input op_resource Tibble list OmniPath resources, typically obtained via select_resource seed seed passed squidpy's ligrec function conda_env python conda environment run Squidpy; set liana_env default assay assay name assay.type count slot (logcounts default) ... kwargs passed Squidpy; information see: https://squidpy.readthedocs.io/en/latest/api/squidpy.gr.ligrec.html#squidpy.gr.ligrec","code":""},{"path":"/reference/call_squidpy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call Squidpy Pipeline via reticulate with OmniPath and format results [[DEPRECATED]] — call_squidpy","text":"list Squidpy results resource","code":""},{"path":"/reference/call_squidpy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Call Squidpy Pipeline via reticulate with OmniPath and format results [[DEPRECATED]] — call_squidpy","text":"CellPhoneDBv2 algorithm re-implementation Python. Note `cluster_key` parameter passed Squidpy function, default set default Ident Seurat object.","code":""},{"path":"/reference/cellchat_formatDB.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to Format CellChatDB — cellchat_formatDB","title":"Helper Function to Format CellChatDB — cellchat_formatDB","text":"Helper Function Format CellChatDB","code":""},{"path":"/reference/cellchat_formatDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Format CellChatDB — cellchat_formatDB","text":"","code":"cellchat_formatDB(ccDB, op_resource, exclude_anns)"},{"path":"/reference/cellchat_formatDB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Format CellChatDB — cellchat_formatDB","text":"ccDB Inbuilt cellchatDB object op_resource OmniPath Intercell Resource DN exclude_anns Annotation criteria excluded","code":""},{"path":"/reference/cellphonedb_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate p-values as in CellPhoneDB — cellphonedb_score","title":"Function to calculate p-values as in CellPhoneDB — cellphonedb_score","text":"Function calculate p-values CellPhoneDB","code":""},{"path":"/reference/cellphonedb_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate p-values as in CellPhoneDB — cellphonedb_score","text":"","code":"cellphonedb_score(   lr_res,   perm_means,   parallelize,   workers,   score_col = \"pvalue\",   verbose = TRUE,   ... )"},{"path":"/reference/cellphonedb_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate p-values as in CellPhoneDB — cellphonedb_score","text":"lr_res liana pipe results perm_means permutations obtained via `get_permutations` parallelize logical whether parallelize workers Number workers used parallelization score_col name score column verbose logical verbosity ... placeholder","code":""},{"path":"/reference/cellphonedb_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate p-values as in CellPhoneDB — cellphonedb_score","text":"lr_res + pvalue lr.mean","code":""},{"path":"/reference/check_if_dissociated.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to check if there are dissociated entities which also exist as\ncomplexes. — check_if_dissociated","title":"Helper Function to check if there are dissociated entities which also exist as\ncomplexes. — check_if_dissociated","text":"Helper Function check dissociated entities also exist complexes.","code":""},{"path":"/reference/check_if_dissociated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to check if there are dissociated entities which also exist as\ncomplexes. — check_if_dissociated","text":"","code":"check_if_dissociated(complex_omni, check_entity, anchor_entity)"},{"path":"/reference/check_if_dissociated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to check if there are dissociated entities which also exist as\ncomplexes. — check_if_dissociated","text":"complex_omni OmniPath resource complexes check_entity entity check duplicates anchor_entity anchor entity check duplicates","code":""},{"path":"/reference/check_if_dissociated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper Function to check if there are dissociated entities which also exist as\ncomplexes. — check_if_dissociated","text":"count times ligand (check_entity) exists combination receptor (anchor_entity)","code":""},{"path":"/reference/chord_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequency ChordDiagram — chord_freq","title":"Frequency ChordDiagram — chord_freq","text":"Frequency ChordDiagram","code":""},{"path":"/reference/chord_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequency ChordDiagram — chord_freq","text":"","code":"chord_freq(   liana_res,   source_groups = NULL,   target_groups = NULL,   cex = 1,   transparency = 0.4,   facing = \"clockwise\",   adj = c(-0.5, 0.05),   ... )"},{"path":"/reference/chord_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequency ChordDiagram — chord_freq","text":"liana_res aggregated `liana_wrap` results multiple methods, alternatively results running `liana_wrap` single method. filtered condition (e.g. preferential consesus ranking, specific interactions, etc). source_groups names source (sender) cell types (NULL = filter) target_groups names target cell types (NULL = filter) cex label relative font size transparency transparency facing axis label rotation (check `circlize::circos.text` options) ... paramters passed `circlize::chordDiagram` offset text.","code":""},{"path":"/reference/compile_ligrec.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get unfiltered intercell resources\nFor each resource and OmniPath variant compiles tables of ligands,\nreceptors and interactions — compile_ligrec","title":"Function to get unfiltered intercell resources\nFor each resource and OmniPath variant compiles tables of ligands,\nreceptors and interactions — compile_ligrec","text":"Function get unfiltered intercell resources resource OmniPath variant compiles tables ligands, receptors interactions","code":""},{"path":"/reference/compile_ligrec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get unfiltered intercell resources\nFor each resource and OmniPath variant compiles tables of ligands,\nreceptors and interactions — compile_ligrec","text":"","code":"compile_ligrec(lr_pipeline = TRUE)"},{"path":"/reference/compile_ligrec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to get unfiltered intercell resources\nFor each resource and OmniPath variant compiles tables of ligands,\nreceptors and interactions — compile_ligrec","text":"lr_pipeline bool whether format lr_pipeline remove duplicate LRs (mainly composite OmniDB due category (adhesion vs lr))","code":""},{"path":"/reference/compile_ligrec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to get unfiltered intercell resources\nFor each resource and OmniPath variant compiles tables of ligands,\nreceptors and interactions — compile_ligrec","text":"list OmniPath resources formatted according method pipes","code":""},{"path":"/reference/compile_ligrec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to get unfiltered intercell resources\nFor each resource and OmniPath variant compiles tables of ligands,\nreceptors and interactions — compile_ligrec","text":"calls omnipath_intercell, intercell_connections, get_partners, intercell_connections","code":""},{"path":"/reference/compute_mi_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute mutual information distance from expression vectors — compute_mi_dist","title":"Compute mutual information distance from expression vectors — compute_mi_dist","text":"Given two normalized gene expression vectors, given number bins, function uses entropy package compute mutual information two vectors. Values passed function log-transformed.","code":""},{"path":"/reference/compute_mi_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute mutual information distance from expression vectors — compute_mi_dist","text":"","code":"compute_mi_dist(exp1, exp2, n_bins)"},{"path":"/reference/compute_mi_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute mutual information distance from expression vectors — compute_mi_dist","text":"exp1 vector containing normalized gene expression first gene (ligand) exp2 vector containing normalized gene expression first gene (receptor) n_bins Number bins discretize expression values.","code":""},{"path":"/reference/compute_mi_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute mutual information distance from expression vectors — compute_mi_dist","text":"mututal information distance, also refered non-self atalk score","code":""},{"path":"/reference/compute_nst_from_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute non-self talk scores from matrix — compute_nst_from_matrix","title":"Compute non-self talk scores from matrix — compute_nst_from_matrix","text":"Calculates non-self talk scores (also refered mutual information distances) ligand-receptor pair using normalized expression matrix given cell type. expects log-transformed expression values.","code":""},{"path":"/reference/compute_nst_from_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute non-self talk scores from matrix — compute_nst_from_matrix","text":"","code":"compute_nst_from_matrix(mat, ligand_receptor_df, seed)"},{"path":"/reference/compute_nst_from_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute non-self talk scores from matrix — compute_nst_from_matrix","text":"mat matrix containing log-transformed normalized expression values. ligand_receptor_df data frame , least, two columns named 'ligand' 'receptor' containing ligand-receptor pairs evaluate seed random seed","code":""},{"path":"/reference/compute_nst_from_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute non-self talk scores from matrix — compute_nst_from_matrix","text":"data frame non-self-talk score pair genes (ligand-receptors).","code":""},{"path":"/reference/compute_nst_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute non-self talk scores from SingleCellExperiment object — compute_nst_scores","title":"Compute non-self talk scores from SingleCellExperiment object — compute_nst_scores","text":"function computes non-self talk scores cell types contained SingleCellExperiment object. iterates ligand-receptor pairs provided input calculates entropy-based measurements cell type using normalized expression matrix, contain log-transformed values.","code":""},{"path":"/reference/compute_nst_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute non-self talk scores from SingleCellExperiment object — compute_nst_scores","text":"","code":"compute_nst_scores(   sce,   ligand_receptor_df,   assay.type = \"logcounts\",   seed = 1004 )"},{"path":"/reference/compute_nst_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute non-self talk scores from SingleCellExperiment object — compute_nst_scores","text":"sce SingleCellExperiment object containing log-normalized expression values cell type annotations colLabels ligand_receptor_df data frame , least, two columns named 'ligand' 'receptor' containing ligand-receptor pairs evaluate assay.type name data slot containing log-normalized expression values SingleCellExperiment object seed random seed","code":""},{"path":"/reference/compute_nst_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute non-self talk scores from SingleCellExperiment object — compute_nst_scores","text":"data frame computed non-self-talk score ligand-receptor pair cell-type.","code":""},{"path":"/reference/compute_pem_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Preferential Expression Measure scores from SingleCellExperiment object — compute_pem_scores","title":"Compute Preferential Expression Measure scores from SingleCellExperiment object — compute_pem_scores","text":"Compute Preferential Expression Measure scores SingleCellExperiment object","code":""},{"path":"/reference/compute_pem_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Preferential Expression Measure scores from SingleCellExperiment object — compute_pem_scores","text":"","code":"compute_pem_scores(sce, assay.type = \"logcounts\")"},{"path":"/reference/compute_pem_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Preferential Expression Measure scores from SingleCellExperiment object — compute_pem_scores","text":"sce SingleCellExperiment object containing log-normalized expression values cell type annotations colLabels assay.type name data slot containing log-normalized expression values SingleCellExperiment object","code":""},{"path":"/reference/compute_pem_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Preferential Expression Measure scores from SingleCellExperiment object — compute_pem_scores","text":"matrix containing computed PEM values","code":""},{"path":"/reference/compute_pem_scores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Preferential Expression Measure scores from SingleCellExperiment object — compute_pem_scores","text":"Uses information contained SingleCellExperiment object stratify expression matrix cell type, computes PEM scores exponential normalized expression values. IMPORTANT: function expects object containing log-transformed values (raw counts).","code":""},{"path":"/reference/conn_formatDB.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to convert Omni to Connectome resource Format — conn_formatDB","title":"Helper Function to convert Omni to Connectome resource Format — conn_formatDB","text":"Helper Function convert Omni Connectome resource Format","code":""},{"path":"/reference/conn_formatDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to convert Omni to Connectome resource Format — conn_formatDB","text":"","code":"conn_formatDB(op_resource)"},{"path":"/reference/conn_formatDB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to convert Omni to Connectome resource Format — conn_formatDB","text":"op_resource OmniPath resource","code":""},{"path":"/reference/cytotalk_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute cross-talk score from a Seurat Object (DEPRECATED) — cytotalk_score","title":"Compute cross-talk score from a Seurat Object (DEPRECATED) — cytotalk_score","text":"Compute cross-talk score Seurat Object (DEPRECATED)","code":""},{"path":"/reference/cytotalk_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute cross-talk score from a Seurat Object (DEPRECATED) — cytotalk_score","text":"","code":"cytotalk_score(lr_res, sce, score_col, assay.type, seed, ...)"},{"path":"/reference/cytotalk_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute cross-talk score from a Seurat Object (DEPRECATED) — cytotalk_score","text":"lr_res liana_pipe results sce SingleCellExperiment object score_col name score column assay.type data slot used seed random seed ... placeholder","code":""},{"path":"/reference/cytotalk_score.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute cross-talk score from a Seurat Object (DEPRECATED) — cytotalk_score","text":"function executes required functions extract compute cross-talk scores defined Cytotalk authors.","code":""},{"path":"/reference/decomplexify.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to 'decomplexify' ligands and receptors into individual subunits — decomplexify","title":"Helper Function to 'decomplexify' ligands and receptors into individual subunits — decomplexify","text":"Helper Function 'decomplexify' ligands receptors individual subunits","code":""},{"path":"/reference/decomplexify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to 'decomplexify' ligands and receptors into individual subunits — decomplexify","text":"","code":"decomplexify(resource, columns = c(\"source_genesymbol\", \"target_genesymbol\"))"},{"path":"/reference/decomplexify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to 'decomplexify' ligands and receptors into individual subunits — decomplexify","text":"resource ligrec resource columns columns separate pivot long (e.g. genesymbol uniprot), `source_genesymbol` `target_genesymbol` default","code":""},{"path":"/reference/decomplexify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to 'decomplexify' ligands and receptors into individual subunits — decomplexify","text":"returns longer tibble complex subunits seperate rows","code":""},{"path":"/reference/decomplexify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper Function to 'decomplexify' ligands and receptors into individual subunits — decomplexify","text":"takes number columns, assumes `_` sep.","code":""},{"path":"/reference/decompose_tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function to run `cell2cell_tensor` decomposition on a prebuilt tensor. — decompose_tensor","title":"Wrapper function to run `cell2cell_tensor` decomposition on a prebuilt tensor. — decompose_tensor","text":"Wrapper function run `cell2cell_tensor` decomposition prebuilt tensor.","code":""},{"path":"/reference/decompose_tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function to run `cell2cell_tensor` decomposition on a prebuilt tensor. — decompose_tensor","text":"","code":"decompose_tensor(   prebuilt_tensor,   rank = NULL,   tf_optimization = \"robust\",   seed = 1337,   upper_rank = 25,   elbow_metric = \"error\",   smooth_elbow = FALSE,   init = \"svd\",   svd = \"numpy_svd\",   factors_only = TRUE,   verbose = TRUE,   ... )"},{"path":"/reference/decompose_tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function to run `cell2cell_tensor` decomposition on a prebuilt tensor. — decompose_tensor","text":"prebuilt_tensor Tensor-cell2cell Prebuilt.Tensor class instance rank Ranks Tensor Factorization (number factors deconvolve original tensor). NULL, rank selection performed using `elbow_rank_selection` function. tf_optimization indicates whether running analysis `'regular'` `'robust'` way. regular way means tensor decomposition run 10 times per rank evaluated elbow analysis, 1 time final decomposition. Additionally, optimization algorithm less number iterations regular robust case (100 vs 500) less precision (tolerance 1e-7 vs 1e-8). robust case runs tensor decomposition 20 times per rank evaluated elbow analysis, 100 times final decomposition. use `tf_optimization='regular'`, faster generates less robust results. recommend using `tf_optimization='robust`, takes longer run (iteractions precise ). seed Random seed integer upper_rank Upper bound ranks explore elbow analysis. init Initialization method computing Tensor Factorization. ‘svd’, ‘random’ factors_only whether return factors factorization verbose verbosity logical ... Dictionary containing keyword arguments c2c.compute_tensor_factorization function. function deals `random_state` (seed) `rank` internally.","code":""},{"path":"/reference/decompose_tensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function to run `cell2cell_tensor` decomposition on a prebuilt tensor. — decompose_tensor","text":"instance cell2cell.tensor.BaseTensor class (via reticulate). build_only TRUE, rank selection tensor decomposition returned. Otherwise, returns tensor factorization results.","code":""},{"path":"/reference/dot-antilog1m.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to inverse logged counts — .antilog1m","title":"Helper function to inverse logged counts — .antilog1m","text":"Helper function inverse logged counts","code":""},{"path":"/reference/dot-antilog1m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to inverse logged counts — .antilog1m","text":"","code":".antilog1m(x, base = 2)"},{"path":"/reference/dot-antilog1m.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to inverse logged counts — .antilog1m","text":"x mat array base base conversion log-tranformed ~CPM back ~CPM.","code":""},{"path":"/reference/dot-rank_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to convert a list of characters to a ranked matrix [0,1] — .rank_matrix","title":"Function to convert a list of characters to a ranked matrix [0,1] — .rank_matrix","text":"Function convert list characters ranked matrix [0,1]","code":""},{"path":"/reference/dot-rank_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to convert a list of characters to a ranked matrix [0,1] — .rank_matrix","text":"","code":".rank_matrix(glist, ...)"},{"path":"/reference/dot-rank_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to convert a list of characters to a ranked matrix [0,1] — .rank_matrix","text":"glist list ranked/ordered characters","code":""},{"path":"/reference/dot-rank_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to convert a list of characters to a ranked matrix [0,1] — .rank_matrix","text":"matrix filled 0-1 values depending position order characters.","code":""},{"path":"/reference/dot-rank_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to convert a list of characters to a ranked matrix [0,1] — .rank_matrix","text":"Adated Kolde et al., 2012. Required due removal RobustRankAggregate package CRAN.","code":""},{"path":"/reference/dot-rank_matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function to convert a list of characters to a ranked matrix [0,1] — .rank_matrix","text":"Kolde, R., Laur, S., Adler, P. Vilo, J., 2012.  Robust rank aggregation gene list integration meta-analysis.  Bioinformatics, 28(4), pp.573-580.","code":""},{"path":"/reference/dot-sp_costrain.html","id":null,"dir":"Reference","previous_headings":"","what":"Weigh by spatial constrans — .sp_costrain","title":"Weigh by spatial constrans — .sp_costrain","text":"Weigh spatial constrans","code":""},{"path":"/reference/dot-sp_costrain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weigh by spatial constrans — .sp_costrain","text":"","code":".sp_costrain(lr_res, cell.adj, adjacency = \"adjacency\")"},{"path":"/reference/dot-sp_costrain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weigh by spatial constrans — .sp_costrain","text":"lr_res liana_pipe output prior joining complexes cell.adj cell adjacency weights (positive) adjacency name column cell pair adjacency scores","code":""},{"path":"/reference/dot-sp_costrain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weigh by spatial constrans — .sp_costrain","text":"weighed lr_res","code":""},{"path":"/reference/dot-sp_costrain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weigh by spatial constrans — .sp_costrain","text":"Note case weights 0-1, negative values (e.g. logFC, z-scores) might counter-logically affected - .e. brought closer 0. Thus, default liana expects weights 0-1. multiplied positive values, negative values divided. Alternatively, one e.g. multiply weights factor (e.g. 10,000), logFC Connectome used. However, change assumptions/interpretations scores, consensus ranking unaffected. Also, note interactions cell pairs adjacency 0 excluded (affect scores CytoTalk). NB! ` single-context, used scaling conditions!!!","code":""},{"path":"/reference/filter_nonabundant_celltypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter nun-abundant cell types — filter_nonabundant_celltypes","title":"Filter nun-abundant cell types — filter_nonabundant_celltypes","text":"Filter nun-abundant cell types","code":""},{"path":"/reference/filter_nonabundant_celltypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter nun-abundant cell types — filter_nonabundant_celltypes","text":"","code":"filter_nonabundant_celltypes(   sce,   sample_col,   idents_col,   min_cells = 10,   min_samples = 3,   min_prop = 0.2,   ctqc = NULL )"},{"path":"/reference/filter_nonabundant_celltypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter nun-abundant cell types — filter_nonabundant_celltypes","text":"sce SingleCellExperiment Object sample_col column sample ids idents_col column cell identity (cell type) ids min_cells minimum cells per identity sample min_samples minimum samples per cell identity min_prop minimum proportion samples cell identity present (least `min_cells`) ctqc cell type quality control summary obtained `get_abundance_summary`","code":""},{"path":"/reference/filter_nonabundant_celltypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter nun-abundant cell types — filter_nonabundant_celltypes","text":"filtered SingleCellExperiment Object","code":""},{"path":"/reference/generate_homologs.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to generate a homologous OmniPath resource — generate_homologs","title":"Function to generate a homologous OmniPath resource — generate_homologs","text":"Function generate homologous OmniPath resource","code":""},{"path":"/reference/generate_homologs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to generate a homologous OmniPath resource — generate_homologs","text":"","code":"generate_homologs(   op_resource,   target_organism,   max_homologs = 5,   .missing_fun = NULL,   symbols_dict = NULL,   columns = c(\"source_genesymbol\", \"target_genesymbol\"),   verbose = TRUE )"},{"path":"/reference/generate_homologs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to generate a homologous OmniPath resource — generate_homologs","text":"op_resource resource format OmniPath/LIANA target_organism `ncbi_taxid` `name` target organism. See `show_homologene` available organisms via OmnipathR's `HomoloGene` max_homologs Determines max number homologs translated. Certain genes multiple homolog matches, also certain isoforms considered. exclude cases number matched homologs high, one can adjust homologs parameter. Setting `1` mean one--many homolog matches discarded .missing_fun approach handle missing interactions. default set `NULL` mean interactions without homology match filtered. can set e.g. `str_to_title` working murine symbols. gene matched homolog, instead discarding , `.missing_fun` used format name human. Hence, increasing number matches, likely introducing mismatches. symbols_dict `NULL` default, `get_homologene_dict` called generate dictionary OmniPathR's homologene resource. Alternatively, one can pass symbols_dictionary. verbose logical verbosity source name source (ligand) column target name target (receptor) column","code":""},{"path":"/reference/generate_homologs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to generate a homologous OmniPath resource — generate_homologs","text":"converted ligand-receptor resource","code":""},{"path":"/reference/generate_lr_geneset.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a geneset resource for each LR — generate_lr_geneset","title":"Generate a geneset resource for each LR — generate_lr_geneset","text":"Generate geneset resource LR","code":""},{"path":"/reference/generate_lr_geneset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a geneset resource for each LR — generate_lr_geneset","text":"","code":"generate_lr_geneset(sce, resource, lr_sep = \"^\")"},{"path":"/reference/generate_lr_geneset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a geneset resource for each LR — generate_lr_geneset","text":"sce SingleCellExperiment object liana_tensor_c2c computed resource resource `source`, `target`, `weight` columns","code":""},{"path":"/reference/generate_lr_geneset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a geneset resource for each LR — generate_lr_geneset","text":"tibble decoupleR format","code":""},{"path":"/reference/generate_orthologs.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated call to generate_homologs — generate_orthologs","title":"Deprecated call to generate_homologs — generate_orthologs","text":"Deprecated call generate_homologs","code":""},{"path":"/reference/generate_orthologs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated call to generate_homologs — generate_orthologs","text":"","code":"generate_orthologs(...)"},{"path":"/reference/generate_orthologs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated call to generate_homologs — generate_orthologs","text":"... Arguments passed generate_orthologs","code":""},{"path":"/reference/genesymbol_to_uniprot.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to translate to UniProt — genesymbol_to_uniprot","title":"Helper Function to translate to UniProt — genesymbol_to_uniprot","text":"Helper Function translate UniProt","code":""},{"path":"/reference/genesymbol_to_uniprot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to translate to UniProt — genesymbol_to_uniprot","text":"","code":"genesymbol_to_uniprot(st)"},{"path":"/reference/genesymbol_to_uniprot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to translate to UniProt — genesymbol_to_uniprot","text":"st genesymbol string - separate `_`","code":""},{"path":"/reference/get_abundance_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get abundance summary — get_abundance_summary","title":"Function to get abundance summary — get_abundance_summary","text":"Function get abundance summary","code":""},{"path":"/reference/get_abundance_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get abundance summary — get_abundance_summary","text":"","code":"get_abundance_summary(   sce,   sample_col,   idents_col,   min_cells = 10,   min_samples = 3,   min_prop = 0.2 )"},{"path":"/reference/get_abundance_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to get abundance summary — get_abundance_summary","text":"sce SingleCellExperiment Object sample_col column sample ids idents_col column cell identity (cell type) ids min_cells minimum cells per identity sample min_samples minimum samples per cell identity min_prop minimum proportion samples cell identity present (least `min_cells`)","code":""},{"path":"/reference/get_abundance_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to get abundance summary — get_abundance_summary","text":"tibble","code":""},{"path":"/reference/get_c2c_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns tensor cell2cell results — get_c2c_factors","title":"Returns tensor cell2cell results — get_c2c_factors","text":"Returns tensor cell2cell results","code":""},{"path":"/reference/get_c2c_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns tensor cell2cell results — get_c2c_factors","text":"","code":"get_c2c_factors(sce, group_col = NULL, sample_col)"},{"path":"/reference/get_c2c_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns tensor cell2cell results — get_c2c_factors","text":"sce SingleCellExperiment factors output tensor-cell2cell group_col context descriptor - obtained `colData(sce)` sample_col context/sample names - obtained `colData(sce)`","code":""},{"path":"/reference/get_cellcall.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Obtain the CellCall database — get_cellcall","title":"Function to Obtain the CellCall database — get_cellcall","text":"Function Obtain CellCall database","code":""},{"path":"/reference/get_cellcall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Obtain the CellCall database — get_cellcall","text":"","code":"get_cellcall()"},{"path":"/reference/get_cellcall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Obtain the CellCall database — get_cellcall","text":"cellcall db converted LIANA/OP format","code":""},{"path":"/reference/get_cellchat_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to get Missing Interactions from OG CellChatDB — get_cellchat_missing","title":"Helper Function to get Missing Interactions from OG CellChatDB — get_cellchat_missing","text":"Helper Function get Missing Interactions OG CellChatDB","code":""},{"path":"/reference/get_cellchat_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to get Missing Interactions from OG CellChatDB — get_cellchat_missing","text":"","code":"get_cellchat_missing()"},{"path":"/reference/get_connectome.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to obtain connectome-like weights — get_connectome","title":"Function to obtain connectome-like weights — get_connectome","text":"Function obtain connectome-like weights","code":""},{"path":"/reference/get_connectome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to obtain connectome-like weights — get_connectome","text":"","code":"get_connectome(lr_res, ...)"},{"path":"/reference/get_connectome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to obtain connectome-like weights — get_connectome","text":"lr_res ligand-receptor DE results stats clusters ... Arguments passed liana_call method name method called","code":""},{"path":"/reference/get_connectome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to obtain connectome-like weights — get_connectome","text":"Returns tibble specificity weights (`weight_sc`) calculated    Connectome","code":""},{"path":"/reference/get_curated_omni.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Generate the Curated (Default) LIANA resource — get_curated_omni","title":"Function to Generate the Curated (Default) LIANA resource — get_curated_omni","text":"Function Generate Curated (Default) LIANA resource","code":""},{"path":"/reference/get_curated_omni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Generate the Curated (Default) LIANA resource — get_curated_omni","text":"","code":"get_curated_omni(   curated_resources = c(\"CellPhoneDB\", \"CellChatDB\", \"ICELLNET\", \"connectomeDB2020\",     \"CellTalkDB\") )"},{"path":"/reference/get_curated_omni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Generate the Curated (Default) LIANA resource — get_curated_omni","text":"curated_resources curated resources wish obtain interactions. default, includes interactions curated context CCC CellPhoneDB, CellChat, ICELLNET, connectomeDB, CellTalkDB, SignaLink.","code":""},{"path":"/reference/get_curated_omni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Generate the Curated (Default) LIANA resource — get_curated_omni","text":"curated OmniPath resource formatted LIANA","code":""},{"path":"/reference/get_curated_omni.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to Generate the Curated (Default) LIANA resource — get_curated_omni","text":", define curated resources defined manually expert curated context cell-cell communication. Albeit, \"Guide2Pharma\", \"HPMR\", \"Kirouac2010\" also resources remainder resources used generate Omnipath, use sources. Hence, assume second round manual curation done subsequent, recently published resources already contain high quality interactions aforementioned 3. also omit Cellinker, results large mount ambigous interactions, one consider adding list curated resources.","code":""},{"path":"/reference/get_homologene_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to get homologene dictionary — get_homologene_dict","title":"Helper function to get homologene dictionary — get_homologene_dict","text":"Helper function get homologene dictionary","code":""},{"path":"/reference/get_homologene_dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to get homologene dictionary — get_homologene_dict","text":"","code":"get_homologene_dict(entities, target_organism, id_type = \"genesymbol\")"},{"path":"/reference/get_homologene_dict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to get homologene dictionary — get_homologene_dict","text":"entities genes converted - function return dictionary . target_organism target organism (obtain tax id `show_homologene`)","code":""},{"path":"/reference/get_logfc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to obtain logFC weights — get_logfc","title":"Function to obtain logFC weights — get_logfc","text":"Function obtain logFC weights","code":""},{"path":"/reference/get_logfc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to obtain logFC weights — get_logfc","text":"","code":"get_logfc(lr_res, ...)"},{"path":"/reference/get_logfc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to obtain logFC weights — get_logfc","text":"lr_res ligand-receptor DE results stats clusters ... Arguments passed liana_call method name method called","code":""},{"path":"/reference/get_logfc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to obtain logFC weights — get_logfc","text":"Returns tibble logFC metric (`logfc_comb`). `logfc_comb`    calculated product (1 vs rest) log2FC ligand    receptor gene","code":""},{"path":"/reference/get_lr_resources.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function that returns the name of each intercell resource in OmniPath — get_lr_resources","title":"Helper function that returns the name of each intercell resource in OmniPath — get_lr_resources","text":"Helper function returns name intercell resource OmniPath","code":""},{"path":"/reference/get_lr_resources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function that returns the name of each intercell resource in OmniPath — get_lr_resources","text":"","code":"get_lr_resources()"},{"path":"/reference/get_lr_resources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function that returns the name of each intercell resource in OmniPath — get_lr_resources","text":"list strings intercell resource OmniPath","code":""},{"path":"/reference/get_natmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to obtain NATMI-like weights — get_natmi","title":"Function to obtain NATMI-like weights — get_natmi","text":"Function obtain NATMI-like weights","code":""},{"path":"/reference/get_natmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to obtain NATMI-like weights — get_natmi","text":"","code":"get_natmi(lr_res, ...)"},{"path":"/reference/get_natmi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to obtain NATMI-like weights — get_natmi","text":"lr_res ligand-receptor DE results stats clusters ... Arguments passed liana_call method name method called","code":""},{"path":"/reference/get_natmi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to obtain NATMI-like weights — get_natmi","text":"Returns tibble specificity weights (`edge_specificity`)    calculated NATMI","code":""},{"path":"/reference/get_partners.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves intercellular communication partners (ligands or receptors) from\none ligand-receptor resource. — get_partners","title":"Retrieves intercellular communication partners (ligands or receptors) from\none ligand-receptor resource. — get_partners","text":"Retrieves intercellular communication partners (ligands receptors) one ligand-receptor resource.","code":""},{"path":"/reference/get_partners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves intercellular communication partners (ligands or receptors) from\none ligand-receptor resource. — get_partners","text":"","code":"get_partners(side, resource, ...)"},{"path":"/reference/get_partners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves intercellular communication partners (ligands or receptors) from\none ligand-receptor resource. — get_partners","text":"side 'ligand' (trans), 'receptor' (rec) '' (short long notation can used) resource Name current resource (taken get_lr_resources) ... Inherit dot params OmnipathR::omnipath_intercell","code":""},{"path":"/reference/get_permutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to generate shuffled means — get_permutations","title":"Helper Function to generate shuffled means — get_permutations","text":"Helper Function generate shuffled means","code":""},{"path":"/reference/get_permutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to generate shuffled means — get_permutations","text":"","code":"get_permutations(   lr_res,   sce,   nperms = 1000,   seed = 1234,   parallelize = FALSE,   workers = 4,   assay.type = \"logcounts\",   verbose = TRUE )"},{"path":"/reference/get_permutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to generate shuffled means — get_permutations","text":"lr_res liana_pipe results sce SingleCellExperiment Object nperms number permutations seed number used set random seed parallelize logical whether parallelize workers Number workers used parallelization assay.type - type data used calculate means (logcounts default), available options : \"counts\" \"logcounts\" verbose logical verbosity","code":""},{"path":"/reference/get_permutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to generate shuffled means — get_permutations","text":"Returns list shuffled gene means cluster","code":""},{"path":"/reference/get_permutations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper Function to generate shuffled means — get_permutations","text":"function made generalizable set genes,   depending set (currently lr_res genes) used filter - .e.   replaced e.g. genes TF regulons","code":""},{"path":"/reference/get_sca.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to obtain SingleCellSignalR-like scores — get_sca","title":"Function to obtain SingleCellSignalR-like scores — get_sca","text":"Function obtain SingleCellSignalR-like scores","code":""},{"path":"/reference/get_sca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to obtain SingleCellSignalR-like scores — get_sca","text":"","code":"get_sca(lr_res, ...)"},{"path":"/reference/get_sca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to obtain SingleCellSignalR-like scores — get_sca","text":"lr_res ligand-receptor DE results stats clusters ... Arguments passed liana_call method name method called","code":""},{"path":"/reference/get_sca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to obtain SingleCellSignalR-like scores — get_sca","text":"Returns tibble specificity weights (`LRscore`) calculated    SingleCellSignalR","code":""},{"path":"/reference/get_scconnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to obtain scConnect-like interaction scores — get_scconnect","title":"Function to obtain scConnect-like interaction scores — get_scconnect","text":"Function obtain scConnect-like interaction scores","code":""},{"path":"/reference/get_scconnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to obtain scConnect-like interaction scores — get_scconnect","text":"","code":"get_scconnect(lr_res, ...)"},{"path":"/reference/get_scconnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to obtain scConnect-like interaction scores — get_scconnect","text":"lr_res ligand-receptor DE results stats clusters ... Arguments passed liana_call method name method called","code":""},{"path":"/reference/get_scconnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to obtain scConnect-like interaction scores — get_scconnect","text":"Returns tibble interaction scores (`interaction_score`)   calculated scConnect","code":""},{"path":"/reference/get_up_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to get UniProt dictionary — get_up_dict","title":"Helper function to get UniProt dictionary — get_up_dict","text":"Helper function get UniProt dictionary","code":""},{"path":"/reference/get_up_dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to get UniProt dictionary — get_up_dict","text":"","code":"get_up_dict(   ligrec_res,   up,   key_column1 = \"Ligand_ID\",   key_column2 = \"Receptor_ID\" )"},{"path":"/reference/get_up_dict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to get UniProt dictionary — get_up_dict","text":"ligrec_res ligand_receptor resource translate uniprot db queried key_column1 name ligand  column key_column2 name receptor column","code":""},{"path":"/reference/heat_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Communication Frequency heatmap plot — heat_freq","title":"Communication Frequency heatmap plot — heat_freq","text":"Communication Frequency heatmap plot","code":""},{"path":"/reference/heat_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Communication Frequency heatmap plot — heat_freq","text":"","code":"heat_freq(liana_res, ...)"},{"path":"/reference/heat_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Communication Frequency heatmap plot — heat_freq","text":"liana_res aggregated liana results (preferably truncated threshold) ... Arguments passed liana_heatmap mat Diagonal celltype-celltype matrix plotted. theory, metric deemed meaningful cell pairs can plotted. font_size base font_size - fontsizes relative one grid_text logical whether display grid text name name heatmap. default heatmap name used title heatmap legend. row_title Row tittle column_title Column tittle","code":""},{"path":"/reference/heat_freq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Communication Frequency heatmap plot — heat_freq","text":"plot inspired CellPhoneDB also CellChat's heatmap design. makes assumption number interactions inferred cell types informative communication events occurring system whole. rather strong assumption limited arbitrarily filtered interactions Thus, suggest one limits conclusions, unless supported complimentary information, biological prior knowledge.","code":""},{"path":"/reference/join_means.html","id":null,"dir":"Reference","previous_headings":"","what":"Join Expression per Cluster — join_means","title":"Join Expression per Cluster — join_means","text":"Join Expression per Cluster","code":""},{"path":"/reference/join_means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join Expression per Cluster — join_means","text":"","code":"join_means(lr_res, means, source_target, entity, type, pb = NULL)"},{"path":"/reference/join_means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join Expression per Cluster — join_means","text":"lr_res LR formatted DE results ligrec_degformat means Gene avg expression per cluster source_target target source cell entity ligand receptor type type mean join (count scaled) pb progress bar","code":""},{"path":"/reference/join_means.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join Expression per Cluster — join_means","text":"Returns Average Expression Per Cluster","code":""},{"path":"/reference/liana_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Aggregate CCC Method Results — liana_aggregate","title":"Function to Aggregate CCC Method Results — liana_aggregate","text":"Function Aggregate CCC Method Results","code":""},{"path":"/reference/liana_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Aggregate CCC Method Results — liana_aggregate","text":"","code":"liana_aggregate(   liana_res,   aggregate_how = NULL,   resource = NULL,   set_cap = \"max\",   cap = NULL,   get_ranks = TRUE,   get_agrank = TRUE,   .score_mode = .score_specs,   verbose = TRUE,   join_cols = NULL,   ... )"},{"path":"/reference/liana_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Aggregate CCC Method Results — liana_aggregate","text":"liana_res LIANA results aggregate_how way aggregate, default (NULL) aggregate passed methods approach specified `liana:::.score_specs`. Alternative options `magnitude` `specificity`. resource methods ran multiple resources, name resource interest needs provided *Note* name provided, first results based first resource list returned set_cap Function used set ranked cap (.e. value assigned interactions NA scores); default, set \"max\", maximum number interactions obtained methods; methods return possible ligand-receptor combinations possible source target cell pair - .e. known universe possible interactions (based CCC resource) cap cap can methods can also manually set, top X interactions, based `specificity` scores method returned ranking carried solely get_ranks boolean, whether return consensus ranks methods get_agrank boolean, whether return aggregate rank using `RobustRankAggreg` package. .score_mode defines way methods aggragate. default, use score method reflects specificity (available), e.g. case SCA use sole scoring function. aggregation default done basis list returns `.score_mode`. Alternatively, one pass `.score_housekeep` obtain aggragate housekeeping interactions method. join_cols columns different method results joined. NULL default, automatically handle columns depending methods used. ... Arguments passed .rank_matrix glist list ranked/ordered characters","code":""},{"path":"/reference/liana_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Aggregate CCC Method Results — liana_aggregate","text":"Tibble interaction results ranking method","code":""},{"path":"/reference/liana_aggregate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to Aggregate CCC Method Results — liana_aggregate","text":"set_cap name name function executed   vector representing number rows results method,   default set base::max, function   works vectors passed - e.g. min, mean, etc. function also decomplexifies complex present CellChat results returns complexes default","code":""},{"path":"/reference/liana_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to Aggregate CCC Method Results — liana_aggregate","text":"","code":"liana_path <- system.file(package = \"liana\") # load testdata testdata <- readRDS(file.path(liana_path , \"testdata\", \"input\", \"testdata.rds\")) # run liana liana_res <- liana_wrap(testdata, method=c(\"sca\", \"natmi\")) #> Expression from the `RNA` assay will be used #> Running LIANA with `seurat_annotations` as labels! #> Warning: 3465 genes and/or 0 cells were removed as they had no counts! #> Warning: `invoke()` is deprecated as of rlang 0.4.0. #> Please use `exec()` or `inject()` instead. #> This warning is displayed once per session. #> LIANA: LR summary stats calculated! #> Now Running: Sca #> Now Running: Natmi # aggregate results from multiple methods liana_res <- liana_aggregate(liana_res) #> Now aggregating sca #> Now aggregating natmi #> Aggregating Ranks"},{"path":"/reference/liana_bysample.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around `liana_wrap` to run liana for each sample. — liana_bysample","title":"Wrapper around `liana_wrap` to run liana for each sample. — liana_bysample","text":"Wrapper around `liana_wrap` run liana sample.","code":""},{"path":"/reference/liana_bysample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around `liana_wrap` to run liana for each sample. — liana_bysample","text":"","code":"liana_bysample(   sce,   idents_col,   sample_col,   verbose = TRUE,   inplace = TRUE,   aggregate_how = NULL,   ... )"},{"path":"/reference/liana_bysample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around `liana_wrap` to run liana for each sample. — liana_bysample","text":"idents_col name cluster column sample_col name sample/context column verbose verbosity logical inplace logical (TRUE default) liana results saved SingleCellExperiment object (`sce@metadata$liana_res`) aggregate_how running multiple methods (default), one cal also choose aggregate CCC results sample. ... Arguments passed liana_wrap sce `SingleCellExperiment` object `SeuratObject` method method(s) run via liana resource resource(s) used methods (`Consensus` default), Use `` run `human` resources one go), `custom` run liana_wrap appropriately formatted custom resource, passed via `exernal_resource` external_resource external resource OmniPath tibble format min_cells minimum cell per cell identity considered analysis return_all whether return possible interactions. interaction `expr_prop` specific threshold assigned *worst* possible score pass threshold.  example, p-values CellPhoneDB assigned max(pvalue)   - likely 1, lr_means assigned min(lr_means).  Note applies internal methods liana. supp_columns supplementary/additional columns returned liana. Possibilities include: c(\"ligand.expr\", \"receptor.expr\" \"ligand.stat\", \"receptor.stat\", \"ligand.pval\", \"receptor.pval\", \"ligand.FDR\", \"receptor.FDR\", etc) assay assay used Seurat, default set `NULL` use DefaultAssay. .simplify methods run 1 resource, return list tibbles method (default), rather list lists method-resource combinations base Default NULL (.e. log2-transformation assumed SCE, log-tranformation Seurat). requred step calculation logFC method - ensures preprocessing counts preserved. One also pass `NaN` wish use counts stored counts assay/slot, number according base used log-tranformation. cell.adj cell adjacency tibble/dataframe /w weights `multiply` relevant columns. cell pairs weights 0 filtered . Note working LIANA's default methods, suggest weights >= 0 & =< 1. ensure methods' score meaningfully weighed without changing interpretation scores, thus allow one filter SCA, rank NATMI, etc.","code":""},{"path":"/reference/liana_bysample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper around `liana_wrap` to run liana for each sample. — liana_bysample","text":"inplace true returns sce object `liana_res` `sce@metadata`, else returns named list tibble liana results per sample.","code":""},{"path":"/reference/liana_bysample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrapper around `liana_wrap` to run liana for each sample. — liana_bysample","text":"takes Seurat/SCE object runs LIANA sample/condition. key samples separated build `condition_col` `sample_col`, separated `key_sep`.","code":""},{"path":"/reference/liana_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper Function to obtain scores via liana_pipe — liana_call","title":"Wrapper Function to obtain scores via liana_pipe — liana_call","text":"Wrapper Function obtain scores via liana_pipe","code":""},{"path":"/reference/liana_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper Function to obtain scores via liana_pipe — liana_call","text":"","code":"liana_call(method, lr_res, ...)"},{"path":"/reference/liana_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper Function to obtain scores via liana_pipe — liana_call","text":"method name method called lr_res ligand-receptor DE results stats clusters ... Arguments passed liana_pipe sce SingleCellExperiment Object op_resource resource tibble obtained via liana::select_resource assay assay used (\"RNA\" default) assay.type - type data used calculate means (logcounts default), available options : \"counts\" \"logcounts\" verbose logical verbosity cell.adj cell adjacency tibble/dataframe /w weights `multiply` relevant columns. cell pairs weights 0 filtered . Note working LIANA's default methods, suggest weights >= 0 & =< 1. ensure methods' score meaningfully weighed without changing interpretation scores, thus allow one filter SCA, rank NATMI, etc. test.type String specifying type pairwise test perform - t-test \"t\", Wilcoxon rank sum test \"wilcox\",  binomial test \"binom\". pval.type string specifying p-values combined across pairwise comparisons given group/cluster. base base conversion log-tranformed ~CPM back ~CPM.","code":""},{"path":"/reference/liana_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper Function to obtain scores via liana_pipe — liana_call","text":"lr_res modified method-specific","code":""},{"path":"/reference/liana_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to pass Default Arguments for each method — liana_defaults","title":"Function to pass Default Arguments for each method — liana_defaults","text":"Function pass Default Arguments method","code":""},{"path":"/reference/liana_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to pass Default Arguments for each method — liana_defaults","text":"","code":"liana_defaults(   assay = \"RNA\",   assay.type = \"logcounts\",   expr_prop = 0.1,   seed = 1004,   complex_policy = \"mean0\",   parallelize = FALSE,   workers = 8,   permutation.params = NULL,   liana_pipe.params = NULL,   liana_call.params = NULL,   cellphonedb.params = NULL,   natmi.params = NULL,   sca.params = NULL,   connectome.params = NULL,   cytotalk.params = NULL,   logfc.params = NULL,   cellchat.params = NULL,   squidpy.params = NULL,   call_sca.params = NULL,   call_natmi.params = NULL,   call_connectome.params = NULL,   call_italk.params = NULL,   ... )"},{"path":"/reference/liana_defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to pass Default Arguments for each method — liana_defaults","text":"assay Assay name passed `call_italk`, `call_sca`, `call_cellchat`, `call_connectome` assay.type - type data used calculate means (logcounts default), available options : \"counts\" \"logcounts\" expr_prop minimum proportion gene expression per cell type (0.1 default). Note working complexes, minimum subunit proportion used filtering. seed random seed integer complex_policy policy account presence complexes. parallelize whether parallelize cellphonedb-like workers number workers called permutation.params list parameters passed permutation methods liana_pipe.params list Parameters passed NATMI liana_pipe liana_call.params list Parameters passed NATMI liana_call cellphonedb.params list Parameters passed liana's internal cellphonedb implementation cellphonedb_score natmi.params list Parameters passed liana's internal edge_specificity implementation natmi_score sca.params list Parameters passed liana's internal LRScore implementation sca_score connectome.params list Parameters passed liana's internal connectome's weight_sc implementation connectome_score cytotalk.params list Parameters passed liana's internal crosstalk scores implementation cytotalk_score logfc.params list Parameters passed liana's internal logFC implementation logfc_score cellchat.params list Parameters passed CellChat call_cellchat squidpy.params list Parameters passed Squidpy call_squidpy call_sca.params list Parameters passed SingleCellSignalR call_sca call_natmi.params list Parameters passed NATMI call_natmi call_connectome.params list Parameters passed Connectome call_connectome call_italk.params list Parameters passed iTALK call_italk","code":""},{"path":"/reference/liana_defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to pass Default Arguments for each method — liana_defaults","text":"list default parameters method","code":""},{"path":"/reference/liana_defaults.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to pass Default Arguments for each method — liana_defaults","text":"default parameters method can also overwritten  manually passing list parameters appropraite method   liana_wrap , `get_*` method default obtain default params passed    via liana_pipe liana_call. done steps    required calculation methods undertaken . NB! LIANA's internal methods made consistent. reason pass specific parameters . Thus, best one sticks non-nested parameters function (.e. excluding `.params`), unless specific reason requires LIANA's internal parameters changed.","code":""},{"path":"/reference/liana_defaults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to pass Default Arguments for each method — liana_defaults","text":"","code":"liana_path <- system.file(package = \"liana\") # load testdata testdata <- readRDS(file.path(liana_path , \"testdata\", \"input\", \"testdata.rds\")) # get a `named` list with all default parameters passed to liana. def_params <- liana_defaults() # any of these can then be overwritten and passed to `...` in `liana_wrap` # with the `.params` suffix to the parameter name type. For example, liana_res <- liana_wrap(testdata,                         permutation.params = list(nperms=2),                         liana_pipe.params = list(test.type='wilcox')) #> Expression from the `RNA` assay will be used #> Running LIANA with `seurat_annotations` as labels! #> Warning: 3465 genes and/or 0 cells were removed as they had no counts! #> LIANA: LR summary stats calculated! #> Now Running: Natmi #> Now Running: Connectome #> Now Running: Logfc #> Now Running: Sca #> Now Running: Cellphonedb"},{"path":"/reference/liana_dotplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Liana dotplot interactions by source and target cells — liana_dotplot","title":"Liana dotplot interactions by source and target cells — liana_dotplot","text":"Liana dotplot interactions source target cells","code":""},{"path":"/reference/liana_dotplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Liana dotplot interactions by source and target cells — liana_dotplot","text":"","code":"liana_dotplot(   liana_res,   source_groups = NULL,   target_groups = NULL,   ntop = NULL,   specificity = \"natmi.edge_specificity\",   magnitude = \"sca.LRscore\",   y.label = \"Interactions (Ligand -> Receptor)\",   size.label = \"Interaction\\nSpecificity\",   colour.label = \"Expression\\nMagnitude\",   show_complex = TRUE,   size_range = c(2, 10),   invert_specificity = FALSE,   invert_magnitude = FALSE,   invert_function = function(x) -log10(x + 1e-10) )"},{"path":"/reference/liana_dotplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Liana dotplot interactions by source and target cells — liana_dotplot","text":"liana_res aggregated `liana_wrap` results multiple methods, alternatively results running `liana_wrap` single method. filtered condition (e.g. preferential consesus ranking, specific interactions, etc). source_groups names source (sender) cell types (NULL = filter) target_groups names target cell types (NULL = filter) ntop number interactions return. Note assumes tibble sorted descending order interaction importance! specificity column represent dot-size interaction (default `natmi.edge_specificity`) magnitude column represent interactions expression magnitude (default `sca.LRscore`) y.label y label name size.label size (~specificty) label name colour.label colour (~magnitude) label name show_complex logical whether show complexes (default - TRUE) subunit minimum expression.","code":""},{"path":"/reference/liana_dotplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Liana dotplot interactions by source and target cells — liana_dotplot","text":"ggplot2 object","code":""},{"path":"/reference/liana_dotplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Liana dotplot interactions by source and target cells — liana_dotplot","text":", refer `specificity` specific interaction cell type pair regards rest cell type pairs ( e.g. CellPhoneDB's p-values, NATMI's specificity edges, Connectome's scaled weights, etc) `magnitude` hand direct measure expression alone, default use SingleCellSignalR's dataset indepent LRscore (bound 0 1). Yet, one also use CellChat's probabilities CellPhoneDB's means, etc.","code":""},{"path":"/reference/liana_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Communication by cell type Heatmap — liana_heatmap","title":"Communication by cell type Heatmap — liana_heatmap","text":"Communication cell type Heatmap","code":""},{"path":"/reference/liana_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Communication by cell type Heatmap — liana_heatmap","text":"","code":"liana_heatmap(   mat,   font_size = 12,   grid_text = FALSE,   name = \"Frequency\",   pallette = c(\"white\", \"violetred2\"),   row_title = \"Sender (Cell types)\",   column_title = \"Receiver (Cell types)\",   ... )"},{"path":"/reference/liana_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Communication by cell type Heatmap — liana_heatmap","text":"mat Diagonal celltype-celltype matrix plotted. theory, metric deemed meaningful cell pairs can plotted. font_size base font_size - fontsizes relative one grid_text logical whether display grid text name name heatmap. default heatmap name used title heatmap legend. row_title Row tittle column_title Column tittle ... parameters passed `ComplexHeatmap::Heatmap`","code":""},{"path":"/reference/liana_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Communication by cell type Heatmap — liana_heatmap","text":"Heatmap function inspired CellPhoneDBv3 CellChat's designs communication heatmaps.","code":""},{"path":"/reference/liana_message.html","id":null,"dir":"Reference","previous_headings":"","what":"LIANA message/warning helper function to allow for verbosity — liana_message","title":"LIANA message/warning helper function to allow for verbosity — liana_message","text":"LIANA message/warning helper function allow verbosity","code":""},{"path":"/reference/liana_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LIANA message/warning helper function to allow for verbosity — liana_message","text":"","code":"liana_message(..., output = \"message\", verbose = TRUE)"},{"path":"/reference/liana_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LIANA message/warning helper function to allow for verbosity — liana_message","text":"... zero objects can coerced character     (pasted together separator) single     condition object. output type output - message, warning, stop verbose logical verbosity","code":""},{"path":"/reference/liana_pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Liana Pipe which runs DE analysis and merges needed information for LR inference — liana_pipe","title":"Liana Pipe which runs DE analysis and merges needed information for LR inference — liana_pipe","text":"Liana Pipe runs DE analysis merges needed information LR inference","code":""},{"path":"/reference/liana_pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Liana Pipe which runs DE analysis and merges needed information for LR inference — liana_pipe","text":"","code":"liana_pipe(   sce,   op_resource,   test.type = \"wilcox\",   pval.type = \"all\",   assay = \"RNA\",   assay.type = \"logcounts\",   verbose = TRUE,   base,   cell.adj = NULL )"},{"path":"/reference/liana_pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Liana Pipe which runs DE analysis and merges needed information for LR inference — liana_pipe","text":"sce SingleCellExperiment Object op_resource resource tibble obtained via liana::select_resource test.type String specifying type pairwise test perform - t-test \"t\", Wilcoxon rank sum test \"wilcox\",  binomial test \"binom\". pval.type string specifying p-values combined across pairwise comparisons given group/cluster. assay assay used (\"RNA\" default) assay.type - type data used calculate means (logcounts default), available options : \"counts\" \"logcounts\" verbose logical verbosity base base conversion log-tranformed ~CPM back ~CPM. cell.adj cell adjacency tibble/dataframe /w weights `multiply` relevant columns. cell pairs weights 0 filtered . Note working LIANA's default methods, suggest weights >= 0 & =< 1. ensure methods' score meaningfully weighed without changing interpretation scores, thus allow one filter SCA, rank NATMI, etc.","code":""},{"path":"/reference/liana_pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Liana Pipe which runs DE analysis and merges needed information for LR inference — liana_pipe","text":"Returns tibble information required LR calculations downstream","code":""},{"path":"/reference/liana_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to handle different types of object as input and do basic quality checks — liana_prep","title":"Function to handle different types of object as input and do basic quality checks — liana_prep","text":"Function handle different types object input basic quality checks","code":""},{"path":"/reference/liana_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to handle different types of object as input and do basic quality checks — liana_prep","text":"","code":"liana_prep(sce, ...)"},{"path":"/reference/liana_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to handle different types of object as input and do basic quality checks — liana_prep","text":"sce SingleCellExperiment Seurat object ... dot dot dot bucket - passed anything, handles issues passing non-existing arguments","code":""},{"path":"/reference/liana_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to obtain different scoring schemes — liana_scores","title":"Function to obtain different scoring schemes — liana_scores","text":"Function obtain different scoring schemes","code":""},{"path":"/reference/liana_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to obtain different scoring schemes — liana_scores","text":"","code":"liana_scores(score_object, lr_res, ...)"},{"path":"/reference/liana_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to obtain different scoring schemes — liana_scores","text":"score_object score_object specific test obtained score_specs lr_res ligand-receptor DE results stats clusters ... dot params passed `*_score` functions","code":""},{"path":"/reference/liana_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to obtain different scoring schemes — liana_scores","text":"lr_res modified method-specific","code":""},{"path":"/reference/liana_tensor_c2c.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function to run `cell2cell_tensor` with LIANA output. — liana_tensor_c2c","title":"Wrapper function to run `cell2cell_tensor` with LIANA output. — liana_tensor_c2c","text":"Wrapper function run `cell2cell_tensor` LIANA output.","code":""},{"path":"/reference/liana_tensor_c2c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function to run `cell2cell_tensor` with LIANA output. — liana_tensor_c2c","text":"","code":"liana_tensor_c2c(   sce = NULL,   context_df_dict = NULL,   score_col = \"LRscore\",   how = \"inner\",   lr_fill = NaN,   cell_fill = NaN,   lr_sep = \"^\",   context_order = NULL,   sort_elements = TRUE,   device = NULL,   rank = NULL,   seed = 1337,   upper_rank = 25,   runs = 3,   init = \"svd\",   build_only = FALSE,   factors_only = TRUE,   conda_env = NULL,   use_available = FALSE,   verbose = TRUE,   inplace = TRUE,   sender_col = \"source\",   receiver_col = \"target\",   ligand_col = \"ligand.complex\",   receptor_col = \"receptor.complex\",   ... )"},{"path":"/reference/liana_tensor_c2c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function to run `cell2cell_tensor` with LIANA output. — liana_tensor_c2c","text":"sce SingleCellExperiment `context_df_dict` - .e. liana results per context (sample) stored `sce@metadata$liana_res` context_df_dict Dictionary (named list) containing dataframe context. dataframe must contain columns containing sender (source) cells, receiver (target) cells, ligands, receptors, communication scores, separately. Keys context names values dataframes. NULL default. NULL used instead `sce@metadata$liana_res`. score_col Name column containing communication scores context dataframes. Approach consider cell types genes present across multiple contexts. - 'inner' : Considers cell types LR pairs present contexts (intersection). - 'outer' : Considers cell types LR pairs present across contexts (union). - 'outer_lr' : Considers cell types present contexts (intersection),  LR pairs present across contexts (union). - 'outer_cells' : Considers LR pairs present contexts (intersection),  cell types present across contexts (union). lr_fill Value fill communication scores ligand-receptor pair present across contexts. (NaN default) cell_fill Value fill communication scores cell present across ligand-receptor pairs contexts. (NaN default) lr_sep Separation character join ligands receptors LR pair name. ('^' Default) context_order List used sort contexts building tensor. Elements must elements `names(context_df_dict)`. (NULL default) sort_elements Whether alphabetically sorting elements InteractionTensor. Context Dimension sorted 'context_order' list provided. (TRUE default). device Device use backend pytorch. Options : ['cpu', 'cuda:0', None]. NULL Default rank Ranks Tensor Factorization (number factors deconvolve original tensor). NULL, rank selection performed using `elbow_rank_selection` function. seed Random seed integer upper_rank Upper bound ranks explore elbow analysis. runs Number tensor factorization performed given rank. factorization varies seed initialization. Consider increasing number runs, order obtain robust rank estimate. init Initialization method computing Tensor Factorization. ‘svd’, ‘random’ build_only Whether return tensor instance, without rank selection factorization. factors_only whether return factors factorization conda_env name existing conda environment use_available whether use c2c available current env. False default. verbose verbosity logical inplace logical (TRUE default) liana results saved SingleCellExperiment object (`sce@metadata$liana_res`) sender_col Name column containing sender cells context dataframes. receiver_col Name column containing receiver cells context dataframes. ligand_col Name column containing ligands context dataframes. receptor_col Name column containing receptors context dataframes. ... Dictionary containing keyword arguments c2c.compute_tensor_factorization function. function deals `random_state` (seed) `rank` internally.","code":""},{"path":"/reference/liana_tensor_c2c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function to run `cell2cell_tensor` with LIANA output. — liana_tensor_c2c","text":"instance cell2cell.tensor.BaseTensor class (via reticulate). build_only TRUE, rank selection tensor decomposition returned. Otherwise, returns tensor factorization results.","code":""},{"path":"/reference/liana_tensor_c2c.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrapper function to run `cell2cell_tensor` with LIANA output. — liana_tensor_c2c","text":"function servers one-liner wrapper tensor factorisation method described tensor_cell2cell. refer user publication tensor_cell2cell tutorial page made authors. Logically, one cite cell2cell's paper method used via LIANA.","code":""},{"path":"/reference/liana_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"LIANA wrapper function — liana_wrap","title":"LIANA wrapper function — liana_wrap","text":"LIANA wrapper function","code":""},{"path":"/reference/liana_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LIANA wrapper function — liana_wrap","text":"","code":"liana_wrap(   sce,   method = c(\"natmi\", \"connectome\", \"logfc\", \"sca\", \"cellphonedb\"),   resource = c(\"Consensus\"),   idents_col = NULL,   external_resource,   min_cells = 5,   return_all = FALSE,   supp_columns = NULL,   verbose = TRUE,   assay = NULL,   .simplify = TRUE,   cell.adj = NULL,   base = NULL,   ... )"},{"path":"/reference/liana_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LIANA wrapper function — liana_wrap","text":"sce `SingleCellExperiment` object `SeuratObject` method method(s) run via liana resource resource(s) used methods (`Consensus` default), Use `` run `human` resources one go), `custom` run liana_wrap appropriately formatted custom resource, passed via `exernal_resource` idents_col cell identities/labels used. default set NULL, used active Idents colLabels seurat_object SCE, respectively. external_resource external resource OmniPath tibble format min_cells minimum cell per cell identity considered analysis return_all whether return possible interactions. interaction `expr_prop` specific threshold assigned *worst* possible score pass threshold.  example, p-values CellPhoneDB assigned max(pvalue)   - likely 1, lr_means assigned min(lr_means).  Note applies internal methods liana. supp_columns supplementary/additional columns returned liana. Possibilities include: c(\"ligand.expr\", \"receptor.expr\" \"ligand.stat\", \"receptor.stat\", \"ligand.pval\", \"receptor.pval\", \"ligand.FDR\", \"receptor.FDR\", etc) verbose logical whether output messages warnings (`TRUE` default) assay assay used Seurat, default set `NULL` use DefaultAssay. .simplify methods run 1 resource, return list tibbles method (default), rather list lists method-resource combinations cell.adj cell adjacency tibble/dataframe /w weights `multiply` relevant columns. cell pairs weights 0 filtered . Note working LIANA's default methods, suggest weights >= 0 & =< 1. ensure methods' score meaningfully weighed without changing interpretation scores, thus allow one filter SCA, rank NATMI, etc. base Default NULL (.e. log2-transformation assumed SCE, log-tranformation Seurat). requred step calculation logFC method - ensures preprocessing counts preserved. One also pass `NaN` wish use counts stored counts assay/slot, number according base used log-tranformation. ... Arguments passed liana_defaults expr_prop minimum proportion gene expression per cell type (0.1 default). Note working complexes, minimum subunit proportion used filtering. complex_policy policy account presence complexes. seed random seed integer parallelize whether parallelize cellphonedb-like workers number workers called liana_pipe.params list Parameters passed NATMI liana_pipe liana_call.params list Parameters passed NATMI liana_call cellchat.params list Parameters passed CellChat call_cellchat squidpy.params list Parameters passed Squidpy call_squidpy call_connectome.params list Parameters passed Connectome call_connectome call_italk.params list Parameters passed iTALK call_italk call_natmi.params list Parameters passed NATMI call_natmi call_sca.params list Parameters passed SingleCellSignalR call_sca cellphonedb.params list Parameters passed liana's internal cellphonedb implementation cellphonedb_score natmi.params list Parameters passed liana's internal edge_specificity implementation natmi_score sca.params list Parameters passed liana's internal LRScore implementation sca_score connectome.params list Parameters passed liana's internal connectome's weight_sc implementation connectome_score cytotalk.params list Parameters passed liana's internal crosstalk scores implementation cytotalk_score logfc.params list Parameters passed liana's internal logFC implementation logfc_score permutation.params list parameters passed permutation methods assay.type - type data used calculate means (logcounts default), available options : \"counts\" \"logcounts\"","code":""},{"path":"/reference/liana_wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LIANA wrapper function — liana_wrap","text":"list method-resource results - .e. provided resources run method one resource selected, single tibble (results  resource) returned selected methods","code":""},{"path":"/reference/liana_wrap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LIANA wrapper function — liana_wrap","text":"LIANA wrapper method can used call method  given set intercellular resources OmniPath universe.  Please see `liana_defaults()` information  default parameters passed used `liana_wrap`, wish modify .","code":""},{"path":"/reference/liana_wrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LIANA wrapper function — liana_wrap","text":"","code":"liana_path <- system.file(package = \"liana\") # load testdata testdata <- readRDS(file.path(liana_path , \"testdata\", \"input\", \"testdata.rds\")) # run only 2 methods from liana liana_res <- liana_wrap(testdata, method = c('cellphonedb', 'sca'),                         resource = 'Consensus', # default resource                         # example run with *only* 2 permutations for cpdb                         permutation.params = list(nperms = 2)) #> Expression from the `RNA` assay will be used #> Running LIANA with `seurat_annotations` as labels! #> Warning: 3465 genes and/or 0 cells were removed as they had no counts! #> LIANA: LR summary stats calculated! #> Now Running: Cellphonedb #> Now Running: Sca"},{"path":"/reference/map_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper custom map function — map_custom","title":"Helper custom map function — map_custom","text":"Helper custom map function","code":""},{"path":"/reference/map_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper custom map function — map_custom","text":"","code":"map_custom(.x, .f, parallelize, workers, ...)"},{"path":"/reference/map_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper custom map function — map_custom","text":".x list atomic vector. .f function, formula, vector (necessarily atomic). function, used . formula, e.g. ~ .x + 2, converted function. three ways refer arguments: single argument function, use . two argument function, use .x .y arguments, use ..1, ..2, ..3 etc syntax allows create compact anonymous functions. character vector, numeric vector, list, converted extractor function. Character vectors index name numeric vectors index position; use list index position name different levels. component present, value .default returned. parallelize logical whether parallelize workers Number workers used parallelization ... params passed called function `.f`","code":""},{"path":"/reference/mean0.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function which returns the mean, unless there is a 0 value then it returns 0 — mean0","title":"Helper Function which returns the mean, unless there is a 0 value then it returns 0 — mean0","text":"Helper Function returns mean, unless 0 value returns 0","code":""},{"path":"/reference/mean0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function which returns the mean, unless there is a 0 value then it returns 0 — mean0","text":"","code":"mean0(vec)"},{"path":"/reference/mean0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function which returns the mean, unless there is a 0 value then it returns 0 — mean0","text":"vec numeric vector","code":""},{"path":"/reference/mean0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function which returns the mean, unless there is a 0 value then it returns 0 — mean0","text":"mean vector unless 0 present, returns 0","code":""},{"path":"/reference/mean_permute.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate mean LR expression from shuffled cluster label matrices\n as done in CellPhoneDB — mean_permute","title":"Function to calculate mean LR expression from shuffled cluster label matrices\n as done in CellPhoneDB — mean_permute","text":"Function calculate mean LR expression shuffled cluster label matrices  done CellPhoneDB","code":""},{"path":"/reference/mean_permute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate mean LR expression from shuffled cluster label matrices\n as done in CellPhoneDB — mean_permute","text":"","code":"mean_permute(col_labels, sce, pb, assay.type)"},{"path":"/reference/mean_permute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate mean LR expression from shuffled cluster label matrices\n as done in CellPhoneDB — mean_permute","text":"col_labels cluster labels sce single cell experiment object pb progress bar object assay.type assay type (counts, logcounts, etc)","code":""},{"path":"/reference/mean_permute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate mean LR expression from shuffled cluster label matrices\n as done in CellPhoneDB — mean_permute","text":"Returns list means per gene calculated reshuffled    cluster/cell identity labels","code":""},{"path":"/reference/min0.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function which returns the value closest to 0 — min0","title":"Helper Function which returns the value closest to 0 — min0","text":"Helper Function returns value closest 0","code":""},{"path":"/reference/min0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function which returns the value closest to 0 — min0","text":"","code":"min0(vec)"},{"path":"/reference/min0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function which returns the value closest to 0 — min0","text":"vec numeric vector","code":""},{"path":"/reference/min0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function which returns the value closest to 0 — min0","text":"value closest 0","code":""},{"path":"/reference/minmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper min-max function — minmax","title":"Helper min-max function — minmax","text":"Helper min-max function","code":""},{"path":"/reference/minmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper min-max function — minmax","text":"","code":"minmax(x, ...)"},{"path":"/reference/minmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper min-max function — minmax","text":"x vector ... Arguments passed base::max","code":""},{"path":"/reference/omnipath_partners.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves intercellular communication partners (transmitters or receivers)\nfrom OmniPath — omnipath_partners","title":"Retrieves intercellular communication partners (transmitters or receivers)\nfrom OmniPath — omnipath_partners","text":"Retrieves intercellular communication partners (transmitters receivers) OmniPath","code":""},{"path":"/reference/omnipath_partners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves intercellular communication partners (transmitters or receivers)\nfrom OmniPath — omnipath_partners","text":"","code":"omnipath_partners(side, ...)"},{"path":"/reference/omnipath_partners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves intercellular communication partners (transmitters or receivers)\nfrom OmniPath — omnipath_partners","text":"side 'ligand' (trans), 'receptor' (rec) '' (short long notation can used) ... Arguments passed OmnipathR::import_omnipath_intercell categories vector containing categories retrieved. genes belonging categories returned. information categories see codeget_intercell_categories. resources limit query certain resources; see available resources get_intercell_resources. parent vector containing parent classes retrieved. genes belonging classes returned. furter information main classes see get_intercell_categories. scope either `specific` `generic` aspect either `locational` `functional` source either `resource_specific` `composite` transmitter logical, include transmitters .e. proteins delivering signal cell environment. receiver logical, include receivers .e. proteins delivering signal cell environment. secreted logical, include secreted proteins plasma_membrane_peripheral logical, include plasma membrane peripheral membrane proteins. plasma_membrane_transmembrane logical, include plasma membrane transmembrane proteins. proteins limit query certain proteins topology topology categories: one `secreted` (sec), `plasma_membrane_peripheral` (pmp), `plasma_membrane_transmembrane` (pmtm) (short long notation can used). causality `transmitter` (trans), `receiver` (rec) `` (short long notation can used). consensus_percentile Numeric: percentile cut consensus score generic categories. consensus score number resources supporting classification entity category based combined information many resources. can apply cut-, keeping annotations supported higher number resources certain percentile category. NULL filtering performed. value either 0-1 range, divided 100 greater 1. percentiles calculated generic composite categories applied resource specific annotations specific child categories. loc_consensus_percentile Numeric: similar codeconsensus_percentile major localizations. example, value 50, secreted, plasma membrane transmembrane peripheral attributes true least 50 percent resources support .","code":""},{"path":"/reference/plot_abundance_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Plot Abundance Summary — plot_abundance_summary","title":"Function to Plot Abundance Summary — plot_abundance_summary","text":"Function Plot Abundance Summary","code":""},{"path":"/reference/plot_abundance_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Plot Abundance Summary — plot_abundance_summary","text":"","code":"plot_abundance_summary(ctqc, ncol = 3)"},{"path":"/reference/plot_abundance_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Plot Abundance Summary — plot_abundance_summary","text":"ctqc cell type quality control summary obtained `get_abundance_summary` ncol number columns facet wrap","code":""},{"path":"/reference/plot_abundance_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Plot Abundance Summary — plot_abundance_summary","text":"ggplot2 object","code":""},{"path":"/reference/plot_c2c_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the product of loadings between the source and target loadings\nwithin a factor — plot_c2c_cells","title":"Plot the product of loadings between the source and target loadings\nwithin a factor — plot_c2c_cells","text":"Plot product loadings source target loadings within factor","code":""},{"path":"/reference/plot_c2c_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the product of loadings between the source and target loadings\nwithin a factor — plot_c2c_cells","text":"","code":"plot_c2c_cells(sce, factor_of_int, ...)"},{"path":"/reference/plot_c2c_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the product of loadings between the source and target loadings\nwithin a factor — plot_c2c_cells","text":"factor_of_int factor interest e.g. Factor.8 ... Arguments passed ComplexHeatmap::Heatmap matrix matrix. Either numeric character. simple vector, converted one-column matrix. col vector colors color mapping discrete color mapping  function matrix continuous numbers (generated colorRamp2). matrix continuous, value can also vector colors colors can interpolated. Pass ColorMapping. details examples, please refer https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#colors . name Name heatmap. default heatmap name used title heatmap legend. na_col Color NA values. rect_gp Graphic parameters drawing rectangles (heatmap body). value specified gpar fill parameter ignored. color_space color space colors interpolated. used matrix numeric  col vector colors. Pass colorRamp2. border Whether draw border. value can logical string color. border_gp Graphic parameters borders. want set different parameters different heatmap slices, please consider use decorate_heatmap_body. cell_fun Self-defined function add graphics cell. Seven parameters passed  function: j, , x, y, width, height, fill column index, row index matrix, coordinate cell, width height cell filled color. x, y, width height unit objects. layer_fun Similar cell_fun, vectorized. Check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#customize--heatmap-body . jitter Random shifts added matrix. value can logical single numeric value. TRUE, random  values uniform distribution 0 1e-10 generated. numeric value, range uniform distribution (0, jitter). mainly solve problem \"Error: node stack overflow\" many identical rows/columns plotting dendrograms. ADD: version 2.5.6, error node stack overflow fixed, now argument ignored. row_title Title row. row_title_side title put left right heatmap? row_title_gp Graphic parameters row title. row_title_rot Rotation row title. 0, 90, 270 allowed set. column_title Title column. column_title_side title put top bottom heatmap? column_title_gp Graphic parameters column title. column_title_rot Rotation column titles. 0, 90, 270 allowed set. cluster_rows value logical, controls whether make cluster rows. value can also hclust dendrogram already contains clustering. Check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#clustering . cluster_row_slices rows split slices, whether perform clustering slice means? clustering_distance_rows can pre-defined character  (\"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\",  \"minkowski\", \"pearson\", \"spearman\", \"kendall\"). can also function. function one argument, input argument matrix  returned value dist object. function two arguments, input arguments two vectors function calculates distance two vectors. clustering_method_rows Method perform hierarchical clustering, pass hclust. row_dend_side row dendrogram put left right heatmap? row_dend_width Width row dendrogram, unit object. show_row_dend Whether show row dendrogram? row_dend_gp Graphic parameters dendrogram segments. users already provide dendrogram object edges rendered, argument ignored. row_dend_reorder Apply reordering row dendrograms. value can logical value vector contains weight  used reorder rows. reordering applied reorder.dendrogram. cluster_columns Whether make cluster columns? settings cluster_rows. cluster_column_slices columns split slices, whether perform clustering slice means? clustering_distance_columns setting clustering_distance_rows. clustering_method_columns Method perform hierarchical clustering, pass hclust. column_dend_side column dendrogram put top bottom heatmap? column_dend_height height column cluster, unit object. show_column_dend Whether show column dendrogram? column_dend_gp Graphic parameters dendrogram segments. settings row_dend_gp. column_dend_reorder Apply reordering column dendrograms. settings row_dend_reorder. row_order Order rows. Manually setting row order turns clustering. column_order Order column. row_labels Optional row labels put row names heatmap. row_names_side row names put left right heatmap? show_row_names Whether show row names. row_names_max_width Maximum width row names viewport. row_names_gp Graphic parameters row names. row_names_rot Rotation row names. row_names_centered row names put centered? column_labels Optional column labels put column names heatmap. column_names_side column names put top bottom heatmap? column_names_max_height Maximum height column names viewport. show_column_names Whether show column names. column_names_gp Graphic parameters drawing text. column_names_rot Rotation column names. column_names_centered column names put centered? top_annotation HeatmapAnnotation object. bottom_annotation HeatmapAnnotation object. left_annotation specified rowAnnotation. right_annotation specified rowAnnotation. km Apply k-means clustering rows. value larger 1, heatmap split rows according k-means clustering. row slice, hierarchical clustering still applied parameters . split vector data frame rows split. cluster_rows clustering object, split can single number indicating split dendrogram cutree. row_km km. row_km_repeats Number k-means runs get consensus k-means clustering. Note row_km_repeats set one, final number groups might smaller row_km, might means original row_km good choice. row_split split. column_km K-means clustering columns. column_km_repeats Number k-means runs get consensus k-means clustering. Similar row_km_repeats. column_split Split columns. heatmap splitting, please refer https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#heatmap-split . gap Gap row slices heatmap split rows. value unit object. row_gap gap. column_gap Gap column slices. show_parent_dend_line heatmap split, whether add dashed line mark parent dendrogram children dendrograms? width Width heatmap body. height Height heatmap body. heatmap_width Width whole heatmap (including heatmap components) heatmap_height Height whole heatmap (including heatmap components). Check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#size---heatmap . show_heatmap_legend Whether show heatmap legend? heatmap_legend_param list contains parameters heatmap legends. See color_mapping_legend,ColorMapping-method available parameters. use_raster Whether render heatmap body raster image. helps reduce file size matrix huge. number rows columns 2000, default turned . Note cell_fun set, use_raster enforced FALSE. raster_device Graphic device used generate raster image. raster_quality value larger 1. raster_device_param list parameters selected graphic device. raster image support, please check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#heatmap--raster-image . raster_resize_mat Whether resize matrix let dimension matrix dimension raster image? value can logical. TRUE, mean used summarize sub matrix corresponds single pixel. value can also summary function, e.g. max. raster_by_magick Whether use image_resize scale image. raster_magick_filter Pass filter argument image_resize. character scalar possible values filter_types. default \"Lanczos\". post_fun function executed heatmap list drawn. factors factors formatted `format_c2c_factors`","code":""},{"path":"/reference/plot_c2c_overview.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot an Overview of tensor-c2c results — plot_c2c_overview","title":"Function to plot an Overview of tensor-c2c results — plot_c2c_overview","text":"Function plot Overview tensor-c2c results","code":""},{"path":"/reference/plot_c2c_overview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot an Overview of tensor-c2c results — plot_c2c_overview","text":"","code":"plot_c2c_overview(sce, group_col, sample_col)"},{"path":"/reference/plot_c2c_overview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot an Overview of tensor-c2c results — plot_c2c_overview","text":"sce SingleCellExperiment factors output tensor-cell2cell group_col context descriptor - obtained `colData(sce)` sample_col context/sample names - obtained `colData(sce)`","code":""},{"path":"/reference/plot_context_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate boxplots with significance — plot_context_boxplot","title":"Generate boxplots with significance — plot_context_boxplot","text":"Generate boxplots significance","code":""},{"path":"/reference/plot_context_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate boxplots with significance — plot_context_boxplot","text":"","code":"plot_context_boxplot(sce, sample_col, group_col, test = \"t.test\", ...)"},{"path":"/reference/plot_context_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate boxplots with significance — plot_context_boxplot","text":"sce SingleCellExperiment factors output tensor-cell2cell sample_col context/sample names - obtained `colData(sce)` group_col context descriptor - obtained `colData(sce)` ... arguments passed test used.","code":""},{"path":"/reference/plot_context_heat.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Heatmap of context loadings — plot_context_heat","title":"Plot a Heatmap of context loadings — plot_context_heat","text":"Plot Heatmap context loadings","code":""},{"path":"/reference/plot_context_heat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Heatmap of context loadings — plot_context_heat","text":"","code":"plot_context_heat(sce, sample_col, group_col, ...)"},{"path":"/reference/plot_context_heat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Heatmap of context loadings — plot_context_heat","text":"sce SingleCellExperiment factors output tensor-cell2cell sample_col context/sample names - obtained `colData(sce)` group_col context descriptor - obtained `colData(sce)` ... Arguments passed ComplexHeatmap::Heatmap matrix matrix. Either numeric character. simple vector, converted one-column matrix. col vector colors color mapping discrete color mapping  function matrix continuous numbers (generated colorRamp2). matrix continuous, value can also vector colors colors can interpolated. Pass ColorMapping. details examples, please refer https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#colors . name Name heatmap. default heatmap name used title heatmap legend. na_col Color NA values. rect_gp Graphic parameters drawing rectangles (heatmap body). value specified gpar fill parameter ignored. color_space color space colors interpolated. used matrix numeric  col vector colors. Pass colorRamp2. border Whether draw border. value can logical string color. border_gp Graphic parameters borders. want set different parameters different heatmap slices, please consider use decorate_heatmap_body. cell_fun Self-defined function add graphics cell. Seven parameters passed  function: j, , x, y, width, height, fill column index, row index matrix, coordinate cell, width height cell filled color. x, y, width height unit objects. layer_fun Similar cell_fun, vectorized. Check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#customize--heatmap-body . jitter Random shifts added matrix. value can logical single numeric value. TRUE, random  values uniform distribution 0 1e-10 generated. numeric value, range uniform distribution (0, jitter). mainly solve problem \"Error: node stack overflow\" many identical rows/columns plotting dendrograms. ADD: version 2.5.6, error node stack overflow fixed, now argument ignored. row_title Title row. row_title_side title put left right heatmap? row_title_gp Graphic parameters row title. row_title_rot Rotation row title. 0, 90, 270 allowed set. column_title Title column. column_title_side title put top bottom heatmap? column_title_gp Graphic parameters column title. column_title_rot Rotation column titles. 0, 90, 270 allowed set. cluster_rows value logical, controls whether make cluster rows. value can also hclust dendrogram already contains clustering. Check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#clustering . cluster_row_slices rows split slices, whether perform clustering slice means? clustering_distance_rows can pre-defined character  (\"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\",  \"minkowski\", \"pearson\", \"spearman\", \"kendall\"). can also function. function one argument, input argument matrix  returned value dist object. function two arguments, input arguments two vectors function calculates distance two vectors. clustering_method_rows Method perform hierarchical clustering, pass hclust. row_dend_side row dendrogram put left right heatmap? row_dend_width Width row dendrogram, unit object. show_row_dend Whether show row dendrogram? row_dend_gp Graphic parameters dendrogram segments. users already provide dendrogram object edges rendered, argument ignored. row_dend_reorder Apply reordering row dendrograms. value can logical value vector contains weight  used reorder rows. reordering applied reorder.dendrogram. cluster_columns Whether make cluster columns? settings cluster_rows. cluster_column_slices columns split slices, whether perform clustering slice means? clustering_distance_columns setting clustering_distance_rows. clustering_method_columns Method perform hierarchical clustering, pass hclust. column_dend_side column dendrogram put top bottom heatmap? column_dend_height height column cluster, unit object. show_column_dend Whether show column dendrogram? column_dend_gp Graphic parameters dendrogram segments. settings row_dend_gp. column_dend_reorder Apply reordering column dendrograms. settings row_dend_reorder. row_order Order rows. Manually setting row order turns clustering. column_order Order column. row_labels Optional row labels put row names heatmap. row_names_side row names put left right heatmap? show_row_names Whether show row names. row_names_max_width Maximum width row names viewport. row_names_gp Graphic parameters row names. row_names_rot Rotation row names. row_names_centered row names put centered? column_labels Optional column labels put column names heatmap. column_names_side column names put top bottom heatmap? column_names_max_height Maximum height column names viewport. show_column_names Whether show column names. column_names_gp Graphic parameters drawing text. column_names_rot Rotation column names. column_names_centered column names put centered? top_annotation HeatmapAnnotation object. bottom_annotation HeatmapAnnotation object. left_annotation specified rowAnnotation. right_annotation specified rowAnnotation. km Apply k-means clustering rows. value larger 1, heatmap split rows according k-means clustering. row slice, hierarchical clustering still applied parameters . split vector data frame rows split. cluster_rows clustering object, split can single number indicating split dendrogram cutree. row_km km. row_km_repeats Number k-means runs get consensus k-means clustering. Note row_km_repeats set one, final number groups might smaller row_km, might means original row_km good choice. row_split split. column_km K-means clustering columns. column_km_repeats Number k-means runs get consensus k-means clustering. Similar row_km_repeats. column_split Split columns. heatmap splitting, please refer https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#heatmap-split . gap Gap row slices heatmap split rows. value unit object. row_gap gap. column_gap Gap column slices. show_parent_dend_line heatmap split, whether add dashed line mark parent dendrogram children dendrograms? width Width heatmap body. height Height heatmap body. heatmap_width Width whole heatmap (including heatmap components) heatmap_height Height whole heatmap (including heatmap components). Check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#size---heatmap . show_heatmap_legend Whether show heatmap legend? heatmap_legend_param list contains parameters heatmap legends. See color_mapping_legend,ColorMapping-method available parameters. use_raster Whether render heatmap body raster image. helps reduce file size matrix huge. number rows columns 2000, default turned . Note cell_fun set, use_raster enforced FALSE. raster_device Graphic device used generate raster image. raster_quality value larger 1. raster_device_param list parameters selected graphic device. raster image support, please check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#heatmap--raster-image . raster_resize_mat Whether resize matrix let dimension matrix dimension raster image? value can logical. TRUE, mean used summarize sub matrix corresponds single pixel. value can also summary function, e.g. max. raster_by_magick Whether use image_resize scale image. raster_magick_filter Pass filter argument image_resize. character scalar possible values filter_types. default \"Lanczos\". post_fun function executed heatmap list drawn.","code":""},{"path":"/reference/plot_context_heat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Heatmap of context loadings — plot_context_heat","text":"ComplexHeatmap object","code":""},{"path":"/reference/plot_lr_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot a UMAP of context loadings — plot_lr_heatmap","title":"Function to plot a UMAP of context loadings — plot_lr_heatmap","text":"Function plot UMAP context loadings","code":""},{"path":"/reference/plot_lr_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot a UMAP of context loadings — plot_lr_heatmap","text":"","code":"plot_lr_heatmap(sce, lr_sep = \"^\", n = 5, ...)"},{"path":"/reference/plot_lr_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot a UMAP of context loadings — plot_lr_heatmap","text":"sce SingleCellExperiment factors output tensor-cell2cell n Number rows return top_n(), fraction rows return top_frac(). n positive, selects top rows. negative, selects bottom rows. x grouped, number (fraction) rows per group. include rows ties. ... Arguments passed ComplexHeatmap::Heatmap matrix matrix. Either numeric character. simple vector, converted one-column matrix. col vector colors color mapping discrete color mapping  function matrix continuous numbers (generated colorRamp2). matrix continuous, value can also vector colors colors can interpolated. Pass ColorMapping. details examples, please refer https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#colors . name Name heatmap. default heatmap name used title heatmap legend. na_col Color NA values. rect_gp Graphic parameters drawing rectangles (heatmap body). value specified gpar fill parameter ignored. color_space color space colors interpolated. used matrix numeric  col vector colors. Pass colorRamp2. border Whether draw border. value can logical string color. border_gp Graphic parameters borders. want set different parameters different heatmap slices, please consider use decorate_heatmap_body. cell_fun Self-defined function add graphics cell. Seven parameters passed  function: j, , x, y, width, height, fill column index, row index matrix, coordinate cell, width height cell filled color. x, y, width height unit objects. layer_fun Similar cell_fun, vectorized. Check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#customize--heatmap-body . jitter Random shifts added matrix. value can logical single numeric value. TRUE, random  values uniform distribution 0 1e-10 generated. numeric value, range uniform distribution (0, jitter). mainly solve problem \"Error: node stack overflow\" many identical rows/columns plotting dendrograms. ADD: version 2.5.6, error node stack overflow fixed, now argument ignored. row_title Title row. row_title_side title put left right heatmap? row_title_gp Graphic parameters row title. row_title_rot Rotation row title. 0, 90, 270 allowed set. column_title Title column. column_title_side title put top bottom heatmap? column_title_gp Graphic parameters column title. column_title_rot Rotation column titles. 0, 90, 270 allowed set. cluster_rows value logical, controls whether make cluster rows. value can also hclust dendrogram already contains clustering. Check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#clustering . cluster_row_slices rows split slices, whether perform clustering slice means? clustering_distance_rows can pre-defined character  (\"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\",  \"minkowski\", \"pearson\", \"spearman\", \"kendall\"). can also function. function one argument, input argument matrix  returned value dist object. function two arguments, input arguments two vectors function calculates distance two vectors. clustering_method_rows Method perform hierarchical clustering, pass hclust. row_dend_side row dendrogram put left right heatmap? row_dend_width Width row dendrogram, unit object. show_row_dend Whether show row dendrogram? row_dend_gp Graphic parameters dendrogram segments. users already provide dendrogram object edges rendered, argument ignored. row_dend_reorder Apply reordering row dendrograms. value can logical value vector contains weight  used reorder rows. reordering applied reorder.dendrogram. cluster_columns Whether make cluster columns? settings cluster_rows. cluster_column_slices columns split slices, whether perform clustering slice means? clustering_distance_columns setting clustering_distance_rows. clustering_method_columns Method perform hierarchical clustering, pass hclust. column_dend_side column dendrogram put top bottom heatmap? column_dend_height height column cluster, unit object. show_column_dend Whether show column dendrogram? column_dend_gp Graphic parameters dendrogram segments. settings row_dend_gp. column_dend_reorder Apply reordering column dendrograms. settings row_dend_reorder. row_order Order rows. Manually setting row order turns clustering. column_order Order column. row_labels Optional row labels put row names heatmap. row_names_side row names put left right heatmap? show_row_names Whether show row names. row_names_max_width Maximum width row names viewport. row_names_gp Graphic parameters row names. row_names_rot Rotation row names. row_names_centered row names put centered? column_labels Optional column labels put column names heatmap. column_names_side column names put top bottom heatmap? column_names_max_height Maximum height column names viewport. show_column_names Whether show column names. column_names_gp Graphic parameters drawing text. column_names_rot Rotation column names. column_names_centered column names put centered? top_annotation HeatmapAnnotation object. bottom_annotation HeatmapAnnotation object. left_annotation specified rowAnnotation. right_annotation specified rowAnnotation. km Apply k-means clustering rows. value larger 1, heatmap split rows according k-means clustering. row slice, hierarchical clustering still applied parameters . split vector data frame rows split. cluster_rows clustering object, split can single number indicating split dendrogram cutree. row_km km. row_km_repeats Number k-means runs get consensus k-means clustering. Note row_km_repeats set one, final number groups might smaller row_km, might means original row_km good choice. row_split split. column_km K-means clustering columns. column_km_repeats Number k-means runs get consensus k-means clustering. Similar row_km_repeats. column_split Split columns. heatmap splitting, please refer https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#heatmap-split . gap Gap row slices heatmap split rows. value unit object. row_gap gap. column_gap Gap column slices. show_parent_dend_line heatmap split, whether add dashed line mark parent dendrogram children dendrograms? width Width heatmap body. height Height heatmap body. heatmap_width Width whole heatmap (including heatmap components) heatmap_height Height whole heatmap (including heatmap components). Check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#size---heatmap . show_heatmap_legend Whether show heatmap legend? heatmap_legend_param list contains parameters heatmap legends. See color_mapping_legend,ColorMapping-method available parameters. use_raster Whether render heatmap body raster image. helps reduce file size matrix huge. number rows columns 2000, default turned . Note cell_fun set, use_raster enforced FALSE. raster_device Graphic device used generate raster image. raster_quality value larger 1. raster_device_param list parameters selected graphic device. raster image support, please check https://jokergoo.github.io/ComplexHeatmap-reference/book/-single-heatmap.html#heatmap--raster-image . raster_resize_mat Whether resize matrix let dimension matrix dimension raster image? value can logical. TRUE, mean used summarize sub matrix corresponds single pixel. value can also summary function, e.g. max. raster_by_magick Whether use image_resize scale image. raster_magick_filter Pass filter argument image_resize. character scalar possible values filter_types. default \"Lanczos\". post_fun function executed heatmap list drawn.","code":""},{"path":"/reference/plot_lr_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to plot a UMAP of context loadings — plot_lr_heatmap","text":"ComplexHeatmap object","code":""},{"path":"/reference/preprocess_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to deal with tensor sparsity and liana's scores as in Python — preprocess_scores","title":"Helper function to deal with tensor sparsity and liana's scores as in Python — preprocess_scores","text":"Helper function deal tensor sparsity liana's scores Python","code":""},{"path":"/reference/preprocess_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to deal with tensor sparsity and liana's scores as in Python — preprocess_scores","text":"","code":"preprocess_scores(   context_df_dict,   score_col = \"magnitude_rank\",   sender_col = \"source\",   receiver_col = \"target\",   ligand_col = \"ligand.complex\",   receptor_col = \"receptor.complex\",   outer_fraction = 0,   invert = TRUE,   invert_fun = function(x) 1 - x,   non_negative = TRUE,   non_negative_fill = 0,   lr_sep = \"^\",   verbose = TRUE )"},{"path":"/reference/preprocess_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to deal with tensor sparsity and liana's scores as in Python — preprocess_scores","text":"context_df_dict Dictionary (named list) containing dataframe context. dataframe must contain columns containing sender (source) cells, receiver (target) cells, ligands, receptors, communication scores, separately. Keys context names values dataframes. NULL default. NULL used instead `sce@metadata$liana_res`. score_col Name column containing communication scores context dataframes. sender_col Name column containing sender cells context dataframes. receiver_col Name column containing receiver cells context dataframes. ligand_col Name column containing ligands context dataframes. receptor_col Name column containing receptors context dataframes. outer_fraction controls elements include union scenario `` options. elements present least fraction samples/contexts included. value 0, considers elements across samples. value 1, acts using `='inner'` invert boolean wheter invert score (TRUE defeault) invert_fun function used invert scores non_negative whether set negative scores 0 non_negative_fill value used fill negative values lr_sep ligand-receptor separator; `^` default. verbose verbosity logical","code":""},{"path":"/reference/rank_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate CCC Method results and by both magnitude and specificity ranks — rank_aggregate","title":"Aggregate CCC Method results and by both magnitude and specificity ranks — rank_aggregate","text":"Aggregate CCC Method results magnitude specificity ranks","code":""},{"path":"/reference/rank_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate CCC Method results and by both magnitude and specificity ranks — rank_aggregate","text":"","code":"rank_aggregate(liana_res, ...)"},{"path":"/reference/rank_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate CCC Method results and by both magnitude and specificity ranks — rank_aggregate","text":"liana_res LIANA results ... Arguments passed liana_aggregate aggregate_how way aggregate, default (NULL) aggregate passed methods approach specified `liana:::.score_specs`. Alternative options `magnitude` `specificity`. set_cap Function used set ranked cap (.e. value assigned interactions NA scores); default, set \"max\", maximum number interactions obtained methods; methods return possible ligand-receptor combinations possible source target cell pair - .e. known universe possible interactions (based CCC resource) resource methods ran multiple resources, name resource interest needs provided *Note* name provided, first results based first resource list returned cap cap can methods can also manually set, top X interactions, based `specificity` scores method returned ranking carried solely get_ranks boolean, whether return consensus ranks methods get_agrank boolean, whether return aggregate rank using `RobustRankAggreg` package. .score_mode defines way methods aggragate. default, use score method reflects specificity (available), e.g. case SCA use sole scoring function. aggregation default done basis list returns `.score_mode`. Alternatively, one pass `.score_housekeep` obtain aggragate housekeeping interactions method. join_cols columns different method results joined. NULL default, automatically handle columns depending methods used.","code":""},{"path":"/reference/rank_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate CCC Method results and by both magnitude and specificity ranks — rank_aggregate","text":"","code":"liana_path <- system.file(package = \"liana\") # load testdata testdata <- readRDS(file.path(liana_path , \"testdata\", \"input\", \"testdata.rds\")) # run liana liana_res <- liana_wrap(testdata, method=c(\"sca\", \"natmi\")) #> Expression from the `RNA` assay will be used #> Running LIANA with `seurat_annotations` as labels! #> Warning: 3465 genes and/or 0 cells were removed as they had no counts! #> LIANA: LR summary stats calculated! #> Now Running: Sca #> Now Running: Natmi # aggregate results from multiple methods liana_res <- rank_aggregate(liana_res) #> Now aggregating sca #> Now aggregating natmi #> Aggregating Ranks #> Warning: Unknown method name or missing specifics for: sca #> Now aggregating natmi #> Aggregating Ranks"},{"path":"/reference/rank_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to rank each method — rank_method","title":"Helper function to rank each method — rank_method","text":"Helper function rank method","code":""},{"path":"/reference/rank_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to rank each method — rank_method","text":"","code":"rank_method(liana_res, method_name, mode = \"specificity\")"},{"path":"/reference/rank_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to rank each method — rank_method","text":"liana_res liana_results single method method_name name method mode ranking carried . Accepted modes `specificity` `magnitude`. first meant reflect specificity interactions across cell types, latter typically reflects highly expressed given interaction.","code":""},{"path":"/reference/rank_method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function to rank each method — rank_method","text":"function makes use liana's `liana:::.score_specs` `liana:::.score_housekeep` functions.","code":""},{"path":"/reference/recode.character2.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified `dplyr::recode` function — recode.character2","title":"Modified `dplyr::recode` function — recode.character2","text":"Modified `dplyr::recode` function","code":""},{"path":"/reference/recode.character2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified `dplyr::recode` function — recode.character2","text":"","code":"# S3 method for character2 recode(.x, ..., .default = NULL, .missing = NULL, .missing_fun)"},{"path":"/reference/recode.character2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified `dplyr::recode` function — recode.character2","text":".x vector modify ... <dynamic-dots> Replacements. character factor .x, named replacement based name. numeric .x, can named . named, replacement done based position .e. .x represents positions look replacements. See examples. named, argument names current values replaced, argument values new (replacement) values. replacements must type, must either length one length .x. .default supplied, values otherwise matched given value. supplied replacements type original values .x, unmatched values changed. supplied replacements compatible, unmatched values replaced NA. .default must either length 1 length .x. .missing supplied, missing values .x replaced value. Must either length 1 length .x. .missing_fun Function modify missing homologs/strings `NULL` default missing values discarded. example, one set `str_to_title` format symbols, format scenario homolog dictionary available organism interest.","code":""},{"path":"/reference/recode.character2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modified `dplyr::recode` function — recode.character2","text":"enables modify unmatched genesymbols","code":""},{"path":"/reference/recomplexify.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to account for complexes in the resources — recomplexify","title":"Helper function to account for complexes in the resources — recomplexify","text":"Helper function account complexes resources","code":""},{"path":"/reference/recomplexify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to account for complexes in the resources — recomplexify","text":"","code":"recomplexify(lr_res, columns, add_columns, ...)"},{"path":"/reference/recomplexify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to account for complexes in the resources — recomplexify","text":"lr_res decomplexified* lr_res columns columns account complexes (obtained via `ScoreSpecifics` class) ... placeholder One choose type mean: geometric, TriMean, etc.","code":""},{"path":"/reference/recomplexify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to account for complexes in the resources — recomplexify","text":"complex-accounted lr_res, complex subunit genesymbols","code":""},{"path":"/reference/recomplexify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function to account for complexes in the resources — recomplexify","text":"passed relevant score_calc function; * decomplexified refers complexes broken subunits  treated seperate entities re-assembled complexes ('recomplexified')  function Note call `account_missing` function assign complex missing subunits's relevant columns expression proportion 0. results whole complex filtered (default) considered non-expressed.","code":""},{"path":"/reference/sca_formatDB.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to convert Omni to LRdb Format — sca_formatDB","title":"Helper Function to convert Omni to LRdb Format — sca_formatDB","text":"Helper Function convert Omni LRdb Format","code":""},{"path":"/reference/sca_formatDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to convert Omni to LRdb Format — sca_formatDB","text":"","code":"sca_formatDB(op_resource)"},{"path":"/reference/sca_formatDB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to convert Omni to LRdb Format — sca_formatDB","text":"op_resource OmniPath resource","code":""},{"path":"/reference/select_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to Handle resource choices — select_resource","title":"Helper Function to Handle resource choices — select_resource","text":"Helper Function Handle resource choices","code":""},{"path":"/reference/select_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Handle resource choices — select_resource","text":"","code":"select_resource(resource)"},{"path":"/reference/select_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Handle resource choices — select_resource","text":"resource names resources. Passing `` return human resources (.e. resources, except MouseConsensus)","code":""},{"path":"/reference/select_resource.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper Function to Handle resource choices — select_resource","text":"function simply reads omni_resources.rds returns resources.    resources can also obtained via file.    `compile_ligrec` function, querries assmelbes    resources via `OmniPathR`. `Default` - Default (inbuilt) resource methods;    using `call_*` functions, default resource used    passing *NULL* resource parameter.    `Reshuffled` - reshuffled (randomized control) version ConnectomeDB","code":""},{"path":"/reference/show_homologene.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to show available organisms via OmnipathR's homologene resource — show_homologene","title":"Helper function to show available organisms via OmnipathR's homologene resource — show_homologene","text":"Helper function show available organisms via OmnipathR's homologene resource","code":""},{"path":"/reference/show_homologene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to show available organisms via OmnipathR's homologene resource — show_homologene","text":"","code":"show_homologene()"},{"path":"/reference/show_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to return the methods in LIANA — show_methods","title":"Helper Function to return the methods in LIANA — show_methods","text":"Helper Function return methods LIANA","code":""},{"path":"/reference/show_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to return the methods in LIANA — show_methods","text":"","code":"show_methods()"},{"path":"/reference/show_methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper Function to return the methods in LIANA — show_methods","text":"methods starting `call_*` re-implemented liana    albeit original pipelines (packages still supported),    recommend using liana re-implementations efficiency","code":""},{"path":"/reference/show_resources.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to return the Resources in LIANA — show_resources","title":"Helper Function to return the Resources in LIANA — show_resources","text":"Helper Function return Resources LIANA","code":""},{"path":"/reference/show_resources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to return the Resources in LIANA — show_resources","text":"","code":"show_resources()"},{"path":"/news/index.html","id":"liana-0112-240222","dir":"Changelog","previous_headings":"","what":"LIANA 0.1.12 (24.02.22)","title":"LIANA 0.1.12 (24.02.22)","text":"Added rank_aggregate generate specificity magnitude rank aggregates. Essentially runs liana_aggregate twice different aggregate_how parameters joins. Added invert_specificity, invert_magnitude, invert_function parameters liana_dotplot. Added decompose_tensor function run decomposition pre-built Tensor. Aggregation can now performed also via liana_bysample, takes aggregate_how parameter, allows magnitude, specificity, . Added preprocess_scores function handles conversion liana’s scores Tensor format.","code":""},{"path":"/news/index.html","id":"liana-0111-060222","dir":"Changelog","previous_headings":"","what":"LIANA 0.1.11 (06.02.22)","title":"LIANA 0.1.11 (06.02.22)","text":"Fixed issue sample_col liana_tensor functions Removed redundant scconnect code Merged #89 fix typo liana_aggregate documentation Fix bug column duplicates cellchat_formatDB. passing “” select_resource now return human resources. add minor condition improvements liana_wrap PR#92","code":""},{"path":"/news/index.html","id":"liana-0110-230122","dir":"Changelog","previous_headings":"","what":"LIANA 0.1.10 (23.01.22)","title":"LIANA 0.1.10 (23.01.22)","text":"Fixed issues generate_lr_geneset function, typos mistake hardcoded values. Bumped version Tensor-cell2cell latest one, now return error values used estimate elbow curve. Added example elbow plot used guide number ranks considered. Extended options cell2cell module can loaded. Fixed issue return_all passed external methods Added example elbow curve tensor tutorial. LIANA’s doplot now keep order original dataframe passed .","code":""},{"path":[]},{"path":"/news/index.html","id":"changes-0-1-9","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.1.9 (13.12.22)","text":"return_all parameter included liana_wrap. return_all enables return interactions liana, ones pass expr_prop threshold. don’t pass threshold assigned worst possible score, lrs..keep flag indicates whether interaction passed threshold. supp_columns included liana_wrap, allows additional columns added output method.","code":""},{"path":"/news/index.html","id":"minor-changes-0-1-9","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"LIANA 0.1.9 (13.12.22)","text":"Min prop complexes now explicitly assigned minimum expr. prop. across subunits deals edge cases non-expression ligand/receptor scores (e.g. z-score) lower score subunit one higher expression proportion. Hence, intended make methods consistent according interactions returned, regardless subunit lower score. aggregate_how parameter added liana_aggregate allow aggregation specificity magnitude scores.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-implementations-0-1-8","dir":"Changelog","previous_headings":"","what":"New Implementations","title":"LIANA 0.1.8 (08.11.22)","text":"Untargeted -condition (context/sample) decomposition cell-cell communication latent patterns /w tensor_cell2cell. Makes use basilisk automatically set-conda env liana. added min_cells parameter liana_wrap, exclude cell identity pass minimum cells threshold.","code":""},{"path":"/news/index.html","id":"changes-0-1-8","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.1.8 (08.11.22)","text":"Mouse Consensus resource now provided default. intracellular OmniPath vignette removed. updated user-friendly one provided next updates. meantime, old one can still downloaded drive Source Target titles now plotted liana_dotplot added explicit error idents_col found metadata/colData","code":""},{"path":[]},{"path":"/news/index.html","id":"changes-0-1-7","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.1.7 (13.10.22)","text":"Changed way ties handles liana_aggregate. Namely, previously assigned minimum rank, resulted ties getting lower p-values , particularly scores lot ties (e.g. CPDB p-value). Fixed issue subunits 0 expr_prop get filtered. observed due previous changes .filt_liana_pipe 0.1.6, subunits filtered recomplexifying. Fixed issue NATMI complexes missing due recomplexify done .expr .sum columns. now seperated columns, ones account complexes, add_cols, ones additional - need account complexes (e.g. also global_mean).","code":""},{"path":"/news/index.html","id":"minor-changes-0-1-7","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"LIANA 0.1.7 (13.10.22)","text":"now refer SCPubr liana’s tutorial. Throw exception NAs cell idents ` Remove duplicated rows orthologous resource","code":""},{"path":"/news/index.html","id":"minor-changes-0-1-7-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"LIANA 0.1.7 (13.10.22)","text":"now refer SCpubr tutorial advanced plots.","code":""},{"path":[]},{"path":"/news/index.html","id":"changes-0-1-6","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.1.6 (11.08.22)","text":"Fixed issue interactions complexes filtered according expr_prop methods. now filter twice - via .filt_liana_pipe computational speed, recomplexify also remove complexes expr_prop <= X. now also filter crosstalk_scores expr_prop. edgecase complexes subunits equal expression, LIANA’s internal methods arbitrarily discard duplicate complex interactions. now return expr_prop method. Note information discarded liana_aggregate. liana_doplot function now explicit way interactions selected. now take topn return highest ranked interactions. Size dots also distinguishable default user can now pass customizable value size range. Added rank_method helper function rank single methods according specificity magnitude. Removed ~20 bad quality interactions Consensus resource. Minor changes filtering SCE object liana_pipe ensure complex subunits present sce","code":""},{"path":[]},{"path":"/news/index.html","id":"changes-0-1-5","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.1.5 (04.07.22)","text":"Re-implemented RRA method Kolde et al., 2012, consequence removal RobustRankAggregate package CRAN. Integrate generate_homologs OmniPath’s homologene database. allows homology conversion simply passing organism ID. Also, handles complicated cases, complex subunits one--many mapping homologs.","code":""},{"path":[]},{"path":"/news/index.html","id":"changes-0-1-4","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.1.4 (18.06.22)","text":"Add prod_weight NATMI’s score. weight Connectome NATMI suggest -condition comparisons. Add NATMI housekeeping aggregate ranking. Enable weighing interactions cell pairs (using DF cell pair assigned weight). typically done spatial constraints, etc. weights can also used mask cell-pair interactions relevant (assigning weights 0). currently assumes weights 0 1 - extended. Tutorial /w appropriate spatial weight generation written.","code":""},{"path":"/news/index.html","id":"minor-changes-0-1-4","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"LIANA 0.1.4 (18.06.22)","text":"default, base logFC now automatically assigned depending object passed LIANA, .e. .antilog1m SCE use 2 base, Euler’s number Seurat. One also pass base wish use via liana_wrap. Automate website deployment gh-pages run R checks push.","code":""},{"path":[]},{"path":"/news/index.html","id":"changes-0-1-3","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.1.3 (15.05.22)","text":"Changed aggregation columns liana_aggregate, cases methods assign different subunits minimum, results redundancies complex. , liana_aggregate now return complex columns, nevertheless, methods still return minimum (lowest expressed subunit) ’s corresponding complex. base used calculate logFC (via get_log2FC) can now passed parameter liana_wrap via liana_pipe.params. Passing NaN base result log2FC calculation using raw counts without pre-processing (e.g. batch correction, etc). base default set 2, assuming log2 transformation performed following library size normalization, thus preserving normalization, reverting back ~counts.","code":""},{"path":"/news/index.html","id":"minor-changes-0-1-3","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"LIANA 0.1.3 (15.05.22)","text":"Extended heatmap allow filtering certain cell types. Removed redundant/leftover code","code":""},{"path":"/news/index.html","id":"new-implementations-0-1-3","dir":"Changelog","previous_headings":"","what":"New implementations","title":"LIANA 0.1.3 (15.05.22)","text":"chord plot interaction frequncies included.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-implementations-0-1-2","dir":"Changelog","previous_headings":"","what":"New Implementations","title":"LIANA 0.1.2 (03.05.22)","text":"Frequency Heatmap available via heat_freq functions, added due common requests. heatmap inspired CellPhoneDB CellChat.","code":""},{"path":"/news/index.html","id":"changes-0-1-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.1.2 (03.05.22)","text":"Extended basic tutorial accommodate new heatmap plots.","code":""},{"path":"/news/index.html","id":"minor-changes-0-1-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"LIANA 0.1.2 (03.05.22)","text":"Allow labels passed liana_dotplot Cleaned docs, dependencies, examples, warnings","code":""},{"path":[]},{"path":"/news/index.html","id":"changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.1.1 (26.04.22)","text":"Change order non-expressed genes empty droplet filtering. now appropriately filter cells sce object limiting gene universe ligands receptors resource.","code":""},{"path":"/news/index.html","id":"minor-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"LIANA 0.1.1 (26.04.22)","text":"Appropriately pass verbose .filter_sce Silence expected warning cellchat_formatDB","code":""},{"path":[]},{"path":"/news/index.html","id":"changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.1.0 (20.04.22)","text":"logFC_mean, rather normalizing counts library size, instead inverse log counts use calculate log2FC. preserve prior correction counts, .e. mainly consistency rest methods.","code":""},{"path":"/news/index.html","id":"minor-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"LIANA 0.1.0 (20.04.22)","text":"Flipped x y axes dotplot according feedback. Added .default_fun parameter generate_orthologues Minor code clean Added examples main exported functions docs Removed several low quality interactions Consensus resource CellChat now work simplified format intercell (.e. Consensus resource). CellChat Squidpy now called using call_cellchat call_squidpy, respectively.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-implementations-0-0-9","dir":"Changelog","previous_headings":"","what":"New Implementations","title":"LIANA 0.0.9 (23.03.2022)","text":"now provide tutorial dedicated orthology conversion resources LIANA","code":""},{"path":"/news/index.html","id":"minor-changes-0-0-9","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"LIANA 0.0.9 (23.03.2022)","text":"LIANA now check : - enough gene intesect resource data (.e. human) negative counts assay normalized counts provided (.e. data/logcounts slot scaled). LIANA now convert non-sparse matrices sparse.","code":""},{"path":[]},{"path":"/news/index.html","id":"changes-0-0-8","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.0.8 (05.03.2022)","text":"Reduced dependencies (specifically Seurat OmniPathR)","code":""},{"path":"/news/index.html","id":"minor-changes-0-0-8","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"LIANA 0.0.8 (05.03.2022)","text":"testthat tests external methods requested explicitly Readme updated - clarified accordingly describes Consensus resource default","code":""},{"path":"/news/index.html","id":"new-features-0-0-8","dir":"Changelog","previous_headings":"","what":"New Features","title":"LIANA 0.0.8 (05.03.2022)","text":"idents_col can now explicitly passed liana_wrap, provided defaults active idents/colLabels SCE Seurat, respectively. verbose param allows omit messages warnings LIANA assay can now passed explicitly working Seurat object, defaults active one otherwise","code":""},{"path":[]},{"path":"/news/index.html","id":"changes-0-0-7","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.0.7","text":"LIANA now use Consensus resource default. highly-literature supported resource, generated using similar filtering steps ‘OmniPath’ (old default) resource. resource similar size (~4,700 interactions), contains higher complex curation content. resources might show minor changes related update UniProt IDs homology-conversion improvements. LIANA now uses mean0 account heteromeric complexes, .e. mean computed, unless value 0, 0 returned. means complex, subunit expressed filtered. LIANA now also appropriately accepts custom function account complexes. liana_aggregate now groups ligand.complex receptor.complex well subunits, hence returns columns","code":""},{"path":"/news/index.html","id":"minor-changes-0-0-7","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"LIANA 0.0.7","text":"Added option show complexes dotplot now default option Documentation improvements decomplexify function now exported liana_aggregate longer return median_rank, ’s largely redundant. re-arranged column order liana_aggregate due addition .complex columns Replaced min0 (used obtain closest 0 value) min -> relevant z-scores used Connectome.","code":""},{"path":"/news/index.html","id":"bugs-0-0-7","dir":"Changelog","previous_headings":"","what":"Bugs","title":"LIANA 0.0.7","text":"Complexes missing subunits correctly assigned ‘missing’ hence filtered/treated non-expressed. Fixed bug LIANA return minimum subunit expression, instead mean methods. stemmed properly passing incorrect complex_policy certain methods, .e. getting hard-coded value instead. Remove decomplexify logical liana_call liana_pipe -> redundant. edge case fix: liana_aggregate now rank interactions subunits, coming different complexes seperately","code":""},{"path":[]},{"path":"/news/index.html","id":"new-implementations-0-0-6","dir":"Changelog","previous_headings":"","what":"New implementations","title":"LIANA 0.0.6","text":"LIANA now optimized terms RAM, swapping internal function rely solely BioConductor single-cell framework (internal methods). LIANA now accepts SingleCellExperiment Seurat objects input. added liana_dotplot basic, flexible, dotplot function LIANA output. (+ tests)","code":""},{"path":"/news/index.html","id":"changes-0-0-6","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.0.6","text":"LIANA now perform basic filtering step, genes cells 0 summed counts removed. global_mean now calculated efficient manner. assay.type liana_pipe passed get_logFC result using logcounts, rather library-normalized counts.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-0-6","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"LIANA 0.0.6","text":"Fixed bug incorrectly passing method names different cases results error.","code":""},{"path":"/news/index.html","id":"deprecated-0-0-6","dir":"Changelog","previous_headings":"","what":"Deprecated","title":"LIANA 0.0.6","text":"External LIANA methods (.e. call_) now deprecated. pipelines maintained solely power users, intend benchmark original implementations, focus downstream analyses. solely developed internal (re-implemented methods). still rely SeuratObject interface, now accept sce seurat input.","code":""},{"path":[]},{"path":"/news/index.html","id":"changes-0-0-5","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.0.5","text":"now filter Crosstalk scores include > 0. Otherwise, LIANA return possible combinations clusters interactions, simply NAs 0s Crosstalk scores. Connectome (>0). CellChat Crosstalk scores/cytotalk longer called default liana_wrap. However, available option passed method parameter. now filter methods expr_prop. done slightly different manner Connectome’s scaled weights crosstalk scores, since require pairs/clusters present appropriately calculate scores. Thus, filter calculate scores, others methods pre-filter. now provide tutorial make use intracellular OmniPath well combine LIANA NicheNet","code":""},{"path":"/news/index.html","id":"liana-004","dir":"Changelog","previous_headings":"","what":"LIANA 0.0.4","title":"LIANA 0.0.4","text":"OmniPath resource major update. CellCall Cellinker resources added, talklr removed. OmniPath resources filtered 1,000 lower quality interactions excluded. improvements made resources, minor. Changes worth mentioning made ICELLNET (updated latest resource version), CellPhoneDB (filtered ambigous interactions), CellChatDB filtered mislaballed interactions.","code":""},{"path":[]},{"path":"/news/index.html","id":"improvements-0-0-3","dir":"Changelog","previous_headings":"","what":"Improvements","title":"LIANA 0.0.3","text":"R re-implementation CellPhoneDBv2’s permutation algorithm optimized work sparse matrices (now uqicker), set default option LIANA (replacing re-implementation algorithm squidpy) Custom proportion filtering - Connectome CytoTalk now filtered expr_prop affects way scores calculated, since require clusters/cluster pairs present appropriately scale normalize scores.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-0-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"LIANA 0.0.3","text":"Fixed issue logFC assigned value ligand","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-0-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"LIANA 0.0.2","text":"Crosstalk scores inspired Cytotalk added. contrast CytoTalk, calculation CTS ligand receptor PEM 0 assigned 0 CTS. Furthermore, use inverse non-self-talk scores calculated CytoTalk also allow autocrine signalling interactions, thus make Crosstalk scores comparable rest methods LIANA. Finally, part LIANA, CytoTalk’s re-implemented scores take account complexes also apply liana-specifc filtering according expr_prop. Worth noting, re-implement cross-talk scores, don’t include intracellular part Cytotalk.","code":""},{"path":"/news/index.html","id":"changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"LIANA 0.0.2","text":"Changed expr_thresh 0.1, based lack improvement performance using 0.2, hence opted less conservative threshold default Changed way default parameters passed method Enabled housekeeping score aggregation external methods (needed revisions) via .score_housekeep Fixed Bug external methods called default DB. resource now always decomplexified Seurat Testdata now properly normalized liana_aggragate now defaul dissociate complexe CellChat Complexes Added tests changes","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-0-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"LIANA 0.0.1","text":"liana_wrap liana_aggragate two highest level functions run methods liana aggragate , respectively.","code":""},{"path":"/news/index.html","id":"re-implemented-the-following-scores-in-liana-0-0-1","dir":"Changelog","previous_headings":"New Features","what":"Re-implemented the following scores in LIANA:","title":"LIANA 0.0.1","text":"logFC NATMI specificity edges Connectome scaled_weights CellPhoneDB algorithm SingleCellSignalR LRScore called via liana_call, leverages statistics provided liana_pipe,","code":""},{"path":"/news/index.html","id":"others-0-0-1","dir":"Changelog","previous_headings":"New Features","what":"Others","title":"LIANA 0.0.1","text":"re-implemented method score names now start call_* decomplexify recomplexify functions used dissociate complexes resources account complexes re-implemented methods liana_aggragate - handy wrapper aggregate results LIANA LIANA++ now user-friendly benchmark version LIANA, respectively webpage vignettes showing validity re-implemented methods, developer/benchmark-focused vignette, vignette customize OmniPath","code":""},{"path":"/news/index.html","id":"bug-fixes-0-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"LIANA 0.0.1","text":"number fixes implemented thanks early stage users. Thanks .","code":""}]
